{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":296,\"hp\":29,\"max_hp\":29,\"strength\":193,\"defense\":192,\"dexterity\":193,\"agility\":193,\"charisma\":1,\"intelligence\":25,\"hacking_chance_mult\":1.41018624,\"hacking_speed_mult\":1.41018624,\"hacking_money_mult\":1.41018624,\"hacking_grow_mult\":1.41018624,\"hacking_exp\":482749.9997170738,\"strength_exp\":43901.42922619869,\"defense_exp\":43617.217625884965,\"dexterity_exp\":44002.43458928673,\"agility_exp\":44402.65399579501,\"charisma_exp\":0,\"intelligence_exp\":612.7871966411171,\"hacking_mult\":1.41018624,\"strength_mult\":1.41018624,\"defense_mult\":1.41018624,\"dexterity_mult\":1.41018624,\"agility_mult\":1.41018624,\"charisma_mult\":1.7486309376000002,\"hacking_exp_mult\":1.41018624,\"strength_exp_mult\":1.41018624,\"defense_exp_mult\":1.41018624,\"dexterity_exp_mult\":1.41018624,\"agility_exp_mult\":1.41018624,\"charisma_exp_mult\":1.305728,\"company_rep_mult\":1.305728,\"faction_rep_mult\":1.305728,\"money\":\"19722669.13197099134\",\"homeComputer\":\"10.6.1.0\",\"city\":\"Sector-12\",\"location\":\"Travel Agency\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"10.6.1.0\",\"purchasedServers\":[\"20.8.0.9\",\"28.5.7.1\",\"86.6.9.3\",\"71.8.3.2\",\"91.9.8.8\",\"31.7.5.6\",\"33.3.0.7\",\"33.0.6.8\",\"77.6.8.7\"],\"hacknetNodes\":[\"13.2.8.1\",\"9.8.9.6\"],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":1152,\"hashes\":172.64624763653168,\"upgrades\":{\"Sell for Money\":982,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Slum Snakes\",\"Netburners\",\"Tetrads\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[],\"sourceFiles\":[{\"n\":1,\"lvl\":3},{\"n\":4,\"lvl\":3},{\"n\":2,\"lvl\":1},{\"n\":3,\"lvl\":1},{\"n\":5,\"lvl\":1},{\"n\":6,\"lvl\":1},{\"lvl\":2,\"n\":12},{\"lvl\":2,\"n\":10},{\"lvl\":3,\"n\":9}],\"numPeopleKilled\":469,\"karma\":-126936,\"crime_money_mult\":1.6191027199999999,\"crime_success_mult\":1.6191027199999999,\"isWorking\":false,\"workType\":\"Committing a crime\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"commit homicide\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":3000,\"work_money_mult\":1.41018624,\"hacknet_node_money_mult\":1.305728,\"hacknet_node_purchase_cost_mult\":0.705672,\"hacknet_node_ram_cost_mult\":0.705672,\"hacknet_node_core_cost_mult\":0.705672,\"hacknet_node_level_cost_mult\":0.705672,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":{\"ctor\":\"Gang\",\"data\":{\"facName\":\"Slum Snakes\",\"members\":[{\"ctor\":\"GangMember\",\"data\":{\"name\":\"War Machine\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":78,\"str\":144,\"def\":149,\"dex\":73,\"agi\":74,\"cha\":70,\"hack_exp\":1637.8188337985744,\"str_exp\":1339.0021932505954,\"def_exp\":1339.0021932505954,\"dex_exp\":1910.5030109820002,\"agi_exp\":715.5086378825824,\"cha_exp\":1788.7998430641687,\"hack_mult\":1.7107860000000001,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Captain Marvel\",\"task\":\"Human Trafficking\",\"earnedRespect\":0,\"hack\":78,\"str\":84,\"def\":117,\"dex\":59,\"agi\":57,\"cha\":71,\"hack_exp\":1636.456597391974,\"str_exp\":1301.219911722663,\"def_exp\":1301.219911722663,\"dex_exp\":1941.066021669921,\"agi_exp\":718.0626576501469,\"cha_exp\":1850.3385526812006,\"hack_mult\":1.7107860000000001,\"str_mult\":2.0756736000000005,\"def_mult\":2.9070850163097606,\"dex_mult\":1.1880000000000002,\"agi_mult\":2.0305622937600005,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"White Ferrari\",\"Hmap Node\",\"Demon Rootkit\",\"Jack the Ripper\"],\"augmentations\":[]}},{\"ctor\":\"GangMember\",\"data\":{\"name\":\"Adam Warlock\",\"task\":\"Territory Warfare\",\"earnedRespect\":0,\"hack\":71,\"str\":134,\"def\":139,\"dex\":67,\"agi\":77,\"cha\":61,\"hack_exp\":1376.171818166921,\"str_exp\":1182.021571991877,\"def_exp\":1182.021571991877,\"dex_exp\":1628.9913971581964,\"agi_exp\":765.2410783565007,\"cha_exp\":1398.8797601024148,\"hack_mult\":1.7107860000000001,\"str_mult\":3.507888384000001,\"def_mult\":3.6338562703872004,\"dex_mult\":1.4850000000000003,\"agi_mult\":2.6397309818880004,\"cha_mult\":1.4592614400000004,\"hack_asc_mult\":1,\"str_asc_mult\":1,\"def_asc_mult\":1,\"dex_asc_mult\":1,\"agi_asc_mult\":1,\"cha_asc_mult\":1,\"upgrades\":[\"Baseball Bat\",\"Katana\",\"Glock 18C\",\"P90C\",\"Steyr AUG\",\"AK-47\",\"M15A10 Assault Rifle\",\"AWM Sniper Rifle\",\"Bulletproof Vest\",\"Full Body Armor\",\"Liquid Body Armor\",\"Graphene Plating Armor\",\"Ford Flex V20\",\"ATX1070 Superbike\",\"Mercedes-Benz S9001\",\"White Ferrari\",\"NUKE Rootkit\",\"Soulstealer Rootkit\",\"Demon Rootkit\",\"Hmap Node\",\"Jack the Ripper\"],\"augmentations\":[]}}],\"wanted\":1,\"respect\":1,\"isHackingGang\":false,\"respectGainRate\":0,\"wantedGainRate\":0,\"moneyGainRate\":0,\"storedCycles\":2,\"storedTerritoryAndPowerCycles\":87,\"territoryClashChance\":0,\"territoryWarfareEngaged\":false,\"notifyMemberDeath\":true}},\"corporation\":null,\"bladeburner\":{\"ctor\":\"Bladeburner\",\"data\":{\"numHosp\":0,\"moneyLost\":0,\"rank\":0,\"maxRank\":0,\"skillPoints\":0,\"totalSkillPoints\":0,\"teamSize\":0,\"teamLost\":0,\"storedCycles\":3,\"randomEventCounter\":339,\"actionTimeToComplete\":30,\"actionTimeCurrent\":22,\"action\":{\"ctor\":\"ActionIdentifier\",\"data\":{\"type\":5,\"name\":\"Training\"}},\"cities\":{\"Aevum\":{\"ctor\":\"City\",\"data\":{\"name\":\"Aevum\",\"pop\":1249696044,\"popEst\":1915389699.242782,\"comms\":94,\"commsEst\":94,\"chaos\":0}},\"Chongqing\":{\"ctor\":\"City\",\"data\":{\"name\":\"Chongqing\",\"pop\":1085508126,\"popEst\":944384548.4839234,\"comms\":83,\"commsEst\":87,\"chaos\":2.14715499999973}},\"Sector-12\":{\"ctor\":\"City\",\"data\":{\"name\":\"Sector-12\",\"pop\":1065317534,\"popEst\":1137558438.8669581,\"comms\":12,\"commsEst\":13,\"chaos\":0}},\"New Tokyo\":{\"ctor\":\"City\",\"data\":{\"name\":\"New Tokyo\",\"pop\":1233541364,\"popEst\":1821958143.5278623,\"comms\":73,\"commsEst\":75,\"chaos\":0}},\"Ishima\":{\"ctor\":\"City\",\"data\":{\"name\":\"Ishima\",\"pop\":1468470401,\"popEst\":1032714028.0856543,\"comms\":18,\"commsEst\":22,\"chaos\":0}},\"Volhaven\":{\"ctor\":\"City\",\"data\":{\"name\":\"Volhaven\",\"pop\":1533816863,\"popEst\":1012781389.9373823,\"comms\":26,\"commsEst\":31,\"chaos\":0}}},\"city\":\"Sector-12\",\"skills\":{},\"skillMultipliers\":{\"successChanceAll\":1,\"successChanceStealth\":1,\"successChanceKill\":1,\"successChanceContract\":1,\"successChanceOperation\":1,\"successChanceEstimate\":1,\"actionTime\":1,\"effHack\":1,\"effStr\":1,\"effDef\":1,\"effDex\":1,\"effAgi\":1,\"effCha\":1,\"effInt\":1,\"stamina\":1,\"money\":1,\"expGain\":1,\"weaponAbility\":1,\"gunAbility\":1},\"staminaBonus\":4.000000000000003,\"maxStamina\":71.36678896304159,\"stamina\":71.36678896304159,\"contracts\":{\"Tracking\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Tracking\",\"desc\":\"Identify and locate Synthoids. This contract involves reconnaissance and information-gathering ONLY. Do NOT engage. Stealth is of the utmost importance.<br><br>Successfully completing Tracking contracts will slightly improve your Synthoid population estimate for whatever city you are currently in.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":126.23587463445891,\"difficultyFac\":1.02,\"rewardFac\":1.041,\"successes\":0,\"failures\":0,\"rankGain\":0.3,\"hpLoss\":0.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":81.0937499999851,\"countGrowth\":3.5,\"weights\":{\"hack\":0,\"str\":0.05,\"def\":0.05,\"dex\":0.35,\"agi\":0.35,\"cha\":0.1,\"int\":0.05},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.9,\"int\":1}}},\"Bounty Hunter\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Bounty Hunter\",\"desc\":\"Hunt down and capture fugitive Synthoids. These Synthoids are wanted alive.<br><br>Successfully completing a Bounty Hunter contract will lower the population in your current city, and will also increase its chaos level.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":260.08523390056416,\"difficultyFac\":1.04,\"rewardFac\":1.085,\"successes\":0,\"failures\":0,\"rankGain\":0.9,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":49.46250000000201,\"countGrowth\":3.4,\"weights\":{\"hack\":0,\"str\":0.15,\"def\":0.15,\"dex\":0.25,\"agi\":0.25,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9}}},\"Retirement\":{\"ctor\":\"Contract\",\"data\":{\"name\":\"Retirement\",\"desc\":\"Hunt down and retire (kill) rogue Synthoids.<br><br>Successfully completing a Retirement contract will lower the population in your current city, and will also increase its chaos level.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":196.00308567708421,\"difficultyFac\":1.03,\"rewardFac\":1.065,\"successes\":0,\"failures\":0,\"rankGain\":0.6,\"hpLoss\":1,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":35.787499999996555,\"countGrowth\":0.6,\"weights\":{\"hack\":0,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0.1,\"int\":0.1},\"decays\":{\"hack\":0,\"str\":0.91,\"def\":0.91,\"dex\":0.91,\"agi\":0.91,\"cha\":0.8,\"int\":0.9}}}},\"operations\":{\"Investigation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Investigation\",\"desc\":\"As a field agent, investigate and identify Synthoid populations, movements, and operations.<br><br>Successful Investigation ops will increase the accuracy of your synthoid data.<br><br>You will NOT lose HP from failed Investigation ops.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":363.5181974044356,\"difficultyFac\":1.03,\"rewardFac\":1.07,\"successes\":0,\"failures\":0,\"rankGain\":2.2,\"rankLoss\":0.2,\"isStealth\":true,\"isKill\":false,\"count\":54.62500000000988,\"countGrowth\":2,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.1,\"cha\":0.25,\"int\":0.1},\"decays\":{\"hack\":0.85,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"reqdRank\":25,\"teamCount\":0}},\"Undercover Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Undercover Operation\",\"desc\":\"Conduct undercover operations to identify hidden and underground Synthoid communities and organizations.<br><br>Successful Undercover ops will increase the accuracy of your synthoid data.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":512.0278936063738,\"difficultyFac\":1.04,\"rewardFac\":1.09,\"successes\":0,\"failures\":0,\"rankGain\":4.4,\"rankLoss\":0.4,\"hpLoss\":2,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":92.51874999998714,\"countGrowth\":2.3,\"weights\":{\"hack\":0.2,\"str\":0.05,\"def\":0.05,\"dex\":0.2,\"agi\":0.2,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.9,\"def\":0.9,\"dex\":0.9,\"agi\":0.9,\"cha\":0.7,\"int\":0.9},\"reqdRank\":100,\"teamCount\":0}},\"Sting Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Sting Operation\",\"desc\":\"Conduct a sting operation to bait and capture particularly notorious Synthoid criminals.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":621.8165052711059,\"difficultyFac\":1.04,\"rewardFac\":1.095,\"successes\":0,\"failures\":0,\"rankGain\":5.5,\"rankLoss\":0.5,\"hpLoss\":2.5,\"hpLost\":0,\"isStealth\":true,\"isKill\":false,\"count\":36.3624999999964,\"countGrowth\":1.8,\"weights\":{\"hack\":0.25,\"str\":0.05,\"def\":0.05,\"dex\":0.25,\"agi\":0.1,\"cha\":0.2,\"int\":0.1},\"decays\":{\"hack\":0.8,\"str\":0.85,\"def\":0.85,\"dex\":0.85,\"agi\":0.85,\"cha\":0.7,\"int\":0.9},\"reqdRank\":500,\"teamCount\":0}},\"Raid\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Raid\",\"desc\":\"Lead an assault on a known Synthoid community. Note that there must be an existing Synthoid community in your current city in order for this Operation to be successful\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":730.3378329609607,\"difficultyFac\":1.045,\"rewardFac\":1.1,\"successes\":0,\"failures\":0,\"rankGain\":55,\"rankLoss\":2.5,\"hpLoss\":50,\"hpLost\":0,\"isStealth\":false,\"isKill\":true,\"count\":45.249999999998565,\"countGrowth\":4,\"weights\":{\"hack\":0.1,\"str\":0.2,\"def\":0.2,\"dex\":0.2,\"agi\":0.2,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"reqdRank\":3000,\"teamCount\":0}},\"Stealth Retirement Operation\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Stealth Retirement Operation\",\"desc\":\"Lead a covert operation to retire Synthoids. The objective is to complete the task without drawing any attention. Stealth and discretion are key.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":915.9608420959056,\"difficultyFac\":1.05,\"rewardFac\":1.11,\"successes\":0,\"failures\":0,\"rankGain\":22,\"rankLoss\":2,\"hpLoss\":10,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":92.31249999999426,\"countGrowth\":1,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.7,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.9},\"reqdRank\":20000,\"teamCount\":0}},\"Assassination\":{\"ctor\":\"Operation\",\"data\":{\"name\":\"Assassination\",\"desc\":\"Assassinate Synthoids that have been identified as important, high-profile social and political leaders in the Synthoid communities.\",\"level\":1,\"maxLevel\":1,\"autoLevel\":true,\"baseDifficulty\":1620.1458059346046,\"difficultyFac\":1.06,\"rewardFac\":1.14,\"successes\":0,\"failures\":0,\"rankGain\":44,\"rankLoss\":4,\"hpLoss\":5,\"hpLost\":0,\"isStealth\":true,\"isKill\":true,\"count\":128.62499999998883,\"countGrowth\":2,\"weights\":{\"hack\":0.1,\"str\":0.1,\"def\":0.1,\"dex\":0.3,\"agi\":0.3,\"cha\":0,\"int\":0.1},\"decays\":{\"hack\":0.6,\"str\":0.8,\"def\":0.8,\"dex\":0.8,\"agi\":0.8,\"cha\":0,\"int\":0.8},\"reqdRank\":50000,\"teamCount\":0}}},\"blackops\":{},\"logging\":{\"general\":true,\"contracts\":true,\"ops\":true,\"blackops\":true,\"events\":true},\"automateEnabled\":false,\"automateActionHigh\":0,\"automateThreshHigh\":0,\"automateActionLow\":0,\"automateThreshLow\":0,\"consoleHistory\":[],\"consoleLogs\":[\"[8/3 08:36] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:36] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:37] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:37] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:38] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:38] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:39] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:39] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:40] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:40] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:41] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:41] Intelligence indicates that a large number of Synthoids migrated from Chongqing to some other city\",\"[8/3 08:41] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:42] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:42] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:43] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:43] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:44] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:44] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:45] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:45] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:46] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:46] Tensions between Synthoids and humans lead to riots in Chongqing! Chaos increased\",\"[8/3 08:46] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:47] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:47] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:48] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:48] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:49] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:49] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:50] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:50] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:51] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:51] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:51] Intelligence indicates that a large number of Synthoids migrated from New Tokyo to some other city\",\"[8/3 08:52] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:52] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:53] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:53] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:54] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:54] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:55] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:55] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:56] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:56] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:57] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:57] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:58] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:58] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:59] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 08:59] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:00] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:00] Tensions between Synthoids and humans lead to riots in Chongqing! Chaos increased\",\"[8/3 09:00] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:01] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:01] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:02] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:02] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:03] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:03] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:04] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:04] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:04] Intelligence indicates that a large number of Synthoids migrated from Aevum to some other city\",\"[8/3 09:05] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:05] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:06] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:06] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:07] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:07] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:08] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:08] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:09] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:09] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:10] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:10] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:11] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:11] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:12] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:12] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:13] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:13] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:14] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:14] Intelligence indicates that the Synthoid population of Volhaven just changed significantly\",\"[8/3 09:14] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:15] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:15] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:16] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:16] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:17] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:17] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:18] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:18] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:19] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:19] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:20] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:20] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:21] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:21] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:22] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\",\"[8/3 09:22] Training completed. Gained: 42.3 str exp, 42.3 def exp, 42.3 dex exp, 42.3 agi exp, 0.040 max stamina\"]}},\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":130.88340341917694,\"hacking_speed_mult\":53.4499396333817,\"hacking_money_mult\":124804.08264898632,\"hacking_grow_mult\":117.75970458984375,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.04292960062387,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2819200,\"earningsForSleeves\":{\"hack\":0,\"str\":5118.661974241116,\"def\":5118.661974241116,\"dex\":5118.661974241116,\"agi\":5118.661974241116,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5118.661974241116,\"def\":5118.661974241116,\"dex\":5118.661974241116,\"agi\":5118.661974241116,\"cha\":0,\"money\":257006920.41525275},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.311199999991725,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":27.49034229738163,\"hacking_speed_mult\":16.394015367202847,\"hacking_money_mult\":3400.9935500219735,\"hacking_grow_mult\":53.8330078125,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.04292960062387,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2815200,\"earningsForSleeves\":{\"hack\":0,\"str\":5131.918216071145,\"def\":5131.918216071145,\"dex\":5131.918216071145,\"agi\":5131.918216071145,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5131.918216071145,\"def\":5131.918216071145,\"dex\":5131.918216071145,\"agi\":5131.918216071145,\"cha\":0,\"money\":256531141.86853987},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.31219999999171,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":27.49034229738163,\"hacking_speed_mult\":16.394015367202844,\"hacking_money_mult\":3400.9935500219735,\"hacking_grow_mult\":53.8330078125,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.04292960062387,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2810200,\"earningsForSleeves\":{\"hack\":0,\"str\":5133.911831988147,\"def\":5133.911831988147,\"dex\":5133.911831988147,\"agi\":5133.911831988147,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5133.911831988147,\"def\":5133.911831988147,\"dex\":5133.911831988147,\"agi\":5133.911831988147,\"cha\":0,\"money\":258780276.8166371},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.31319999999169,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":27.49034229738163,\"hacking_speed_mult\":16.394015367202844,\"hacking_money_mult\":3400.9935500219735,\"hacking_grow_mult\":53.8330078125,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.04292960062387,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2806200,\"earningsForSleeves\":{\"hack\":0,\"str\":5140.2179181088295,\"def\":5140.2179181088295,\"dex\":5140.2179181088295,\"agi\":5140.2179181088295,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5140.2179181088295,\"def\":5140.2179181088295,\"dex\":5140.2179181088295,\"agi\":5140.2179181088295,\"cha\":0,\"money\":259731833.91006285},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.31519999999167,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":27.49034229738163,\"hacking_speed_mult\":16.394015367202844,\"hacking_money_mult\":3400.9935500219735,\"hacking_grow_mult\":53.8330078125,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.04292960062387,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2803200,\"earningsForSleeves\":{\"hack\":0,\"str\":5134.737712418735,\"def\":5134.737712418735,\"dex\":5134.737712418735,\"agi\":5134.737712418735,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5134.737712418735,\"def\":5134.737712418735,\"dex\":5134.737712418735,\"agi\":5134.737712418735,\"cha\":0,\"money\":256704152.24916273},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.31919999999165,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":27.49034229738163,\"hacking_speed_mult\":16.394015367202844,\"hacking_money_mult\":3400.9935500219735,\"hacking_grow_mult\":53.8330078125,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.04292960062387,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2799200,\"earningsForSleeves\":{\"hack\":0,\"str\":5141.407514417937,\"def\":5141.407514417937,\"dex\":5141.407514417937,\"agi\":5141.407514417937,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5141.407514417937,\"def\":5141.407514417937,\"dex\":5141.407514417937,\"agi\":5141.407514417937,\"cha\":0,\"money\":256617647.0588513},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.329199999991612,\"storedCycles\":1,\"sync\":100}},{\"ctor\":\"Sleeve\",\"data\":{\"hacking_skill\":1,\"strength\":130,\"defense\":130,\"dexterity\":130,\"agility\":130,\"charisma\":1,\"intelligence\":1,\"hp\":23,\"max_hp\":23,\"hacking_exp\":0,\"strength_exp\":35988.603442909465,\"defense_exp\":35988.603442909465,\"dexterity_exp\":35988.603442909465,\"agility_exp\":35988.603442909465,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":27.49034229738163,\"hacking_speed_mult\":16.394015367202844,\"hacking_money_mult\":3400.9935500219735,\"hacking_grow_mult\":53.8330078125,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":16.042929600623875,\"hacknet_node_purchase_cost_mult\":0.44769712500000003,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.6141249999999999,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"className\":\"\",\"crimeType\":\"\",\"currentTask\":6,\"currentTaskLocation\":\"\",\"currentTaskMaxTime\":0,\"currentTaskTime\":2795200,\"earningsForSleeves\":{\"hack\":0,\"str\":5187.74827566364,\"def\":5187.74827566364,\"dex\":5187.74827566364,\"agi\":5187.74827566364,\"cha\":0,\"money\":0},\"earningsForPlayer\":{\"hack\":0,\"str\":5187.74827566364,\"def\":5187.74827566364,\"dex\":5187.74827566364,\"agi\":5187.74827566364,\"cha\":0,\"money\":264446366.7820359},\"earningsForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"factionWorkType\":2,\"gainRatesForTask\":{\"hack\":0,\"str\":0,\"def\":0,\"dex\":0,\"agi\":0,\"cha\":0,\"money\":0},\"gymStatType\":\"\",\"logs\":[],\"memory\":100,\"shock\":27.330199999991596,\"storedCycles\":1,\"sync\":100}}],\"resleeves\":[{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":43,\"strength\":66,\"defense\":69,\"dexterity\":58,\"agility\":61,\"charisma\":67,\"intelligence\":1,\"hp\":16,\"max_hp\":16,\"hacking_exp\":1588,\"strength_exp\":3950,\"defense_exp\":3479,\"dexterity_exp\":2917,\"agility_exp\":2665,\"charisma_exp\":4142,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1.1,\"dexterity_mult\":1,\"agility_mult\":1.1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.25,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"The Blade's Simulacrum\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":134,\"strength\":129,\"defense\":168,\"dexterity\":138,\"agility\":152,\"charisma\":151,\"intelligence\":1,\"hp\":26,\"max_hp\":26,\"hacking_exp\":27360,\"strength_exp\":23504,\"defense_exp\":75152,\"dexterity_exp\":46000,\"agility_exp\":74064,\"charisma_exp\":71888,\"intelligence_exp\":0,\"hacking_mult\":1.1,\"strength_mult\":1.1,\"defense_mult\":1.1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1.25,\"hacking_grow_mult\":1,\"company_rep_mult\":1.75,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"DataJack\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":136,\"strength\":115,\"defense\":114,\"dexterity\":122,\"agility\":105,\"charisma\":109,\"intelligence\":1,\"hp\":21,\"max_hp\":21,\"hacking_exp\":15396,\"strength_exp\":18528,\"defense_exp\":18246,\"dexterity_exp\":23160,\"agility_exp\":13698,\"charisma_exp\":17712,\"intelligence_exp\":0,\"hacking_mult\":1.3,\"strength_mult\":1.04,\"defense_mult\":1.04,\"dexterity_mult\":1.04,\"agility_mult\":1.04,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1.25,\"hacking_grow_mult\":1.75,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.03,\"augmentations\":[{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":147,\"strength\":159,\"defense\":196,\"dexterity\":130,\"agility\":140,\"charisma\":111,\"intelligence\":1,\"hp\":29,\"max_hp\":29,\"hacking_exp\":24321,\"strength_exp\":20603,\"defense_exp\":49687,\"dexterity_exp\":34991,\"agility_exp\":49632,\"charisma_exp\":19129,\"intelligence_exp\":0,\"hacking_mult\":1.242,\"strength_mult\":1.4,\"defense_mult\":1.4,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1.38,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.1550000000000002,\"hacking_speed_mult\":1.1025,\"hacking_money_mult\":1.3,\"hacking_grow_mult\":1,\"company_rep_mult\":1.15,\"faction_rep_mult\":1.15,\"crime_money_mult\":1.3,\"crime_success_mult\":1.1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Graphene BranchiBlades Upgrade\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":158,\"strength\":154,\"defense\":259,\"dexterity\":148,\"agility\":136,\"charisma\":155,\"intelligence\":1,\"hp\":35,\"max_hp\":35,\"hacking_exp\":87696,\"strength_exp\":42525,\"defense_exp\":101115,\"dexterity_exp\":23247,\"agility_exp\":42756,\"charisma_exp\":81102,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1.14,\"defense_mult\":1.5959999999999999,\"dexterity_mult\":1.26,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.265,\"faction_rep_mult\":1.265,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.03,\"augmentations\":[{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"EsperTech Bladeburner Eyewear\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":179,\"strength\":217,\"defense\":165,\"dexterity\":210,\"agility\":163,\"charisma\":160,\"intelligence\":1,\"hp\":26,\"max_hp\":26,\"hacking_exp\":94432,\"strength_exp\":48100,\"defense_exp\":45188,\"dexterity_exp\":99970,\"agility_exp\":104806,\"charisma_exp\":94822,\"intelligence_exp\":0,\"hacking_mult\":1.12,\"strength_mult\":1.56,\"defense_mult\":1.2,\"dexterity_mult\":1.3,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.03,\"hacking_money_mult\":1.15,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":186,\"strength\":299,\"defense\":292,\"dexterity\":179,\"agility\":282,\"charisma\":142,\"intelligence\":1,\"hp\":39,\"max_hp\":39,\"hacking_exp\":53452,\"strength_exp\":220478,\"defense_exp\":190900,\"dexterity_exp\":51658,\"agility_exp\":118312,\"charisma_exp\":52532,\"intelligence_exp\":0,\"hacking_mult\":1.3063680000000004,\"strength_mult\":1.6099999999999999,\"defense_mult\":1.6099999999999999,\"dexterity_mult\":1.265,\"agility_mult\":1.6905,\"charisma_mult\":1,\"hacking_exp_mult\":1.15,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.03,\"hacking_money_mult\":1.15,\"hacking_grow_mult\":1,\"company_rep_mult\":1.15,\"faction_rep_mult\":1.15,\"crime_money_mult\":1.2100000000000002,\"crime_success_mult\":1.25,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":189,\"strength\":259,\"defense\":232,\"dexterity\":204,\"agility\":236,\"charisma\":148,\"intelligence\":1,\"hp\":33,\"max_hp\":33,\"hacking_exp\":153918,\"strength_exp\":170085,\"defense_exp\":91647,\"dexterity_exp\":225828,\"agility_exp\":102357,\"charisma_exp\":63291,\"intelligence_exp\":0,\"hacking_mult\":1.08,\"strength_mult\":1.456,\"defense_mult\":1.456,\"dexterity_mult\":1.092,\"agility_mult\":1.456,\"charisma_mult\":1,\"hacking_exp_mult\":1.15,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.05,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.26,\"hacking_speed_mult\":1.05,\"hacking_money_mult\":1.8199999999999998,\"hacking_grow_mult\":1,\"company_rep_mult\":1.2,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.1669900000000002,\"augmentations\":[{\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"EsperTech Bladeburner Eyewear\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":198,\"strength\":166,\"defense\":189,\"dexterity\":213,\"agility\":173,\"charisma\":169,\"intelligence\":1,\"hp\":28,\"max_hp\":28,\"hacking_exp\":142056,\"strength_exp\":81540,\"defense_exp\":162144,\"dexterity_exp\":75384,\"agility_exp\":100188,\"charisma_exp\":128376,\"intelligence_exp\":0,\"hacking_mult\":1.15,\"strength_mult\":1.07,\"defense_mult\":1.07,\"dexterity_mult\":1.3910000000000002,\"agility_mult\":1.07,\"charisma_mult\":1,\"hacking_exp_mult\":1.38,\"strength_exp_mult\":1.4489999999999998,\"defense_exp_mult\":1.4489999999999998,\"dexterity_exp_mult\":1.4489999999999998,\"agility_exp_mult\":1.4489999999999998,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1.1,\"hacking_speed_mult\":1.05,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1,\"bladeburner_stamina_gain_mult\":1.05,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"GOLEM Serum\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":199,\"strength\":287,\"defense\":258,\"dexterity\":237,\"agility\":213,\"charisma\":192,\"intelligence\":1,\"hp\":35,\"max_hp\":35,\"hacking_exp\":252728,\"strength_exp\":170464,\"defense_exp\":95088,\"dexterity_exp\":177800,\"agility_exp\":57904,\"charisma_exp\":269864,\"intelligence_exp\":0,\"hacking_mult\":1.05,\"strength_mult\":1.6099999999999999,\"defense_mult\":1.6099999999999999,\"dexterity_mult\":1.323,\"agility_mult\":1.47,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.15,\"crime_success_mult\":1.1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.2075,\"bladeburner_success_chance_mult\":1.082118,\"augmentations\":[{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"EsperTech Bladeburner Eyewear\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"EMS-4 Recombination\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":200,\"strength\":319,\"defense\":238,\"dexterity\":303,\"agility\":211,\"charisma\":180,\"intelligence\":1,\"hp\":33,\"max_hp\":33,\"hacking_exp\":351260,\"strength_exp\":386204,\"defense_exp\":233142,\"dexterity_exp\":279188,\"agility_exp\":204841,\"charisma_exp\":184275,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1.5697500000000002,\"defense_mult\":1.267875,\"dexterity_mult\":1.5697500000000002,\"agility_mult\":1.15,\"charisma_mult\":1,\"hacking_exp_mult\":1.2,\"strength_exp_mult\":1.26,\"defense_exp_mult\":1.3860000000000001,\"dexterity_exp_mult\":1.3860000000000001,\"agility_exp_mult\":1.26,\"charisma_exp_mult\":1.2,\"hacking_chance_mult\":1.2,\"hacking_speed_mult\":1,\"hacking_money_mult\":1.4,\"hacking_grow_mult\":1,\"company_rep_mult\":1.1,\"faction_rep_mult\":1.1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.25,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.2075,\"bladeburner_success_chance_mult\":1.3648827628800002,\"augmentations\":[{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\",\"level\":1},{\"name\":\"Vangelis Virus 3.0\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1},{\"name\":\"ORION-MKIV Shoulder\",\"level\":1},{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V1\",\"level\":1},{\"name\":\"EMS-4 Recombination\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V2\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":203,\"strength\":192,\"defense\":267,\"dexterity\":198,\"agility\":182,\"charisma\":224,\"intelligence\":1,\"hp\":36,\"max_hp\":36,\"hacking_exp\":159210,\"strength_exp\":213622,\"defense_exp\":117364,\"dexterity_exp\":259250,\"agility_exp\":91378,\"charisma_exp\":225700,\"intelligence_exp\":0,\"hacking_mult\":1.1550000000000002,\"strength_mult\":1.04,\"defense_mult\":1.6016000000000001,\"dexterity_mult\":1.04,\"agility_mult\":1.1440000000000001,\"charisma_mult\":1.2,\"hacking_exp_mult\":1.4375,\"strength_exp_mult\":1.15,\"defense_exp_mult\":1.15,\"dexterity_exp_mult\":1.15,\"agility_exp_mult\":1.15,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1.1,\"hacking_speed_mult\":1.0605,\"hacking_money_mult\":1.75,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.25,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.03,\"augmentations\":[{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":216,\"strength\":284,\"defense\":210,\"dexterity\":258,\"agility\":334,\"charisma\":231,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":123808,\"strength_exp\":473608,\"defense_exp\":169600,\"dexterity_exp\":225568,\"agility_exp\":461206,\"charisma_exp\":153912,\"intelligence_exp\":0,\"hacking_mult\":1.2829300000000003,\"strength_mult\":1.3569999999999998,\"defense_mult\":1.18,\"dexterity_mult\":1.38,\"agility_mult\":1.6,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.2305,\"strength_exp_mult\":1.15,\"defense_exp_mult\":1.15,\"dexterity_exp_mult\":1.15,\"agility_exp_mult\":1.15,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1.03,\"hacking_speed_mult\":1.071612,\"hacking_money_mult\":1.3915000000000002,\"hacking_grow_mult\":1,\"company_rep_mult\":1.1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":0.9,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.1448,\"augmentations\":[{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V2\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V1\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":222,\"strength\":177,\"defense\":156,\"dexterity\":135,\"agility\":157,\"charisma\":151,\"intelligence\":1,\"hp\":25,\"max_hp\":25,\"hacking_exp\":81096,\"strength_exp\":127410,\"defense_exp\":66185,\"dexterity_exp\":34069,\"agility_exp\":85994,\"charisma_exp\":70463,\"intelligence_exp\":0,\"hacking_mult\":1.4300000000000002,\"strength_mult\":1.05,\"defense_mult\":1.05,\"dexterity_mult\":1.05,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1.1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.1550000000000002,\"hacking_money_mult\":1.25,\"hacking_grow_mult\":1.75,\"company_rep_mult\":2,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1.1,\"bladeburner_success_chance_mult\":1.0816000000000001,\"augmentations\":[{\"name\":\"Embedded Netburner Module Analyze Engine\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"ORION-MKIV Shoulder\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":225,\"strength\":204,\"defense\":455,\"dexterity\":258,\"agility\":193,\"charisma\":197,\"intelligence\":1,\"hp\":55,\"max_hp\":55,\"hacking_exp\":196992,\"strength_exp\":242109,\"defense_exp\":264384,\"dexterity_exp\":322623,\"agility_exp\":175851,\"charisma_exp\":322218,\"intelligence_exp\":0,\"hacking_mult\":1.2358500000000003,\"strength_mult\":1.08,\"defense_mult\":2.3760000000000003,\"dexterity_mult\":1.3068000000000002,\"agility_mult\":1.08,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1.15,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.26,\"hacking_speed_mult\":1.0302,\"hacking_money_mult\":1.4,\"hacking_grow_mult\":1,\"company_rep_mult\":2.0124999999999997,\"faction_rep_mult\":1.15,\"crime_money_mult\":1.25,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.1,\"augmentations\":[{\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":234,\"strength\":218,\"defense\":213,\"dexterity\":245,\"agility\":165,\"charisma\":172,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":316464,\"strength_exp\":190228,\"defense_exp\":169632,\"dexterity_exp\":295184,\"agility_exp\":112556,\"charisma_exp\":139840,\"intelligence_exp\":0,\"hacking_mult\":1.1880000000000002,\"strength_mult\":1.2,\"defense_mult\":1.2,\"dexterity_mult\":1.26,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1.3224999999999998,\"strength_exp_mult\":1.15,\"defense_exp_mult\":1.15,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.15,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.05,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":2.2,\"faction_rep_mult\":1.1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1.1,\"bladeburner_success_chance_mult\":1.2263097600000004,\"augmentations\":[{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"EsperTech Bladeburner Eyewear\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V1\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":241,\"strength\":193,\"defense\":211,\"dexterity\":266,\"agility\":165,\"charisma\":209,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":306720,\"strength_exp\":119520,\"defense_exp\":198912,\"dexterity_exp\":293088,\"agility_exp\":111072,\"charisma_exp\":465216,\"intelligence_exp\":0,\"hacking_mult\":1.2320000000000002,\"strength_mult\":1.1550000000000002,\"defense_mult\":1.1550000000000002,\"dexterity_mult\":1.3650000000000002,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1.15,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.03,\"hacking_money_mult\":1.7249999999999999,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.3915000000000002,\"hacknet_node_purchase_cost_mult\":0.765,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.05,\"bladeburner_success_chance_mult\":1.0712000000000002,\"augmentations\":[{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"ORION-MKIV Shoulder\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"name\":\"EMS-4 Recombination\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":252,\"strength\":1314,\"defense\":862,\"dexterity\":541,\"agility\":1215,\"charisma\":217,\"intelligence\":1,\"hp\":96,\"max_hp\":96,\"hacking_exp\":469751,\"strength_exp\":430462,\"defense_exp\":387638,\"dexterity_exp\":286941,\"agility_exp\":443895,\"charisma_exp\":431169,\"intelligence_exp\":0,\"hacking_mult\":1.2075,\"strength_mult\":6.3543193875,\"defense_mult\":4.236212925,\"dexterity_mult\":2.7869821875000005,\"agility_mult\":5.85266259375,\"charisma_mult\":1.05,\"hacking_exp_mult\":1.265,\"strength_exp_mult\":1.7077500000000003,\"defense_exp_mult\":1.7077500000000003,\"dexterity_exp_mult\":1.7077500000000003,\"agility_exp_mult\":1.7077500000000003,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1.25,\"hacking_grow_mult\":1,\"company_rep_mult\":1.2,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.595,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.1025,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.03,\"augmentations\":[{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Blade's Runners\",\"level\":1},{\"name\":\"GOLEM Serum\",\"level\":1},{\"name\":\"Hacknet Node Core Direct-Neural Interface\",\"level\":1},{\"name\":\"EsperTech Bladeburner Eyewear\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"name\":\"SPTN-97 Gene Modification\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":263,\"strength\":1245,\"defense\":2780,\"dexterity\":349,\"agility\":460,\"charisma\":242,\"intelligence\":1,\"hp\":288,\"max_hp\":288,\"hacking_exp\":381150,\"strength_exp\":453266,\"defense_exp\":501061,\"dexterity_exp\":573177,\"agility_exp\":378972,\"charisma_exp\":370865,\"intelligence_exp\":0,\"hacking_mult\":1.296,\"strength_mult\":5.976179999999999,\"defense_mult\":13.147596000000002,\"dexterity_mult\":1.62,\"agility_mult\":2.268,\"charisma_mult\":1.2,\"hacking_exp_mult\":1.4811999999999999,\"strength_exp_mult\":1.5525,\"defense_exp_mult\":1.5525,\"dexterity_exp_mult\":1.70775,\"agility_exp_mult\":1.5525,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1.32,\"hacking_speed_mult\":1.02,\"hacking_money_mult\":1.4,\"hacking_grow_mult\":1,\"company_rep_mult\":1.44,\"faction_rep_mult\":1.2,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.25,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.3282500000000002,\"bladeburner_success_chance_mult\":1.0926240000000003,\"augmentations\":[{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"EMS-4 Recombination\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"The Blade's Simulacrum\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":268,\"strength\":1176,\"defense\":784,\"dexterity\":300,\"agility\":808,\"charisma\":288,\"intelligence\":1,\"hp\":88,\"max_hp\":88,\"hacking_exp\":498420,\"strength_exp\":762684,\"defense_exp\":768612,\"dexterity_exp\":233220,\"agility_exp\":487344,\"charisma_exp\":182052,\"intelligence_exp\":0,\"hacking_mult\":1.2711600000000003,\"strength_mult\":5.241600000000001,\"defense_mult\":3.4944000000000006,\"dexterity_mult\":1.6,\"agility_mult\":3.8400000000000007,\"charisma_mult\":1.6,\"hacking_exp_mult\":1.509375,\"strength_exp_mult\":1.1025,\"defense_exp_mult\":1.1025,\"dexterity_exp_mult\":1.1025,\"agility_exp_mult\":1.1025,\"charisma_exp_mult\":1.6800000000000002,\"hacking_chance_mult\":1.1550000000000002,\"hacking_speed_mult\":1.0710000000000002,\"hacking_money_mult\":1.4,\"hacking_grow_mult\":1,\"company_rep_mult\":1.265,\"faction_rep_mult\":1.15,\"crime_money_mult\":1.3,\"crime_success_mult\":1.1,\"work_money_mult\":1.2,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":0.9,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1550000000000002,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.1550000000000002,\"augmentations\":[{\"name\":\"Graphene BranchiBlades Upgrade\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V3 Upgrade\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":290,\"strength\":476,\"defense\":384,\"dexterity\":260,\"agility\":847,\"charisma\":237,\"intelligence\":1,\"hp\":48,\"max_hp\":48,\"hacking_exp\":224202,\"strength_exp\":147834,\"defense_exp\":99244,\"dexterity_exp\":239252,\"agility_exp\":364296,\"charisma_exp\":326542,\"intelligence_exp\":0,\"hacking_mult\":1.5539040000000004,\"strength_mult\":2.7357119999999995,\"defense_mult\":2.3788799999999997,\"dexterity_mult\":1.38,\"agility_mult\":4.2,\"charisma_mult\":1.2,\"hacking_exp_mult\":1.15,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.05,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1,\"hacking_chance_mult\":1.05,\"hacking_speed_mult\":1.0924200000000002,\"hacking_money_mult\":1.6445,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":290,\"strength\":574,\"defense\":577,\"dexterity\":314,\"agility\":551,\"charisma\":202,\"intelligence\":1,\"hp\":67,\"max_hp\":67,\"hacking_exp\":376611,\"strength_exp\":512817,\"defense_exp\":281013,\"dexterity_exp\":361101,\"agility_exp\":688926,\"charisma_exp\":157497,\"intelligence_exp\":0,\"hacking_mult\":1.4345100000000002,\"strength_mult\":2.7081,\"defense_mult\":2.9789100000000004,\"dexterity_mult\":1.5592500000000002,\"agility_mult\":2.494800000000001,\"charisma_mult\":1.15,\"hacking_exp_mult\":1.518,\"strength_exp_mult\":1.4850000000000003,\"defense_exp_mult\":1.4850000000000003,\"dexterity_exp_mult\":1.6335000000000004,\"agility_exp_mult\":1.4850000000000003,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.1,\"hacking_speed_mult\":1.05,\"hacking_money_mult\":1,\"hacking_grow_mult\":3,\"company_rep_mult\":1.75,\"faction_rep_mult\":1,\"crime_money_mult\":1.375,\"crime_success_mult\":1.25,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.375,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.1550000000000002,\"bladeburner_success_chance_mult\":1.0712000000000002,\"augmentations\":[{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"ECorp HVMind Implant\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"EMS-4 Recombination\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":290,\"strength\":160,\"defense\":179,\"dexterity\":171,\"agility\":458,\"charisma\":251,\"intelligence\":1,\"hp\":27,\"max_hp\":27,\"hacking_exp\":113939,\"strength_exp\":94464,\"defense_exp\":177981,\"dexterity_exp\":135382,\"agility_exp\":201351,\"charisma_exp\":85854,\"intelligence_exp\":0,\"hacking_mult\":1.75,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":2.5,\"charisma_mult\":1.6,\"hacking_exp_mult\":1.4,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.05,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1.6,\"hacking_chance_mult\":2.5,\"hacking_speed_mult\":2,\"hacking_money_mult\":4,\"hacking_grow_mult\":1,\"company_rep_mult\":1.2,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Nuoptimal Nootropic Injector Implant\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":295,\"strength\":266,\"defense\":284,\"dexterity\":247,\"agility\":271,\"charisma\":449,\"intelligence\":1,\"hp\":38,\"max_hp\":38,\"hacking_exp\":382950,\"strength_exp\":484182,\"defense_exp\":401376,\"dexterity_exp\":299922,\"agility_exp\":553779,\"charisma_exp\":527361,\"intelligence_exp\":0,\"hacking_mult\":1.456056,\"strength_mult\":1.265,\"defense_mult\":1.3915000000000002,\"dexterity_mult\":1.265,\"agility_mult\":1.265,\"charisma_mult\":2.112,\"hacking_exp_mult\":1.5848437499999999,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.2075,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1.6800000000000002,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.050804,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"company_rep_mult\":1.2100000000000002,\"faction_rep_mult\":1,\"crime_money_mult\":1.5625,\"crime_success_mult\":1,\"work_money_mult\":1.2,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"The Blade's Simulacrum\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":301,\"strength\":518,\"defense\":444,\"dexterity\":431,\"agility\":681,\"charisma\":312,\"intelligence\":1,\"hp\":54,\"max_hp\":54,\"hacking_exp\":592641,\"strength_exp\":789222,\"defense_exp\":613893,\"dexterity_exp\":317975,\"agility_exp\":580566,\"charisma_exp\":298977,\"intelligence_exp\":0,\"hacking_mult\":1.3910000000000002,\"strength_mult\":2.2984,\"defense_mult\":2.0420400000000005,\"dexterity_mult\":2.1861840000000003,\"agility_mult\":3.1531500000000006,\"charisma_mult\":1.6,\"hacking_exp_mult\":1.05,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.05,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1.6800000000000002,\"hacking_chance_mult\":1.05,\"hacking_speed_mult\":1.082118,\"hacking_money_mult\":1.375,\"hacking_grow_mult\":1.75,\"company_rep_mult\":1.1,\"faction_rep_mult\":1,\"crime_money_mult\":1.5125000000000002,\"crime_success_mult\":1.25,\"work_money_mult\":1.2,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.0404,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.1463900000000002,\"augmentations\":[{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Enhanced Social Interaction Implant\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":310,\"strength\":487,\"defense\":478,\"dexterity\":234,\"agility\":341,\"charisma\":260,\"intelligence\":1,\"hp\":57,\"max_hp\":57,\"hacking_exp\":250236,\"strength_exp\":263592,\"defense_exp\":361494,\"dexterity_exp\":163674,\"agility_exp\":138600,\"charisma_exp\":431676,\"intelligence_exp\":0,\"hacking_mult\":1.6307827200000002,\"strength_mult\":2.5424279999999997,\"defense_mult\":2.372932799999999,\"dexterity_mult\":1.3230000000000002,\"agility_mult\":1.9845000000000002,\"charisma_mult\":1.26,\"hacking_exp_mult\":1.3915,\"strength_exp_mult\":1.265,\"defense_exp_mult\":1.265,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.265,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":1.05,\"hacking_speed_mult\":1.10376036,\"hacking_money_mult\":1.38,\"hacking_grow_mult\":1.25,\"company_rep_mult\":1.15,\"faction_rep_mult\":1.15,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.08,\"augmentations\":[{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen IV\",\"level\":1},{\"name\":\"The Blade's Simulacrum\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Artificial Bio-neural Network Implant\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":361,\"strength\":935,\"defense\":489,\"dexterity\":814,\"agility\":570,\"charisma\":217,\"intelligence\":1,\"hp\":58,\"max_hp\":58,\"hacking_exp\":603273,\"strength_exp\":810156,\"defense_exp\":636758,\"dexterity_exp\":815767,\"agility_exp\":659745,\"charisma_exp\":186068,\"intelligence_exp\":0,\"hacking_mult\":1.6632000000000002,\"strength_mult\":4.13586,\"defense_mult\":2.2356,\"dexterity_mult\":3.5964,\"agility_mult\":2.5920000000000005,\"charisma_mult\":1.2,\"hacking_exp_mult\":1.5093750000000001,\"strength_exp_mult\":1.863,\"defense_exp_mult\":2.0493,\"dexterity_exp_mult\":2.25423,\"agility_exp_mult\":1.863,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1.05,\"hacking_speed_mult\":1.1332200000000003,\"hacking_money_mult\":1.25,\"hacking_grow_mult\":3,\"company_rep_mult\":1.75,\"faction_rep_mult\":1,\"crime_money_mult\":1.15,\"crime_success_mult\":1.1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1.265,\"bladeburner_success_chance_mult\":1.2972960000000004,\"augmentations\":[{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"Embedded Netburner Module Analyze Engine\",\"level\":1},{\"name\":\"Vangelis Virus 3.0\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"ECorp HVMind Implant\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Artificial Synaptic Potentiation\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":372,\"strength\":683,\"defense\":1619,\"dexterity\":438,\"agility\":420,\"charisma\":325,\"intelligence\":1,\"hp\":171,\"max_hp\":171,\"hacking_exp\":749394,\"strength_exp\":447888,\"defense_exp\":534006,\"dexterity_exp\":425196,\"agility_exp\":616404,\"charisma_exp\":415524,\"intelligence_exp\":0,\"hacking_mult\":1.6628198400000005,\"strength_mult\":3.2843999999999993,\"defense_mult\":7.586963999999999,\"dexterity_mult\":2.1252,\"agility_mult\":1.9319999999999997,\"charisma_mult\":1.584,\"hacking_exp_mult\":1.9440749999999998,\"strength_exp_mult\":1.3230000000000002,\"defense_exp_mult\":1.3230000000000002,\"dexterity_exp_mult\":1.3230000000000002,\"agility_exp_mult\":1.3230000000000002,\"charisma_exp_mult\":1.05,\"hacking_chance_mult\":1.05,\"hacking_speed_mult\":1.135575,\"hacking_money_mult\":1.4300000000000002,\"hacking_grow_mult\":1,\"company_rep_mult\":2.662000000000001,\"faction_rep_mult\":1.1,\"crime_money_mult\":1.1,\"crime_success_mult\":1.25,\"work_money_mult\":1.2,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.1448,\"augmentations\":[{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1},{\"name\":\"Neuregen Gene Modification\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"CRTX42-AA Gene Modification\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V2\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":377,\"strength\":537,\"defense\":905,\"dexterity\":211,\"agility\":368,\"charisma\":227,\"intelligence\":1,\"hp\":100,\"max_hp\":100,\"hacking_exp\":263424,\"strength_exp\":468636,\"defense_exp\":620144,\"dexterity_exp\":283416,\"agility_exp\":637980,\"charisma_exp\":590940,\"intelligence_exp\":0,\"hacking_mult\":1.9711794916800003,\"strength_mult\":2.568384,\"defense_mult\":4.153076928,\"dexterity_mult\":1.092,\"agility_mult\":1.6816800000000003,\"charisma_mult\":1.05,\"hacking_exp_mult\":1.9420500000000003,\"strength_exp_mult\":1.4520000000000002,\"defense_exp_mult\":1.4520000000000002,\"dexterity_exp_mult\":1.5972000000000004,\"agility_exp_mult\":1.4520000000000002,\"charisma_exp_mult\":1.2100000000000002,\"hacking_chance_mult\":1.1330000000000002,\"hacking_speed_mult\":1.1362239000000003,\"hacking_money_mult\":1.265,\"hacking_grow_mult\":1,\"company_rep_mult\":1.56,\"faction_rep_mult\":1.2,\"crime_money_mult\":1.625,\"crime_success_mult\":1.1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.45,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.1,\"bladeburner_success_chance_mult\":1.135472,\"augmentations\":[{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"Nanofiber Weave\",\"level\":1},{\"name\":\"LuminCloaking-V2 Skin Implant\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"Hacknet Node Core Direct-Neural Interface\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Graphene BranchiBlades Upgrade\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"The Blade's Simulacrum\",\"level\":1},{\"name\":\"NutriGen Implant\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":380,\"strength\":490,\"defense\":399,\"dexterity\":265,\"agility\":207,\"charisma\":226,\"intelligence\":1,\"hp\":49,\"max_hp\":49,\"hacking_exp\":509328,\"strength_exp\":505922,\"defense_exp\":325142,\"dexterity_exp\":472386,\"agility_exp\":314793,\"charisma_exp\":315972,\"intelligence_exp\":0,\"hacking_mult\":1.7947591200000006,\"strength_mult\":2.31725,\"defense_mult\":2.015,\"dexterity_mult\":1.265,\"agility_mult\":1.05,\"charisma_mult\":1.15,\"hacking_exp_mult\":1.58125,\"strength_exp_mult\":1.15,\"defense_exp_mult\":1.15,\"dexterity_exp_mult\":1.3224999999999998,\"agility_exp_mult\":1.15,\"charisma_exp_mult\":1.3224999999999998,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.1251926,\"hacking_money_mult\":1.5812499999999998,\"hacking_grow_mult\":1,\"company_rep_mult\":2.3,\"faction_rep_mult\":1.15,\"crime_money_mult\":1.375,\"crime_success_mult\":1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1.265,\"hacknet_node_purchase_cost_mult\":0.85,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"DataJack\",\"level\":1},{\"name\":\"Neotra\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":404,\"strength\":1155,\"defense\":3093,\"dexterity\":321,\"agility\":715,\"charisma\":213,\"intelligence\":1,\"hp\":319,\"max_hp\":319,\"hacking_exp\":542845,\"strength_exp\":159758,\"defense_exp\":554472,\"dexterity_exp\":620912,\"agility_exp\":593883,\"charisma_exp\":166402,\"intelligence_exp\":0,\"hacking_mult\":1.8900000000000001,\"strength_mult\":6.551885340000001,\"defense_mult\":14.414147748000003,\"dexterity_mult\":1.4742000000000002,\"agility_mult\":3.3022080000000003,\"charisma_mult\":1.2,\"hacking_exp_mult\":1.344,\"strength_exp_mult\":1.62,\"defense_exp_mult\":1.62,\"dexterity_exp_mult\":1.62,\"agility_exp_mult\":1.62,\"charisma_exp_mult\":1.2,\"hacking_chance_mult\":2.75,\"hacking_speed_mult\":2.1012,\"hacking_money_mult\":4,\"hacking_grow_mult\":1,\"company_rep_mult\":1.56,\"faction_rep_mult\":1.2,\"crime_money_mult\":1.15,\"crime_success_mult\":1.1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.03,\"augmentations\":[{\"name\":\"Neotra\",\"level\":1},{\"name\":\"BrachiBlades\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"CordiARC Fusion Reactor\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"NEMEAN Subdermal Weave\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Graphene Bone Lacings\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":412,\"strength\":783,\"defense\":762,\"dexterity\":431,\"agility\":347,\"charisma\":199,\"intelligence\":1,\"hp\":86,\"max_hp\":86,\"hacking_exp\":442656,\"strength_exp\":560860,\"defense_exp\":462956,\"dexterity_exp\":288028,\"agility_exp\":433144,\"charisma_exp\":250908,\"intelligence_exp\":0,\"hacking_mult\":1.9845000000000002,\"strength_mult\":3.6456000000000004,\"defense_mult\":3.6456000000000004,\"dexterity_mult\":2.2176,\"agility_mult\":1.6800000000000002,\"charisma_mult\":1.05,\"hacking_exp_mult\":1.7001600000000001,\"strength_exp_mult\":1.518,\"defense_exp_mult\":1.518,\"dexterity_exp_mult\":1.6698000000000002,\"agility_exp_mult\":1.518,\"charisma_exp_mult\":1.518,\"hacking_chance_mult\":2.75,\"hacking_speed_mult\":2.04,\"hacking_money_mult\":5,\"hacking_grow_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1.4300000000000002,\"crime_success_mult\":1.375,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.02,\"bladeburner_analysis_mult\":1.1,\"bladeburner_success_chance_mult\":1.092,\"augmentations\":[{\"name\":\"DataJack\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"level\":1},{\"name\":\"Graphene BranchiBlades Upgrade\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Neurotrainer III\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":430,\"strength\":262,\"defense\":391,\"dexterity\":258,\"agility\":575,\"charisma\":258,\"intelligence\":1,\"hp\":49,\"max_hp\":49,\"hacking_exp\":331357,\"strength_exp\":229188,\"defense_exp\":342646,\"dexterity_exp\":211367,\"agility_exp\":83496,\"charisma_exp\":139657,\"intelligence_exp\":0,\"hacking_mult\":2.1638610000000007,\"strength_mult\":1.4,\"defense_mult\":1.9599999999999997,\"dexterity_mult\":1.4,\"agility_mult\":3.6750000000000003,\"charisma_mult\":1.5,\"hacking_exp_mult\":1.35355,\"strength_exp_mult\":1.15,\"defense_exp_mult\":1.15,\"dexterity_exp_mult\":1.15,\"agility_exp_mult\":1.15,\"charisma_exp_mult\":1.7249999999999999,\"hacking_chance_mult\":2.70375,\"hacking_speed_mult\":2.2291630799999997,\"hacking_money_mult\":4.840000000000001,\"hacking_grow_mult\":1,\"company_rep_mult\":1.25,\"faction_rep_mult\":1.25,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"SmartJaw\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":431,\"strength\":534,\"defense\":630,\"dexterity\":483,\"agility\":473,\"charisma\":351,\"intelligence\":1,\"hp\":73,\"max_hp\":73,\"hacking_exp\":498298,\"strength_exp\":194180,\"defense_exp\":564436,\"dexterity_exp\":573050,\"agility_exp\":157534,\"charisma_exp\":705910,\"intelligence_exp\":0,\"hacking_mult\":2.04048,\"strength_mult\":2.9308481280000005,\"defense_mult\":2.9308481280000005,\"dexterity_mult\":2.2434048000000004,\"agility_mult\":2.6920857600000003,\"charisma_mult\":1.584,\"hacking_exp_mult\":1.15,\"strength_exp_mult\":1.15,\"defense_exp_mult\":1.15,\"dexterity_exp_mult\":1.265,\"agility_exp_mult\":1.15,\"charisma_exp_mult\":1.15,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1.0506,\"hacking_money_mult\":1.5812499999999998,\"hacking_grow_mult\":1.75,\"company_rep_mult\":1.1,\"faction_rep_mult\":1,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.09242,\"bladeburner_analysis_mult\":1.265,\"bladeburner_success_chance_mult\":1.1472552000000003,\"augmentations\":[{\"name\":\"HyperSight Corneal Implant\",\"level\":1},{\"name\":\"Xanipher\",\"level\":1},{\"name\":\"The Blade's Simulacrum\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Vangelis Virus\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"Neotra\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"level\":1},{\"name\":\"GOLEM Serum\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":438,\"strength\":352,\"defense\":305,\"dexterity\":252,\"agility\":253,\"charisma\":233,\"intelligence\":1,\"hp\":40,\"max_hp\":40,\"hacking_exp\":462642,\"strength_exp\":806262,\"defense_exp\":785678,\"dexterity_exp\":189572,\"agility_exp\":342790,\"charisma_exp\":383294,\"intelligence_exp\":0,\"hacking_mult\":2.0995114140000006,\"strength_mult\":1.5605499999999997,\"defense_mult\":1.3569999999999998,\"dexterity_mult\":1.388625,\"agility_mult\":1.267875,\"charisma_mult\":1.15,\"hacking_exp_mult\":1.388625,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.05,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1.2075,\"hacking_chance_mult\":1.1025,\"hacking_speed_mult\":1.1470410000000002,\"hacking_money_mult\":2.145,\"hacking_grow_mult\":1.75,\"company_rep_mult\":2.53,\"faction_rep_mult\":1.15,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1.32,\"hacknet_node_money_mult\":1.595,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":0.85,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.05,\"bladeburner_analysis_mult\":1.15,\"bladeburner_success_chance_mult\":1.1016000000000001,\"augmentations\":[{\"name\":\"Bionic Spine\",\"level\":1},{\"name\":\"PC Direct-Neural Interface NeuroNet Injector\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor: IPU Upgrade\",\"level\":1},{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V2\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"Neural Accelerator\",\"level\":1},{\"name\":\"Hacknet Node Core Direct-Neural Interface\",\"level\":1},{\"name\":\"BitWire\",\"level\":1},{\"name\":\"Blade's Runners\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":505,\"strength\":265,\"defense\":294,\"dexterity\":284,\"agility\":299,\"charisma\":196,\"intelligence\":1,\"hp\":39,\"max_hp\":39,\"hacking_exp\":204996,\"strength_exp\":87780,\"defense_exp\":155166,\"dexterity_exp\":127974,\"agility_exp\":170280,\"charisma_exp\":226380,\"intelligence_exp\":0,\"hacking_mult\":2.7470624999999997,\"strength_mult\":1.6800000000000002,\"defense_mult\":1.6800000000000002,\"dexterity_mult\":1.6800000000000002,\"agility_mult\":1.6800000000000002,\"charisma_mult\":1.05,\"hacking_exp_mult\":1.5125000000000002,\"strength_exp_mult\":1.1,\"defense_exp_mult\":1.1,\"dexterity_exp_mult\":1.1,\"agility_exp_mult\":1.1,\"charisma_exp_mult\":1.1,\"hacking_chance_mult\":3,\"hacking_speed_mult\":2.06,\"hacking_money_mult\":7,\"hacking_grow_mult\":1.75,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"augmentations\":[{\"name\":\"QLink\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Neural-Retention Enhancement\",\"level\":1},{\"name\":\"Neuronal Densification\",\"level\":1},{\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":508,\"strength\":377,\"defense\":377,\"dexterity\":487,\"agility\":1369,\"charisma\":263,\"intelligence\":1,\"hp\":47,\"max_hp\":47,\"hacking_exp\":493677,\"strength_exp\":580203,\"defense_exp\":579177,\"dexterity_exp\":556263,\"agility_exp\":302670,\"charisma_exp\":329688,\"intelligence_exp\":0,\"hacking_mult\":2.4079526100000006,\"strength_mult\":1.7472000000000003,\"defense_mult\":1.7472000000000003,\"dexterity_mult\":2.2713600000000005,\"agility_mult\":6.988800000000001,\"charisma_mult\":1.3282500000000002,\"hacking_exp_mult\":1.2100000000000002,\"strength_exp_mult\":1.1,\"defense_exp_mult\":1.1,\"dexterity_exp_mult\":1.1,\"agility_exp_mult\":1.1,\"charisma_exp_mult\":1.265,\"hacking_chance_mult\":2.625,\"hacking_speed_mult\":2.3811218640000003,\"hacking_money_mult\":4.8,\"hacking_grow_mult\":1.25,\"company_rep_mult\":2.2694099999999997,\"faction_rep_mult\":1.5869999999999997,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1.1,\"hacknet_node_money_mult\":1.4375,\"hacknet_node_purchase_cost_mult\":0.85,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1.0404,\"bladeburner_analysis_mult\":1.05,\"bladeburner_success_chance_mult\":1.0609,\"augmentations\":[{\"name\":\"Cranial Signal Processors - Gen IV\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Power Recirculation Core\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"PC Direct-Neural Interface\",\"level\":1},{\"name\":\"Bionic Legs\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen I\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"ADR-V2 Pheromone Gene\",\"level\":1},{\"name\":\"BLADE-51b Tesla Armor\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"Embedded Netburner Module Analyze Engine\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"Graphene Bionic Spine Upgrade\",\"level\":1},{\"name\":\"Augmented Targeting III\",\"level\":1},{\"name\":\"EMS-4 Recombination\",\"level\":1},{\"name\":\"TITN-41 Gene-Modification Injection\",\"level\":1},{\"name\":\"Graphene Bionic Legs Upgrade\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen II\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":566,\"strength\":1260,\"defense\":378,\"dexterity\":728,\"agility\":602,\"charisma\":206,\"intelligence\":1,\"hp\":47,\"max_hp\":47,\"hacking_exp\":791313,\"strength_exp\":221942,\"defense_exp\":365574,\"dexterity_exp\":952708,\"agility_exp\":899610,\"charisma_exp\":425548,\"intelligence_exp\":0,\"hacking_mult\":2.5116966,\"strength_mult\":6.758175059999999,\"defense_mult\":1.873368,\"dexterity_mult\":3.149996850000001,\"agility_mult\":2.6254935000000006,\"charisma_mult\":1,\"hacking_exp_mult\":1.5818880000000004,\"strength_exp_mult\":1.05,\"defense_exp_mult\":1.05,\"dexterity_exp_mult\":1.05,\"agility_exp_mult\":1.05,\"charisma_exp_mult\":1,\"hacking_chance_mult\":3.7389000000000006,\"hacking_speed_mult\":2.2724478000000006,\"hacking_money_mult\":6.16,\"hacking_grow_mult\":1,\"company_rep_mult\":1.265,\"faction_rep_mult\":1.265,\"crime_money_mult\":1.1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.15,\"hacknet_node_purchase_cost_mult\":0.85,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.1550000000000002,\"bladeburner_stamina_gain_mult\":1.05,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.04,\"augmentations\":[{\"name\":\"ORION-MKIV Shoulder\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"Graphene Bionic Arms Upgrade\",\"level\":1},{\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\",\"level\":1},{\"name\":\"Bionic Arms\",\"level\":1},{\"name\":\"Blade's Runners\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"LuminCloaking-V1 Skin Implant\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"ADR-V1 Pheromone Gene\",\"level\":1},{\"name\":\"Embedded Netburner Module Core Implant\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"Enhanced Myelin Sheathing\",\"level\":1},{\"name\":\"The Shadow's Simulacrum\",\"level\":1},{\"name\":\"Embedded Netburner Module\",\"level\":1},{\"name\":\"QLink\",\"level\":1},{\"name\":\"Combat Rib III\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Photosynthetic Cells\",\"level\":1},{\"name\":\"I.N.T.E.R.L.I.N.K.E.D\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":665,\"strength\":672,\"defense\":564,\"dexterity\":339,\"agility\":504,\"charisma\":291,\"intelligence\":1,\"hp\":66,\"max_hp\":66,\"hacking_exp\":716496,\"strength_exp\":584144,\"defense_exp\":745712,\"dexterity_exp\":208736,\"agility_exp\":665104,\"charisma_exp\":683936,\"intelligence_exp\":0,\"hacking_mult\":2.991265200000001,\"strength_mult\":3.1097196,\"defense_mult\":2.5238304,\"dexterity_mult\":1.8419108400000004,\"agility_mult\":2.2932882,\"charisma_mult\":1.32,\"hacking_exp_mult\":1.15,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"hacking_chance_mult\":2.625,\"hacking_speed_mult\":2.2285368000000005,\"hacking_money_mult\":7.8936,\"hacking_grow_mult\":1.25,\"company_rep_mult\":1.9250000000000003,\"faction_rep_mult\":1,\"crime_money_mult\":1,\"crime_success_mult\":1,\"work_money_mult\":1,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":0.9,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.1025,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.06,\"augmentations\":[{\"name\":\"Embedded Netburner Module Core V2 Upgrade\",\"level\":1},{\"name\":\"DermaForce Particle Barrier\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen III\",\"level\":1},{\"name\":\"Synfibril Muscle\",\"level\":1},{\"name\":\"The Black Hand\",\"level\":1},{\"name\":\"Blade's Runners\",\"level\":1},{\"name\":\"PC Direct-Neural Interface Optimization Submodule\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Hyperion Plasma Cannon V1\",\"level\":1},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen IV\",\"level\":1},{\"name\":\"Synthetic Heart\",\"level\":1},{\"name\":\"nextSENS Gene Modification\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"HemoRecirculator\",\"level\":1},{\"name\":\"GOLEM Serum\",\"level\":1},{\"name\":\"QLink\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}},{\"ctor\":\"Resleeve\",\"data\":{\"hacking_skill\":666,\"strength\":192,\"defense\":213,\"dexterity\":254,\"agility\":190,\"charisma\":216,\"intelligence\":1,\"hp\":31,\"max_hp\":31,\"hacking_exp\":515304,\"strength_exp\":270776,\"defense_exp\":541416,\"dexterity_exp\":345304,\"agility_exp\":187136,\"charisma_exp\":585616,\"intelligence_exp\":0,\"hacking_mult\":3.1394999999999995,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1.2705000000000002,\"agility_mult\":1.05,\"charisma_mult\":1,\"hacking_exp_mult\":2.0286000000000004,\"strength_exp_mult\":1.2075,\"defense_exp_mult\":1.2075,\"dexterity_exp_mult\":1.3886249999999998,\"agility_exp_mult\":1.2075,\"charisma_exp_mult\":1.2075,\"hacking_chance_mult\":3.0250000000000004,\"hacking_speed_mult\":2.1420000000000003,\"hacking_money_mult\":5,\"hacking_grow_mult\":1.75,\"company_rep_mult\":1.265,\"faction_rep_mult\":1.15,\"crime_money_mult\":1.375,\"crime_success_mult\":1.25,\"work_money_mult\":1.32,\"hacknet_node_money_mult\":1.1,\"hacknet_node_purchase_cost_mult\":0.9,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"bladeburner_max_stamina_mult\":1.05,\"bladeburner_stamina_gain_mult\":1.05,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1.03,\"augmentations\":[{\"name\":\"QLink\",\"level\":1},{\"name\":\"BitRunners Neurolink\",\"level\":1},{\"name\":\"SmartSonar Implant\",\"level\":1},{\"name\":\"Blade's Runners\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Social Negotiation Assistant (S.N.A)\",\"level\":1},{\"name\":\"INFRARET Enhancement\",\"level\":1},{\"name\":\"OmniTek InfoLoad\",\"level\":1},{\"name\":\"Neurotrainer II\",\"level\":1},{\"name\":\"FocusWire\",\"level\":1},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"EsperTech Bladeburner Eyewear\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"Cranial Signal Processors - Gen V\",\"level\":1}],\"queuedAugmentations\":[],\"city\":\"Sector-12\"}}],\"sleevesFromCovenant\":5,\"bitNodeN\":12,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1564820593932,\"totalPlaytime\":27701347600,\"playtimeSinceLastAug\":46830400,\"playtimeSinceLastBitnode\":46830400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":32844255.00346056,\"gang\":0,\"hacking\":159264161,\"hacknetnode\":982000000,\"hospitalization\":-14500000,\"infiltration\":15859284.89042676,\"stock\":0,\"total\":1175467700.893886,\"work\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":32844255.00346056,\"gang\":0,\"hacking\":159264161,\"hacknetnode\":982000000,\"hospitalization\":-14500000,\"infiltration\":15859284.89042676,\"stock\":0,\"total\":1175467700.893886,\"work\":0}},\"scriptProdSinceLastAug\":159264161,\"total_money\":\"19253931177649772.443\",\"lifetime_money\":\"19253931177649772.443\",\"totalHacknetNodeProduction\":4351.398643343722,\"firstJobRecvd\":true,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Field Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"10.6.1.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"10.6.1.0\",\"isConnectedTo\":true,\"maxRam\":128,\"messages\":[\"hackers-starting-handbook.lit\",{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}}],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"fl1ght.exe\",\"DeepscanV2.exe\",\"HTTPWorm.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of the agency manager is simply to join factions when they become available.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const desiredFactions = [\\\"Sector-12\\\", \\\"Netburners\\\", \\\"CyberSec\\\", \\\"NiteSec\\\", \\\"The Black Hand\\\", \\\"BitRunners\\\", \\\"Daedalus\\\"];\\r\\n    var allFactionsJoined = false;\\r\\n    while (!allFactionsJoined) {\\r\\n        var invites = ns.checkFactionInvitations();\\r\\n        for(var i in invites) {\\r\\n            ns.joinFaction(invites[i])\\r\\n        }\\r\\n        // check if we're already a member of all the factions we want to be in\\r\\n        var factionsJoinedCheck = true;\\r\\n        var info = ns.getCharacterInformation();\\r\\n        var alreadyInFactions = info.factions;\\r\\n        for(var d in desiredFactions) {\\r\\n            if (!alreadyInFactions.includes(d)) {\\r\\n                factionsJoinedCheck = false;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        if (factionsJoinedCheck) {\\r\\n            allFactionsJoined = true;\\r\\n        }\\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\",\"filename\":\"agency-manager.ns\",\"module\":\"\",\"dependencies\":[\"agency-manager.ns\"],\"ramUsage\":8.1,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":37}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const neuroFlux = \\\"NeuroFlux Governor\\\";\\r\\n    var desiredFactions = getDesiredFactions(ns);\\r\\n    var currentFaction = \\\"\\\";\\r\\n    while (true) {\\r\\n        var info = ns.getCharacterInformation();\\r\\n        var factions = info.factions;\\r\\n        if (factions.length === 0) {\\r\\n            await ns.sleep(5000);\\r\\n            continue;\\r\\n        }\\r\\n            \\r\\n        // loop over all our desirable factions\\r\\n        for(var d in desiredFactions) {\\r\\n            var faction = desiredFactions[d];\\r\\n            if (ns.isBusy()) {\\r\\n                continue;\\r\\n            }\\r\\n            // if we're a member of this faction\\r\\n            if (factions.includes(faction.name)) {\\r\\n                var hasAllFactionAugs = true;\\r\\n                var augsAlreadyInstalled = true;\\r\\n                var factionAugs = ns.getAugmentationsFromFaction(faction.name);\\r\\n                // we're at a place with this faction where we need to just donate.\\r\\n                // we do this if we're missing augs or not. It's much faster to just hit 150 favor and donate.\\r\\n                if (ns.getFactionFavor(faction.name) + ns.getFactionFavorGain(faction.name) >= 150 && ns.getFactionFavor(faction.name) < 150) {\\r\\n                    while (ns.getAugmentationCost(neuroFlux)[1] <= ns.getServerMoneyAvailable(\\\"home\\\") && ns.getAugmentationCost(neuroFlux)[0] <= ns.getFactionRep(faction.name)) {\\r\\n                        ns.purchaseAugmentation(faction.name, neuroFlux);\\r\\n                        ns.tprint(\\\"Purchasing aug from \\\" + faction.name + \\\": \\\" + neuroFlux);\\r\\n                        await ns.sleep(100);\\r\\n                    }\\r\\n                    if (ns.getOwnedAugmentations(true).length > ns.getOwnedAugmentations(false).length) {\\r\\n                        ns.installAugmentations(\\\"daemon.ns\\\");\\r\\n                    }   \\r\\n                }\\r\\n                \\r\\n                // and we don't own all of the augmentations already\\r\\n                for (var a in factionAugs) {\\r\\n                    var aug = factionAugs[a];\\r\\n                    // skip neuroflux, we don't want to work too hard for it.\\r\\n                    if (aug === neuroFlux) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    if (!ns.getOwnedAugmentations(true).includes(aug)) {\\r\\n                        hasAllFactionAugs = false;\\r\\n                        var augCost = ns.getAugmentationCost(aug);\\r\\n                        var repCost = augCost[0];\\r\\n                        var cashCost = augCost[1];\\r\\n                        if (repCost <= ns.getFactionRep(faction.name)) {\\r\\n                            if (cashCost <= ns.getServerMoneyAvailable(\\\"home\\\")) {\\r\\n                                ns.purchaseAugmentation(faction.name, aug);\\r\\n                                ns.tprint(\\\"Purchasing aug from \\\" + faction.name + \\\": \\\" + aug);\\r\\n                            }\\r\\n                        } else {\\r\\n                            // we don't have enough rep for this faction so let's work until we do.\\r\\n                            // we skip this if our favor is high enough to donate.\\r\\n                            while (ns.getFactionRep(faction.name) < repCost && ns.getFactionFavor(faction.name) < 150) {\\r\\n                                ns.workForFaction(faction.name, \\\"hacking\\\");\\r\\n                                await ns.sleep(30000);\\r\\n                            }\\r\\n                            ns.stopAction();\\r\\n                        }\\r\\n                    } else {\\r\\n                        augsAlreadyInstalled = false;\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                // we have all the augs but they're not installed yet\\r\\n                if (hasAllFactionAugs && !augsAlreadyInstalled) {\\r\\n                    while (ns.getAugmentationCost(neuroFlux)[1] <= ns.getServerMoneyAvailable(\\\"home\\\") && ns.getAugmentationCost(neuroFlux)[0] <= ns.getFactionRep(faction.name)) {\\r\\n                        ns.purchaseAugmentation(faction.name, neuroFlux);\\r\\n                        ns.tprint(\\\"Purchasing aug from \\\" + faction.name + \\\": \\\" + neuroFlux);\\r\\n                        await ns.sleep(100);\\r\\n                    }\\r\\n                    if (ns.getOwnedAugmentations(true).length > ns.getOwnedAugmentations(false).length) {\\r\\n                        ns.installAugmentations(\\\"daemon.ns\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getDesiredFactions(ns) {\\r\\n    var factionList = [\\r\\n        {name:\\\"Sector-12\\\"}, \\r\\n        {name:\\\"Netburners\\\"}, \\r\\n        {name:\\\"CyberSec\\\"}, \\r\\n        {name:\\\"NiteSec\\\"}, \\r\\n        {name:\\\"The Black Hand\\\"}, \\r\\n        {name:\\\"BitRunners\\\"}, \\r\\n        {name:\\\"Daedalus\\\"}\\r\\n    ];\\r\\n    return factionList;\\r\\n}\",\"filename\":\"aug-manager.ns\",\"module\":\"\",\"dependencies\":[\"aug-manager.ns\"],\"ramUsage\":34.45,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":38}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of cascade kill is to kill all scripts running on any server in the game\\r\\n// but saving the host that you run it on for last (so that it doesn't kill itself prematurely)\\r\\n\\r\\nexport async function main(ns) {\\r\\n    var startingNode = ns.getHostname();\\r\\n    \\r\\n    var hostsToScan = [];\\r\\n    hostsToScan.push(startingNode);\\r\\n    var serverList = [];\\r\\n    \\r\\n    // assemble a server list.\\r\\n    while (hostsToScan.length > 0) {\\r\\n        var hostName = hostsToScan.pop();\\r\\n        if (!serverList.includes(hostName)) {\\r\\n            var connectedHosts = ns.scan(hostName);\\r\\n            for (var i = 0; i < connectedHosts.length; i++) {\\r\\n                hostsToScan.push(connectedHosts[i]);\\r\\n            }\\r\\n            serverList.push(hostName);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    for (var s = 0; s < serverList.length; s++) {\\r\\n        // skip if this host, we save it for last\\r\\n        if (serverList[s] == startingNode)\\r\\n            continue;\\r\\n            \\r\\n        // skip if not running anything\\r\\n        if (ns.ps(serverList[s]) === 0)\\r\\n            continue;\\r\\n            \\r\\n        // kill all scripts\\r\\n        ns.killall(serverList[s]);\\r\\n    }\\r\\n    \\r\\n    // idle for things to die\\r\\n    for (var x = 0; x < serverList.length; x++) {\\r\\n        // skip if this host, we save it for last\\r\\n        if (serverList[x] == startingNode)\\r\\n            continue;\\r\\n        // idle until they're dead, this is to avoid killing the cascade before it's finished.\\r\\n        while (ns.ps(serverList[x]) > 0) {\\r\\n            await ns.sleep(20);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // wait to kill these. This kills itself, obviously.\\r\\n    ns.killall(startingNode);\\r\\n}\",\"filename\":\"cascade-kill.ns\",\"module\":{},\"dependencies\":[\"cascade-kill.ns\"],\"ramUsage\":2.55,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":39}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of the daemon is: it's our global starting point.\\n// it handles several aspects of the game, primarily hacking for money.\\n// since it requires a robust \\\"execute arbitrarily\\\" functionality\\n// it serves as the launching point for all the helper scripts we need.\\n// this list has been steadily growing as time passes.\\n\\n/*jshint loopfunc:true */\\n\\n// --- CONSTANTS ---\\n// track how costly (in security) a growth/hacking thread is.\\nconst growthThreadHardening = 0.004;\\nconst hackThreadHardening = 0.002;\\n\\n// initial potency of weaken threads before multipliers\\nconst weakenThreadPotency = 0.05;\\n\\n// unadjusted server growth rate, this is way more than what you actually get\\nconst unadjustedGrowthRate = 1.03;\\n\\n// max server growth rate, growth rates higher than this are throttled.\\nconst maxGrowthRate = 1.0035;\\n\\n// the number of milliseconds to delay the grow execution after theft, for timing reasons\\n// the delay between each step should be *close* 1/4th of this number, but there is some imprecision\\nconst arbitraryExecutionDelay = 12000;\\n\\n// the delay that it can take for a script to start, used to pessimistically schedule things in advance\\nconst queueDelay = 12000;\\n\\n// the max number of batches this daemon will spool up to avoid running out of IRL ram\\nconst maxBatches = 60;\\n\\n// the max number of targets this daemon will run workers against to avoid running out of IRL ram\\nconst maxTargets = 5;\\n\\n// some ancillary scripts that run asynchronously, we utilize the startup/execute capabilities of this daemon to run when able\\nvar asynchronousHelpers = [];\\n\\n// --- VARS ---\\n// in debug mode, the targeting loop will always go for foodnstuff, the saddest little server\\nvar isDebugMode = false;\\n\\n// the server to use if we're in debug mode\\nvar debugServer = \\\"omega-net\\\";\\n\\n// complex arrays of servers with relevant properties, one is sorted for ram available, the other is for money\\nvar serverListRam = [];\\nvar serverListMoney = [];\\n\\n// simple name array of servers that have been added\\nvar addedServers = [];\\n\\n// the port cracking array, we use this to do some things\\nvar portCrackers = [];\\n\\n// toolkit var for remembering the names and costs of the scripts we use the most\\nvar tools = [];\\n\\n// the name of the host of this daemon, so we don't have to call the function more than once.\\nvar daemonHost = null;\\n\\n// multipliers for player abilities\\nvar mults = null;\\nvar playerHackingMoneyMult = null;\\nvar playerHackingGrowMult = null;\\n\\n// bitnode multipliers that can be automatically set by SF-5\\nvar bitnodeMults = null;\\nvar bitnodeHackingMoneyMult = null;\\nvar bitnodeGrowMult = null;\\nvar bitnodeWeakenMult = null;\\n\\n// script entry point\\nexport async function main(ns) {\\n    // reset a bunch of stuff, hoping this fixes reset issues.\\n    serverListRam = [];\\n    serverListMoney = [];\\n    addedServers = [];\\n    portCrackers = [];\\n    tools = [];\\n\\n    // some ancillary scripts that run asynchronously, we utilize the startup/execute capabilities of this daemon to run when able\\n     asynchronousHelpers = [\\n        {name: \\\"host-manager.ns\\\", shortName: \\\"host\\\", isLaunched: false},\\n        {name: \\\"node-manager.ns\\\", shortName: \\\"node\\\", isLaunched: false},\\n        {name: \\\"tor-manager.ns\\\", shortName: \\\"tor\\\", isLaunched: false},\\n        {name: \\\"program-manager.ns\\\", shortName: \\\"prog\\\", isLaunched: false},\\n        {name: \\\"ram-manager.ns\\\", shortName: \\\"ram\\\", isLaunched: false},\\n        //{name: \\\"agency-manager.ns\\\", shortName: \\\"agent\\\", isLaunched: false},\\n        //{name: \\\"aug-manager.ns\\\", shortName: \\\"aug\\\", isLaunched: false},\\n    ];\\n    \\n    // get the name of this node\\n    daemonHost = ns.getHostname();\\n    \\n    // create the exhaustive server list\\n    await buildServerList(ns);\\n    \\n    // build port cracking array\\n    buildPortCrackingArray(ns);\\n    \\n    // build toolkit\\n    buildToolkit(ns);\\n    \\n    // figure out the various bitnode and player multipliers\\n    establishMultipliers(ns);\\n    \\n    // the actual worker processes live here\\n    await doTargetingLoop(ns);\\n}\\n\\n// actual multipliers are expressed as functions\\nfunction actualGrowthMultiplier() { \\n    return playerHackingGrowMult * bitnodeGrowMult; \\n}\\n\\nfunction actualHackMultiplier() { \\n    return playerHackingMoneyMult * bitnodeHackingMoneyMult; \\n}\\n\\nfunction actualWeakenPotency() { \\n    return bitnodeWeakenMult * weakenThreadPotency;\\n}\\n\\nfunction isAnyServerRunning(scriptName) {\\n    for (var s = 0; s < serverListRam.length; s++) {\\n        var server = serverListRam[s];\\n        if (server.hasRunningScript(scriptName)) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nfunction whichServerIsRunning(scriptName) {\\n    for (var s = 0; s < serverListRam.length; s++) {\\n        var server = serverListRam[s];\\n        if (server.hasRunningScript(scriptName)) {\\n            return server.name;\\n        }\\n    }\\n    return \\\"\\\";\\n}\\n\\nasync function runStartupScripts(ns) {\\n    var isEverythingAlreadyRunning = false;\\n    for (var h = 0; h < asynchronousHelpers.length; h++) {\\n        var helper = asynchronousHelpers[h];\\n        if (helper.isLaunched)\\n            continue;\\n        var scriptName = helper.name;\\n        if (isAnyServerRunning(scriptName)) {\\n            helper.isLaunched = true;\\n            continue;\\n        } else {\\n            var tool = getTool(helper.shortName);\\n            helper.isLaunched = await arbitraryExecution(ns, tool, 1, []);\\n            if (helper.isLaunched) {\\n                ns.print(\\\"Server \\\" + whichServerIsRunning(scriptName) + \\\" running \\\" + scriptName);\\n            }\\n        }\\n    }\\n    // if every helper is launched already return \\\"true\\\" so we can skip doing this each cycle going forward.\\n    for (var c = 0; c < asynchronousHelpers.length; c++) {\\n        if (!asynchronousHelpers[c].isLaunched) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\nasync function doTargetingLoop(ns) {\\n    var isHelperListLaunched = false;\\n    while (true) {\\n        // sort the array so that already weakened servers have a high priority\\n        // while still taking their value into account\\n        sortServerList(\\\"money\\\");\\n        \\n        // purchase as many servers with 1 TB as affordable, for extra umph.\\n        // I do this first for no real reason.\\n        detectChangesInDaemonHosts(ns);\\n        \\n        // run some auxilliary processes that ease the ram burden of this daemon\\n        // and add additional functionality (like managing hacknet or buying servers)\\n        if (!isHelperListLaunched) {            \\n            isHelperListLaunched = await runStartupScripts(ns);\\n        }\\n        \\n        var currentTargets = 0;\\n        // check for servers that need to be rooted\\n        // simultaneously compare our current target to potential targets     \\n        for (var i = 0; i < serverListMoney.length; i++) {\\n            var server = serverListMoney[i];\\n            // check if we have root\\n            if (!server.hasRoot()) {\\n                // if we don't, and we can, get it.\\n                if (server.canCrack()) {\\n                    doRoot(server);\\n                }\\n            }    \\n            // assume perhaps we just succeeded root\\n            if (currentTargets < maxTargets && server.hasRoot() && server.canHack() && server.shouldHack()) {\\n                // now don't do anything to it until prep finishes, because it is in a resting state.\\n                if (server.isPrepping())\\n                    continue;\\n                    \\n                // increment the target counter, consider this an optimal target\\n                currentTargets++;\\n                \\n                // if the target is in a resting state (we have scripts running against it), proceed to the next target.\\n                if (server.isTargeting())\\n                    continue;\\n                    \\n                // perform weakening and initial growth until the server is \\\"perfected\\\"\\n                await prepServer(ns, server);\\n                \\n                // the server isn't optimized, this means we're out of ram from a more optimal target, fuck off\\n                if (server.security() > server.minSecurity || server.money() < server.maxMoney)\\n                    continue;\\n                \\n                // now don't do anything to it until prep finishes, because it is in a resting state.\\n                if (server.isPrepping())\\n                    continue;\\n                \\n                // adjust the percentage to steal until it's able to rapid fire as many as it can\\n                await optimizePerformanceMetrics(ns, server);\\n                \\n                // once conditions are optimal, fire barrage after barrage of cycles in a schedule\\n                await performScheduling(ns, server);\\n            }   \\n        }          \\n        \\n        await ns.sleep(1000);\\n    }\\n}\\n\\nfunction establishMultipliers(ns) {\\n    // uncomment this at SF-5 to handle your bitnode multipliers for you\\n    // bitnodeMults = ns.getBitNodeMultipliers();\\n    \\n    // prior to SF-5, bitnodeMults stays null and these mults are set to 1.\\n    var isBitnodeMultsNull = bitnodeMults === null;\\n    \\n    // various bitnode mult setters:\\n    bitnodeHackingMoneyMult = isBitnodeMultsNull ? 1 : mults.ScriptHackMoney; //applying the multiplier directly to the player mult\\n    bitnodeGrowMult = isBitnodeMultsNull ? 1 : mults.ServerGrowthRate;\\n    bitnodeWeakenMult = isBitnodeMultsNull ? 1 : mults.ServerWeakenRate;\\n    \\n    // then do player multipliers:\\n    mults = ns.getHackingMultipliers();\\n    \\n    // multiplier for hacking yields, factors into how many theft threads are needed.\\n    playerHackingMoneyMult = mults.money;\\n    \\n    // growth multiplier, factors into how many growth threads are needed.\\n    playerHackingGrowMult = mults.growth;\\n}\\n\\nfunction buildToolkit(ns) {\\n    var toolNames = [\\\"weak-target.ns\\\", \\\"grow-target.ns\\\", \\\"hack-target.ns\\\", \\\"host-manager.ns\\\", \\\"node-manager.ns\\\", \\\"tor-manager.ns\\\", \\\"program-manager.ns\\\", \\\"ram-manager.ns\\\", \\\"agency-manager.ns\\\", \\\"aug-manager.ns\\\"];\\n    for (var i = 0; i < toolNames.length; i++) {\\n        var tool = {\\n            instance: ns,\\n            name: toolNames[i],\\n            cost: ns.getScriptRam(toolNames[i], daemonHost),\\n            // I like short names. \\n            shortName: function() {\\n                switch (this.name) {\\n                    case \\\"weak-target.ns\\\":\\n                        return \\\"weak\\\";\\n                    case \\\"grow-target.ns\\\":\\n                        return \\\"grow\\\";\\n                    case \\\"hack-target.ns\\\":\\n                        return \\\"hack\\\";\\n                    case \\\"host-manager.ns\\\":\\n                        return \\\"host\\\";\\n                    case \\\"node-manager.ns\\\":\\n                        return \\\"node\\\";\\n                    case \\\"tor-manager.ns\\\":\\n                        return \\\"tor\\\";\\n                    case \\\"program-manager.ns\\\":\\n                        return \\\"prog\\\";\\n                    case \\\"ram-manager.ns\\\":\\n                        return \\\"ram\\\";\\n                    case \\\"agency-manager.ns\\\":\\n                        return \\\"agent\\\";\\n                    case \\\"aug-manager.ns\\\":\\n                        return \\\"aug\\\";\\n                }\\n            },       \\n            canRun: function(server) {\\n                return doesServerHaveFile(this.instance, this.name, server.name) && server.ramAvailable() >= this.cost;\\n            },\\n            isThreadSpreadingAllowed: function() { return this.shortName() === \\\"weak\\\"; },\\n            getMaxThreads: function() {                \\n                // analyzes the daemon servers array and figures about how many threads can be spooled up across all of them.\\n                var maxThreads = 0;\\n                sortServerList(\\\"ram\\\");\\n                for (var i = 0; i < serverListRam.length; i++) {                    \\n                    var daemonServer = serverListRam[i];\\n                    // you don't count lol\\n                    if (!daemonServer.hasRoot())\\n                        continue;\\n                    var threadsHere = Math.floor(daemonServer.ramAvailable() / this.cost);\\n                    if (!this.isThreadSpreadingAllowed())\\n                        return threadsHere;\\n                    maxThreads += threadsHere;\\n                }\\n                return maxThreads;\\n            }\\n        }\\n        tools.push(tool);\\n    }\\n}\\n\\nfunction doesServerHaveFile(ns, fileName, serverName) {\\n    return ns.fileExists(fileName, serverName);\\n}\\n\\n// assemble a list of port crackers and abstract their functionality\\nfunction buildPortCrackingArray(ns) {\\n    var crackNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\"];\\n    for (var i = 0; i < crackNames.length; i++) {\\n        var cracker = buildPortCrackerObject(ns, crackNames[i]);\\n        portCrackers.push(cracker);\\n    }\\n}\\n\\nfunction buildPortCrackerObject(ns, crackName) {\\n    var crack = {\\n        instance: ns,\\n        name: crackName,\\n        exists: function() { return this.instance.fileExists(crackName, \\\"home\\\"); },\\n        runAt: function(target) {\\n            switch(this.name) {\\n                case \\\"BruteSSH.exe\\\":\\n                    this.instance.brutessh(target);\\n                    break;\\n                case \\\"FTPCrack.exe\\\":\\n                    this.instance.ftpcrack(target);\\n                    break;\\n                case \\\"relaySMTP.exe\\\":\\n                    this.instance.relaysmtp(target);\\n                    break;\\n                case \\\"HTTPWorm.exe\\\":\\n                    this.instance.httpworm(target);\\n                    break;\\n                case \\\"SQLInject.exe\\\":\\n                    this.instance.sqlinject(target);\\n                    break;\\n            } \\n        },\\n        // I made this a function of the crackers out of laziness.\\n        doNuke: function(target) {\\n            this.instance.nuke(target);\\n        }\\n    }\\n    return crack;\\n}\\n\\nfunction doRoot(server) {\\n    var portsCracked = 0;\\n    var portsNeeded = server.portsRequired;\\n    for (var i = 0; i < portCrackers.length; i++) {\\n        var cracker = portCrackers[i];\\n        if (cracker.exists()) {\\n            cracker.runAt(server.name);\\n            portsCracked++;\\n        }\\n        if (portsCracked >= portsNeeded) {\\n            cracker.doNuke(server.name);\\n            break;\\n        }\\n    }\\n}\\n\\nfunction detectChangesInDaemonHosts(ns) {\\n    var purchasedServers = ns.getPurchasedServers();\\n    for(var p = 0; p < purchasedServers.length; p++) {\\n        var hostName = purchasedServers[p];\\n        if (addedServers.includes(hostName))\\n            continue;\\n        addServer(buildServerObject(ns, hostName));       \\n    }\\n}\\n\\nfunction sortServerList(o) {\\n    switch (o) {\\n        case \\\"ram\\\":\\n            serverListRam.sort(function (a, b) { return b.ramAvailable() - a.ramAvailable(); });\\n            break;\\n        case \\\"money\\\":\\n            serverListMoney.sort(function (a, b) { return b.sortValue() - a.sortValue(); });\\n            break;\\n    }\\n}\\n\\n// return the adjustment quantity based on current performance metrics\\n// -1 adjusts down, 1 adjusts up, 0 means don't do anything.\\nfunction analyzeSnapshot(snapshot, currentTarget) {\\n    // always overshoot the target. this is the priority.\\n    if (snapshot.maxCompleteCycles() < snapshot.optimalPacedCycles && currentTarget.percentageToSteal > 0.01) {\\n        return -0.01;\\n    } else if (snapshot.maxCompleteCycles() > snapshot.optimalPacedCycles && currentTarget.percentageToSteal < 0.98) {\\n        // if we're already overshooting the target, check that an adjustment\\n        // doesn't *undershoot* it, because that's bad. we don't want that.\\n        currentTarget.percentageToSteal += 0.01;\\n        var comparisonSnapshot = getPerformanceSnapshot(currentTarget);\\n        currentTarget.percentageToSteal -= 0.01;\\n        if (comparisonSnapshot.maxCompleteCycles() < comparisonSnapshot.optimalPacedCycles) {\\n            return 0.00;\\n        } else {\\n            return 0.01;\\n        }\\n    }\\n    return 0.00;\\n}\\n\\n// return a performance snapshot to compare against optimal, or another snapshot\\nfunction getPerformanceSnapshot(currentTarget) {\\n    var snapshot = {\\n        optimalBatchCost: getOptimalBatchCost(currentTarget),\\n        maxCompleteCycles: function() {\\n            // total number of cycles is the max you can fit inside any single daemon host, summed\\n            var maxCycles = 0;\\n            // we have to sort by available ram any time we're trying to execute.. because it changes.\\n            sortServerList(\\\"ram\\\");            \\n            for (var i = 0; i < serverListRam.length; i++) {\\n                var daemonServer = serverListRam[i];\\n                maxCycles += Math.floor(daemonServer.ramAvailable() / this.optimalBatchCost);\\n            }\\n            return maxCycles;\\n        },\\n        optimalPacedCycles: Math.min(maxBatches, Math.max(1, Math.floor((currentTarget.timeToWeaken() * 1000 - queueDelay) / arbitraryExecutionDelay)))\\n    };\\n    return snapshot;\\n}\\n\\nasync function optimizePerformanceMetrics(ns, currentTarget) {\\n    var isOptimal = false;\\n    var hasChanged = false;\\n    while (!isOptimal) {\\n        var snapshot = getPerformanceSnapshot(currentTarget);\\n        var adjustment = analyzeSnapshot(snapshot, currentTarget);\\n        if (adjustment === 0.00) {\\n            isOptimal = true;\\n        } else {\\n            hasChanged = true;\\n            currentTarget.percentageToSteal += adjustment;\\n        }\\n        await ns.sleep(10);\\n    }\\n    if (hasChanged) {        \\n        ns.print(\\\"Tuning optimum threading on \\\" + currentTarget.name + \\\", percentage: \\\" + (Math.floor(currentTarget.actualPercentageToSteal() * 10000) / 100));\\n    }\\n}\\n\\nfunction getOptimalBatchCost(currentTarget) {\\n    var weakenTool = getTool(\\\"weak\\\");\\n    var growTool = getTool(\\\"grow\\\");\\n    var hackTool = getTool(\\\"hack\\\");\\n    var weakenCost =  currentTarget.weakenThreadTotalPerCycle() * weakenTool.cost;\\n    var growCost = currentTarget.growThreadsNeededAfterTheft() * growTool.cost;\\n    var hackCost = currentTarget.hackThreadsNeeded() * hackTool.cost;\\n    var totalCost = weakenCost + growCost + hackCost;\\n    return totalCost;\\n}\\n\\nasync function performScheduling(ns, currentTarget) {    \\n    var firstEnding = null;    \\n    var lastStart = null;\\n    var scheduledTasks = [];\\n    var canSchedule = scheduledTasks.length === 0;\\n    if (!canSchedule)\\n        return;\\n    var snapshot = getPerformanceSnapshot(currentTarget);\\n    var maxCycles = Math.min(snapshot.optimalPacedCycles, snapshot.maxCompleteCycles());\\n    var cyclesScheduled = 0;\\n    var now = new Date(Date.now() + queueDelay);        \\n    var lastBatch = 0;\\n    \\n    ns.print(\\\"Scheduling \\\" + currentTarget.name + \\\", batches: \\\" + maxCycles + \\\" - anticipating an estimated \\\" + Math.floor(currentTarget.timeToWeaken() * 2) + \\\" second delay.\\\");\\n    while (canSchedule) {        \\n        var newBatchStart = (scheduledTasks.length === 0) ? now : new Date(lastBatch.getTime() + arbitraryExecutionDelay);\\n        lastBatch = new Date(newBatchStart.getTime());\\n        var newBatch = getScheduleTiming(ns, newBatchStart, currentTarget, scheduledTasks.length);      \\n        if (firstEnding === null) {            \\n            firstEnding = new Date(newBatch.hackEnd.valueOf());\\n        }        \\n        if (lastStart === null || lastStart < newBatch.firstFire) {\\n            lastStart = new Date(newBatch.firstFire.valueOf());\\n        }        \\n        if (lastStart >= firstEnding) {\\n            canSchedule = false;\\n        }        \\n        if (!canSchedule)\\n            break;\\n        scheduledTasks.push(newBatch);\\n        cyclesScheduled++;\\n        if (cyclesScheduled >= maxCycles)\\n            break;\\n        await ns.sleep(10);\\n    }\\n    for (var i = 0; i < scheduledTasks.length; i++) {\\n        var schedObj = scheduledTasks[i];\\n        for (var s = 0; s < schedObj.scheduleItems.length; s++) {\\n            var schedItem = schedObj.scheduleItems[s];\\n            if (!schedItem.itemRunning) {              \\n                schedItem.itemRunning = true;\\n                var tool = getTool(schedItem.toolShortName);\\n                var threads = schedItem.threadsNeeded;\\n                var discriminationArg = schedObj.batchNumber.toString() + \\\"-\\\" + s.toString();\\n                var executionTime = 0;\\n                switch (schedItem.toolShortName) {\\n                    case \\\"hack\\\":\\n                        executionTime = currentTarget.timeToHack() * 1000;\\n                        break;\\n                    case \\\"grow\\\":\\n                        executionTime = currentTarget.timeToGrow() * 1000;\\n                        break;\\n                    case \\\"weak\\\":\\n                        executionTime = currentTarget.timeToWeaken() * 1000;\\n                        break;\\n                }\\n                await arbitraryExecution(ns, tool, threads, [currentTarget.name, schedItem.start.getTime(), schedItem.end.getTime(), executionTime, discriminationArg]);\\n            }\\n        }\\n    }\\n}\\n\\n// returns an object that contains all 4 timed events start and end times as dates\\nfunction getScheduleTiming(ns, fromDate, currentTarget, batchNumber) {\\n    // spacing interval used to pace our script resolution\\n    var delayInterval = arbitraryExecutionDelay / 4;\\n    \\n    // first to fire\\n    var hackTime = currentTarget.timeToHack() * 1000;\\n    \\n    // second to fire\\n    var weakenTime = currentTarget.timeToWeaken() * 1000;\\n    \\n    // third to fire\\n    var growTime = currentTarget.timeToGrow() * 1000;\\n    \\n    // fourth to fire, we apply the interval here\\n    var weakenSecondTime = currentTarget.timeToWeaken() * 1000 + delayInterval * 3;\\n    \\n    // first, assume we're executing all these scripts pretty much instantly\\n    var time = new Date(fromDate.valueOf());\\n    \\n    // next, take the last possible execution time and work backwards, subtracting a small interval\\n    var finalWeakenResolvesAt = new Date(time.valueOf());\\n    finalWeakenResolvesAt.setTime(finalWeakenResolvesAt.getTime() + weakenSecondTime);\\n    \\n    // step 3 (grow back) should resolve \\\"delay\\\" before the final weaken.\\n    var growResolvesAt = new Date(finalWeakenResolvesAt.valueOf());\\n    growResolvesAt.setTime(growResolvesAt.getTime() - delayInterval);\\n    \\n    // step 2 (weaken after hack) should resolve \\\"delay\\\" before the grow.\\n    var weakenResolvesAt = new Date(growResolvesAt.valueOf());\\n    weakenResolvesAt.setTime(weakenResolvesAt.getTime() - delayInterval);\\n    \\n    // step 1 (steal a bunch of money) should resolve \\\"delay\\\" before its respective weaken.\\n    var hackResolvesAt = new Date(weakenResolvesAt.valueOf());\\n    hackResolvesAt.setTime(hackResolvesAt.getTime() - delayInterval);\\n    \\n    // from these optimal resolution times, determine when to execute each\\n    var fireHackAt = new Date(hackResolvesAt.valueOf());\\n    fireHackAt.setTime(fireHackAt.getTime() - hackTime);\\n    \\n    var fireFirstWeakenAt = new Date(weakenResolvesAt.valueOf());\\n    fireFirstWeakenAt.setTime(fireFirstWeakenAt.getTime() - weakenTime);\\n    \\n    var fireGrowAt = new Date(growResolvesAt.valueOf());\\n    fireGrowAt.setTime(fireGrowAt.getTime() - growTime);\\n    \\n    var fireSecondWeakenAt = new Date(finalWeakenResolvesAt.valueOf());\\n    fireSecondWeakenAt.setTime(fireSecondWeakenAt.getTime() - weakenTime);\\n    \\n    var firstThingThatFires = new Date(Math.min(fireSecondWeakenAt.getTime(), fireGrowAt.getTime(), fireFirstWeakenAt.getTime(), fireHackAt.getTime()));\\n    var batchTiming = {\\n        batchStart: time,\\n        firstFire: firstThingThatFires,\\n        hackStart: fireHackAt,\\n        hackEnd: hackResolvesAt,\\n        firstWeakenStart: fireFirstWeakenAt,\\n        firstWeakenEnd: weakenResolvesAt,\\n        growStart: fireGrowAt,\\n        growEnd: growResolvesAt,\\n        secondWeakenStart: fireSecondWeakenAt,\\n        secondWeakenEnd: finalWeakenResolvesAt        \\n    };\\n    \\n    var schedObj = getScheduleObject(batchTiming, currentTarget, batchNumber);\\n    \\n    return schedObj;\\n}\\n\\nfunction getTool(s) {\\n    for (var i = 0; i < tools.length; i++) {\\n        if (tools[i].shortName() == s) {\\n            return tools[i];\\n        }\\n    }\\n    return null;\\n}\\n\\n// intended as a high-powered figure-this-out-for-me run command.\\n// if it can't run all the threads at once, it runs as many as it can\\n// across the spectrum of daemons available.\\nasync function arbitraryExecution(ns, tool, threads, args) {\\n    sortServerList(\\\"ram\\\");\\n    for (var i = 0; i < serverListRam.length; i++) {\\n        // we've done it, move on.\\n        if (threads <= 0)\\n            break;\\n        var sourceServer = serverListRam[i];\\n        // if we don't have root, we don't have exec privileges, move on.\\n        if (!sourceServer.hasRoot())\\n            continue;\\n        var maxThreadsHere = Math.min(threads, Math.floor(sourceServer.ramAvailable() / tool.cost));\\n        if (maxThreadsHere <= 0)\\n            continue;\\n        threads -= maxThreadsHere;\\n        // if we're coming from the daemon host, we can use run\\n        if (sourceServer.name == daemonHost) {\\n            var runArgs = [tool.name, maxThreadsHere].concat(args);\\n            await ns.run.apply(null, runArgs);\\n            return true;\\n        } else {\\n            // if not, we use a remote execute, with a script copy check.\\n            if (!doesServerHaveFile(ns, tool.name, sourceServer.name)) {\\n                ns.scp(tool.name, daemonHost, sourceServer.name);\\n            }\\n            var execArgs = [tool.name, sourceServer.name, maxThreadsHere].concat(args);\\n            await ns.exec.apply(null, execArgs);\\n            return true;\\n        }\\n    }\\n    // the run failed!\\n    return false;\\n}\\n\\n// brings the server down to minimum security to prepare for cycling scheduler activity\\nasync function prepServer(ns, currentTarget) {\\n    // once we're in scheduling mode, presume prep server is to be skipped.\\n    if (currentTarget.isTargeting())\\n        return;    \\n    var now = new Date(Date.now().valueOf());\\n    if (currentTarget.security() > currentTarget.minSecurity || currentTarget.money() < currentTarget.maxMoney) {\\n        var trueGrowThreadsNeeded = 0;\\n        var weakenTool = getTool(\\\"weak\\\");\\n        var threadsNeeded = 0;\\n        var weakenForGrowthThreadsNeeded = 0;\\n        if (currentTarget.money() < currentTarget.maxMoney) {\\n            var growTool = getTool(\\\"grow\\\");\\n            var growThreadsAllowable = growTool.getMaxThreads();\\n            var growThreadsNeeded = currentTarget.growThreadsNeeded();\\n            trueGrowThreadsNeeded = Math.min(growThreadsAllowable, growThreadsNeeded);\\n            weakenForGrowthThreadsNeeded = Math.ceil(trueGrowThreadsNeeded * growthThreadHardening / actualWeakenPotency());\\n            var growThreadThreshold = (growThreadsAllowable - growThreadsNeeded) * (growTool.cost / weakenTool.cost);\\n            var growThreadsReleased = weakenTool.cost / growTool.cost * (weakenForGrowthThreadsNeeded + currentTarget.weakenThreadsNeeded());\\n            if (growThreadThreshold >= growThreadsReleased) {\\n                growThreadsReleased = 0;\\n            }\\n            trueGrowThreadsNeeded -= growThreadsReleased;\\n            if (trueGrowThreadsNeeded > 0) {\\n                await arbitraryExecution(ns, growTool, trueGrowThreadsNeeded, [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\"]);\\n            }\\n        }\\n        threadsNeeded = currentTarget.weakenThreadsNeeded() + weakenForGrowthThreadsNeeded;\\n        var threadSleep = currentTarget.timeToWeaken() * 1000 + queueDelay;\\n        var threadsAllowable = weakenTool.getMaxThreads();        \\n        var trueThreads = Math.min(threadsAllowable, threadsNeeded);\\n        if (trueThreads > 0) {\\n            ns.print(\\\"Prepping \\\" + currentTarget.name + \\\", resting for \\\" + Math.floor(threadSleep / 1000) + \\\" seconds.\\\");\\n            await arbitraryExecution(ns, weakenTool, trueThreads, [currentTarget.name, now.getTime(), now.getTime(), 0, \\\"prep\\\"]);            \\n        }\\n    }\\n}\\n\\nfunction buildServerObject(ns, node) {\\n    var server = {\\n        instance: ns,\\n        name: node,\\n        minSecurity: ns.getServerMinSecurityLevel(node),\\n        hackingRequired: ns.getServerRequiredHackingLevel(node),\\n        portsRequired: ns.getServerNumPortsRequired(node),\\n        maxMoney: ns.getServerMaxMoney(node),\\n        percentageToSteal: 0.5,\\n        sortValue: function() { \\n            // if the server is at base security, prioritize it.\\n            // we do this by pretending the time to weaken is really really small.\\n            var timeToWeakenVar = this.timeToWeaken();\\n            if (this.security() > this.minSecurity) {\\n                timeToWeakenVar = 1;\\n            }\\n            return this.maxMoney / (timeToWeakenVar * 2); },\\n        canCrack: function() { return getPortCrackers(this.instance) >= this.portsRequired },\\n        canHack: function() { return this.hackingRequired <= this.instance.getHackingLevel(); },\\n        shouldHack: function () { return this.maxMoney > 0 && this.name !== \\\"home\\\" && !this.instance.getPurchasedServers().includes(this.name); },\\n        money: function() { return this.instance.getServerMoneyAvailable(this.name); },\\n        security: function() { return this.instance.getServerSecurityLevel(this.name); },\\n        isPrepping: function() {\\n            var toolNames = [\\\"weak-target.ns\\\", \\\"grow-target.ns\\\", \\\"hack-target.ns\\\"];\\n            // then figure out if the servers are running the other 2, that means prep\\n            for (var s = 0; s < serverListRam.length; s++) {\\n                var ps = this.instance.ps(serverListRam[s].name);\\n                for (var p = 0; p < ps.length; p++) {\\n                    var tps = ps[p];\\n                    if (toolNames.includes(tps.filename) && tps.args[0] == this.name) {\\n                        if (tps.args.length > 4 && tps.args[4] == \\\"prep\\\") {\\n                            return true;\\n                        }                        \\n                    }\\n                }\\n            }\\n            return false;\\n        },\\n        isTargeting: function() {\\n            var toolNames = [\\\"weak-target.ns\\\", \\\"grow-target.ns\\\", \\\"hack-target.ns\\\"];\\n            // figure out if any server in the network is running scripts against this server\\n            for (var s = 0; s < serverListRam.length; s++) {\\n                var ps = this.instance.ps(serverListRam[s].name);\\n                for (var p = 0; p < ps.length; p++) {\\n                    var tps = ps[p];\\n                    if (toolNames.includes(tps.filename) && tps.args[0] == this.name) {\\n                        if (tps.args.length > 4 && tps.args[4] != \\\"prep\\\") {\\n                            return true;\\n                        }     \\n                    }\\n                }\\n            }\\n            return false;\\n        },\\n        hasRunningScript: function(scriptName) {\\n            return this.instance.scriptRunning(scriptName, this.name);\\n        },\\n        serverGrowthPercentage: function() { \\n            return this.instance.getServerGrowth(this.name) * bitnodeGrowMult * playerHackingGrowMult / 100; \\n        },\\n        adjustedGrowthRate: function() { return Math.min(maxGrowthRate, 1 + ((unadjustedGrowthRate - 1) / this.minSecurity)); },\\n        actualServerGrowthRate: function() {\\n            return Math.pow(this.adjustedGrowthRate(), this.serverGrowthPercentage());\\n        },\\n        // this is the target growth coefficient *immediately*\\n        targetGrowthCoefficient: function() {\\n            return this.maxMoney / Math.max(this.money(), 1);\\n        },\\n        // this is the target growth coefficient per cycle, based on theft\\n        targetGrowthCoefficientAfterTheft: function() {\\n            return 1 / (1 - (this.hackThreadsNeeded() * this.percentageStolenPerHackThread()));\\n        },\\n        cyclesNeededForGrowthCoefficient: function() {\\n            return Math.log(this.targetGrowthCoefficient()) / Math.log(this.adjustedGrowthRate());\\n        },\\n        cyclesNeededForGrowthCoefficientAfterTheft: function() {\\n            return Math.log(this.targetGrowthCoefficientAfterTheft()) / Math.log(this.adjustedGrowthRate());\\n        },\\n        hackEaseCoefficient: function() {\\n            return (100 - Math.min(100, this.minSecurity)) / 100;\\n        },\\n        hackingSkillCoefficient: function() {\\n            return (this.instance.getHackingLevel() - (this.hackingRequired - 1)) / this.instance.getHackingLevel();\\n        },\\n        actualHackCoefficient: function() {\\n            return this.hackEaseCoefficient() * this.hackingSkillCoefficient() * actualHackMultiplier() / 240;\\n        },\\n        percentageStolenPerHackThread: function() {\\n            return Math.min(1, Math.max(0, this.actualHackCoefficient()));\\n        },\\n        actualPercentageToSteal: function() {\\n            return this.hackThreadsNeeded() * this.percentageStolenPerHackThread();\\n        },\\n        hackThreadsNeeded: function() {\\n            return Math.floor(this.percentageToSteal / this.percentageStolenPerHackThread());\\n        },\\n        growThreadsNeeded: function() {\\n            return Math.ceil(this.cyclesNeededForGrowthCoefficient() / this.serverGrowthPercentage());\\n        },\\n        growThreadsNeededAfterTheft: function() {\\n            return Math.ceil(this.cyclesNeededForGrowthCoefficientAfterTheft() / this.serverGrowthPercentage());\\n        },\\n        weakenThreadsNeededAfterTheft: function() {\\n            return Math.ceil(this.hackThreadsNeeded() * hackThreadHardening / actualWeakenPotency());\\n        },\\n        weakenThreadsNeededAfterGrowth: function() {\\n            return Math.ceil(this.growThreadsNeededAfterTheft() * growthThreadHardening / actualWeakenPotency());\\n        },\\n        weakenThreadTotalPerCycle: function() {\\n            return (this.weakenThreadsNeededAfterTheft() + this.weakenThreadsNeededAfterGrowth());\\n        },\\n        hasRoot: function() { return this.instance.hasRootAccess(this.name); },\\n        isHost: function() { return this.name == daemonHost; },\\n        getRam: function() { return this.instance.getServerRam(this.name); },\\n        ramAvailable: function() { \\n            var ramArray = this.getRam(); \\n            return ramArray[0] - ramArray[1];\\n        },\\n        growDelay: function() { return this.timeToWeaken() - this.timeToGrow() + arbitraryExecutionDelay; },\\n        hackDelay: function() { return this.timeToWeaken() - this.timeToHack(); },\\n        timeToWeaken: function() { return this.instance.getWeakenTime(this.name); },\\n        timeToGrow: function() { return this.instance.getGrowTime(this.name); },\\n        timeToHack: function() { return this.instance.getHackTime(this.name); },\\n        weakenThreadsNeeded: function() { return Math.ceil((this.security() - this.minSecurity) / actualWeakenPotency()); }\\n    };\\n    return server;\\n}\\n\\n// initialize a new incomplete schedule item\\nfunction getScheduleItem(toolShortName, start, end, threadsNeeded) {\\n    var schedItem = {\\n        toolShortName: toolShortName,\\n        start: start,\\n        end: end,\\n        threadsNeeded: threadsNeeded,\\n        itemRunning: false\\n    };\\n    return schedItem;\\n}\\n\\nfunction getScheduleObject(batchTiming, currentTarget, batchNumber) {\\n    var schedItems = [];\\n    \\n    var schedItem0 = getScheduleItem(\\\"hack\\\", batchTiming.hackStart, batchTiming.hackEnd, currentTarget.hackThreadsNeeded());\\n    var schedItem1 = getScheduleItem(\\\"weak\\\", batchTiming.firstWeakenStart, batchTiming.firstWeakenEnd, currentTarget.weakenThreadsNeededAfterTheft());\\n    var schedItem2 = getScheduleItem(\\\"grow\\\", batchTiming.growStart, batchTiming.growEnd, currentTarget.growThreadsNeededAfterTheft());\\n    var schedItem3 = getScheduleItem(\\\"weak\\\", batchTiming.secondWeakenStart, batchTiming.secondWeakenEnd, currentTarget.weakenThreadsNeededAfterGrowth());\\n    \\n    schedItems.push(schedItem0);\\n    schedItems.push(schedItem1);\\n    schedItems.push(schedItem2);\\n    schedItems.push(schedItem3);\\n    \\n    var scheduleObject = {\\n        batchNumber: batchNumber,\\n        batchStart: batchTiming.batchStart,\\n        firstFire: batchTiming.firstFire,\\n        hackEnd: batchTiming.hackEnd,\\n        batchFinish: schedItem3.end,\\n        scheduleItems: schedItems\\n    };\\n    \\n    return scheduleObject;\\n}\\n\\nfunction addServer(server) {\\n    serverListRam.push(server);\\n    serverListMoney.push(server);\\n    addedServers.push(server.name);\\n}\\n\\nfunction getPortCrackers(ns) {\\n    var count = 0;\\n    for(var i = 0; i < portCrackers.length; i++) {\\n        if (portCrackers[i].exists()) {\\n            count++;\\n        }\\n    }\\n    return count;\\n}\\n\\nasync function buildServerList(ns) {\\n    var startingNode = daemonHost;\\n    \\n    var hostsToScan = [];\\n    hostsToScan.push(startingNode);\\n    \\n    while (hostsToScan.length > 0) {\\n        var hostName = hostsToScan.pop();\\n        if (!addedServers.includes(hostName)) {\\n            var connectedHosts = ns.scan(hostName);\\n            for (var i = 0; i < connectedHosts.length; i++) {\\n                hostsToScan.push(connectedHosts[i]);\\n            }\\n            addServer(buildServerObject(ns, hostName));\\n        }\\n        await ns.sleep(10);\\n    }\\n    \\n    sortServerList(\\\"ram\\\");\\n    sortServerList(\\\"money\\\");\\n}\",\"filename\":\"daemon.ns\",\"module\":{},\"dependencies\":[\"daemon.ns\"],\"ramUsage\":13.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":40}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of farm-stats is to return a list of our server farm capabilities\\r\\n// it just prints a list of purchased servers, their value in money, and the ram they\\r\\n// are using vs the total ram available.\\r\\n\\r\\nconst ramCostConstant = 55000;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    var serverNameList = ns.getPurchasedServers();\\r\\n    ns.tprint(\\\"--==-- Server Farm Stats --==--\\\");\\r\\n    for (var s = 0; s < serverNameList.length; s++) {\\r\\n        var box = serverNameList[s];\\r\\n        var ram = ns.getServerRam(box);\\r\\n        var maxRam = ram[0];\\r\\n        var currentRam = ram[0] - ram[1];\\r\\n        var cost = maxRam * ramCostConstant;\\r\\n        ns.tprint(box + \\\" Ram: \\\" + currentRam + \\\" / \\\" + maxRam + \\\" --==-- Cost: $\\\" + cost);\\r\\n    }\\r\\n}\",\"filename\":\"farm-stats.ns\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.95,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":41}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":42}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":43}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of the host manager is to buy the best servers it can\\r\\n// until it thinks RAM is underutilized enough that you don't need to anymore.\\r\\n\\r\\n// the max server ram you can buy (it's a petabyte)\\r\\nconst maxPurchasedServerRam = 1048576;\\r\\n\\r\\n// the amount of money each gig costs when you buy a server.\\r\\nconst purchasedServerCostPerRam = 55000;\\r\\n\\r\\n// the max amount of server ram as an exponent (power of 2)\\r\\nconst maxPurchasedServerRamExponent = 20;\\r\\n\\r\\n// the max number of servers you can have in your farm\\r\\nconst maxPurchasedServers = 25;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    while(true) {\\r\\n        tryToBuyBestServerPossible(ns);\\r\\n        await ns.sleep(200);\\r\\n    }\\r\\n}\\r\\n\\r\\n// buy a mess of servers\\r\\nasync function buyDaemonHosts(ns) {\\r\\n    while(tryToBuyBestServerPossible(ns) !== \\\"\\\") {\\r\\n        // NOOP\\r\\n        await ns.sleep(200);\\r\\n    } \\r\\n}\\r\\n\\r\\nfunction getMyMoney(ns) {\\r\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\n// attempts to buy a server at or better than your home machine.\\r\\nfunction tryToBuyBestServerPossible(ns) {\\r\\n    var currentMoney = getMyMoney(ns);    \\r\\n    var exponentLevel = 1;\\r\\n    while(Math.pow(2, exponentLevel + 1) * purchasedServerCostPerRam <= currentMoney && exponentLevel < maxPurchasedServerRamExponent) {\\r\\n        exponentLevel += 1;\\r\\n    }\\r\\n    \\r\\n    // if the server is crappier than home don't bother.\\r\\n    var maxRamPossibleToBuy = Math.pow(2, exponentLevel);\\r\\n    if (maxRamPossibleToBuy < ns.getServerRam(\\\"home\\\")[0] && maxRamPossibleToBuy < Math.pow(2, maxPurchasedServerRamExponent) ) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    \\r\\n    // check to make sure we have room in our server farm.\\r\\n    var existingServers = ns.getPurchasedServers();\\r\\n      \\r\\n    // determine ram utilization rates\\r\\n    var homeUtilization = ns.getServerRam(\\\"home\\\");\\r\\n    var utilizationTotal = homeUtilization[1];\\r\\n    var ramMax = homeUtilization[0];\\r\\n    \\r\\n    // used to track the worst server in our list.\\r\\n    var worstServer = \\\"\\\";\\r\\n    \\r\\n    // arbitrarily the max value\\r\\n    var worstServerRam = Math.pow(2, maxPurchasedServerRamExponent);\\r\\n    \\r\\n    var isWorseThanExistingServer = false;\\r\\n    \\r\\n    // iterate over the server farm to see if there's any opportunity for improvement\\r\\n    for (var i = 0; i < existingServers.length; i++) {\\r\\n        var existingServer = existingServers[i];\\r\\n        \\r\\n        // track the worst server in the farm\\r\\n        var ramStats = ns.getServerRam(existingServer);\\r\\n        var existingServerRam = ramStats[0];\\r\\n        var utilization = ramStats[1];\\r\\n        utilizationTotal += utilization;\\r\\n        ramMax += existingServerRam;\\r\\n        if (existingServerRam < worstServerRam) {\\r\\n            worstServer = existingServer;\\r\\n            worstServerRam = existingServerRam;\\r\\n        }\\r\\n        \\r\\n        // if the server is crappier than an existing server don't bother.\\r\\n        if (maxRamPossibleToBuy < existingServerRam) {\\r\\n            isWorseThanExistingServer = true;\\r\\n        }\\r\\n    }   \\r\\n    \\r\\n    // analyze the utilization rates\\r\\n    var utilizationRate = utilizationTotal / ramMax;\\r\\n    \\r\\n    // hard coded ballpark, if we're over this percentage, consider us \\\"well utilized\\\".\\r\\n    var utilizationTarget = 0.5;\\r\\n    \\r\\n    // abort if utilization is below target. We probably don't need another server.\\r\\n    if (utilizationRate < utilizationTarget)\\r\\n        return \\\"\\\";\\r\\n    \\r\\n    // abort if we're trying to buy a sucky box.\\r\\n    if (isWorseThanExistingServer)\\r\\n        return \\\"\\\";\\r\\n    \\r\\n    // if we're at capacity, check to see if we're better than the worst server, then delete it.\\r\\n    if (existingServers.length >= maxPurchasedServers) {\\r\\n        var listOfScripts = ns.ps(worstServer);\\r\\n        if (listOfScripts.length === 0 && worstServerRam < maxRamPossibleToBuy) {\\r\\n            ns.deleteServer(worstServer);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    var cost = maxRamPossibleToBuy * purchasedServerCostPerRam;\\r\\n    \\r\\n    // you're too poor lol\\r\\n    if (currentMoney < cost)\\r\\n        return \\\"\\\";\\r\\n    \\r\\n    var purchasedServer = ns.purchaseServer(\\\"daemon\\\", maxRamPossibleToBuy);\\r\\n    \\r\\n    return purchasedServer;\\r\\n}\",\"filename\":\"host-manager.ns\",\"module\":{},\"dependencies\":[\"host-manager.ns\"],\"ramUsage\":8.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":44}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of node-manager is to handle hacknet nodes for us\\r\\n// the primary reason for doing it at all is simply for netburner augs.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const hn = ns.hacknet;\\r\\n    var options = [\\\"level\\\", \\\"ram\\\", \\\"core\\\", \\\"node\\\"];\\r\\n    while(true) {\\r\\n        var maxNodes = hn.numNodes();\\r\\n        var needsNode = false;\\r\\n        if (maxNodes === 0) {\\r\\n            needsNode = true;\\r\\n            maxNodes = 1;\\r\\n        }\\r\\n        for (var i = 0; i < maxNodes; i++) {\\r\\n            for (var o = (needsNode ? 3 : 0); o < options.length; o++) {\\r\\n                var allowancePercentage = 0.00001;\\r\\n                var playerMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n                var costOfThing = 0;\\r\\n                switch(o) {\\r\\n                    case 0:\\r\\n                        costOfThing = hn.getLevelUpgradeCost(i, 1);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        costOfThing = hn.getRamUpgradeCost(i, 1);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        costOfThing = hn.getCoreUpgradeCost(i, 1);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        costOfThing = hn.getPurchaseNodeCost();\\r\\n                        break;\\r\\n                }\\r\\n                \\r\\n                var shouldPurchase = playerMoney * allowancePercentage >= costOfThing;\\r\\n                if (shouldPurchase) {\\r\\n                    switch(o) {\\r\\n                        case 0:\\r\\n                            hn.upgradeLevel(i, 1);\\r\\n                            break;\\r\\n                        case 1:\\r\\n                            hn.upgradeRam(i, 1);\\r\\n                            break;\\r\\n                        case 2:\\r\\n                            hn.upgradeCore(i, 1);\\r\\n                            break;\\r\\n                        case 3:\\r\\n                            hn.purchaseNode()\\r\\n                            break;\\r\\n                    }  \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10);\\r\\n    }\\r\\n}\",\"filename\":\"node-manager.ns\",\"module\":{},\"dependencies\":[\"node-manager.ns\"],\"ramUsage\":5.7,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":45}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of the program-manager is to buy all the programs\\r\\n// from the darkweb we can afford so we don't have to do it manually\\r\\n// or write them ourselves. Like tor-manager, this script dies a natural death\\r\\n// once all programs are bought.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const programNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\", \\\"DeepscanV1.exe\\\", \\\"DeepscanV2.exe\\\", \\\"Autolink.exe\\\"];\\r\\n    const programCosts = [500000, 1500000, 5000000, 30000000, 250000000, 500000, 25000000, 1000000];\\r\\n    var hasAllPrograms = false;\\r\\n    while (true) {\\r\\n        if (hasAllPrograms) {\\r\\n            break;\\r\\n        }\\r\\n        if (!hasTor(ns)) {\\r\\n            await ns.sleep(2000);\\r\\n            continue;\\r\\n        }\\r\\n        var foundMissingProgram = false;\\r\\n        for (var i = 0; i < programNames.length; ++i) {\\r\\n            var prog = programNames[i];\\r\\n            if (hasProgram(ns, prog)) {\\r\\n                continue;\\r\\n            } else {\\r\\n                foundMissingProgram = true;\\r\\n            }\\r\\n            var cost = programCosts[i];\\r\\n            if (cost <= getPlayerMoney(ns)) {\\r\\n                ns.purchaseProgram(prog);\\r\\n            }\\r\\n        }\\r\\n        if (!foundMissingProgram) {\\r\\n            hasAllPrograms = true;\\r\\n        }\\r\\n        await ns.sleep(2000);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getPlayerMoney(ns) {\\r\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\nfunction hasProgram(ns, program) {\\r\\n    return ns.fileExists(program, \\\"home\\\");\\r\\n}\\r\\n\\r\\nfunction hasTor(ns) {\\r\\n    var homeNodes = ns.scan(\\\"home\\\");\\r\\n    return homeNodes.includes(\\\"darkweb\\\");\\r\\n}\",\"filename\":\"program-manager.ns\",\"module\":{},\"dependencies\":[\"program-manager.ns\"],\"ramUsage\":4,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":46}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of ram-manager is simply to upgrade RAM on\\r\\n// the \\\"home\\\" machine ASAP whenever enough money is available.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    // this runs forever, it always runs. as long as utilization is high enough, we want more ram.\\r\\n    while (true) {\\r\\n        // if our utilization rates are below half, we don't necessarily need more RAM\\r\\n        if (ns.getUpgradeHomeRamCost() <= ns.getServerMoneyAvailable(\\\"home\\\")) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        await ns.sleep(2000);\\r\\n    }\\r\\n}\",\"filename\":\"ram-manager.ns\",\"module\":{},\"dependencies\":[\"ram-manager.ns\"],\"ramUsage\":6.2,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":47}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of tor-manager is to buy the TOR router ASAP\\r\\n// so that another script can buy the port breakers. This script\\r\\n// dies a natural death once tor is bought.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const torCost = 200000;\\r\\n    var hasTorRouter = false;\\r\\n    while (true) {\\r\\n        if (hasTorRouter) {\\r\\n            break;\\r\\n        }\\r\\n        if (hasTor(ns)) {\\r\\n            hasTorRouter = true;\\r\\n        } else {\\r\\n            if (torCost <= getPlayerMoney(ns)) {\\r\\n                ns.purchaseTor();\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(200);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getPlayerMoney(ns) {\\r\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\nfunction hasTor(ns) {\\r\\n    var homeNodes = ns.scan(\\\"home\\\");\\r\\n    return homeNodes.includes(\\\"darkweb\\\");\\r\\n}\",\"filename\":\"tor-manager.ns\",\"module\":{},\"dependencies\":[\"tor-manager.ns\"],\"ramUsage\":3.9,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":48}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":49}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    while(true) {\\r\\n        await ns.weaken(ns.args[0]);\\r\\n    }\\r\\n}\",\"filename\":\"exp-farm.ns\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":50}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let startingNode = ns.getHostname();\\r\\n    \\r\\n    let hostsToScan = [];\\r\\n    hostsToScan.push(startingNode);\\r\\n    const edges = {}\\r\\n    const depths = {}\\r\\n    depths[startingNode] = 0\\r\\n    \\r\\n    // BFS, building out all edges and depths\\r\\n    while (hostsToScan.length > 0) {\\r\\n        let hostname = hostsToScan.pop();\\r\\n        if (!(hostname in edges)) {\\r\\n            let connectedHosts = ns.scan(hostname);\\r\\n            connectedHosts.forEach(h => depths[h] = (depths[h] === undefined) ? (depths[hostname] + 1) : depths[h])\\r\\n            edges[hostname] = [...(edges[hostname] || []), ...connectedHosts]\\r\\n            hostsToScan = [...hostsToScan, ...connectedHosts]\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let goal = ns.args[0]\\r\\n    let route = []\\r\\n    let location = goal\\r\\n\\r\\n    while (location != startingNode) {\\r\\n        let neighbours = edges[location]\\r\\n        let lDepth = depths[location]\\r\\n        let next = neighbours.find(n => depths[n] < lDepth)\\r\\n        route.push(location)\\r\\n        location = next\\r\\n    }\\r\\n\\r\\n    ns.tprint(route)\\r\\n}\",\"filename\":\"findit.js\",\"module\":\"\",\"dependencies\":[\"findit.js\"],\"ramUsage\":1.85,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":51}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//Covers the whole screen in a blank square. When the mouse moves \\r\\n//over it, the square disappears and the command is executed.\\r\\nexport function inject(ns, code) {\\r\\n    let id = '' + Math.random() + Math.random();\\r\\n    let output = `<div id=\\\"${id}\\\" style=\\\"position:absolute; width:100%; height:100%\\\" `;\\r\\n    output += `onmouseover=\\\"${code} document.getElementById(\\\\'${id}\\\\').remove();\\\"></div>`;\\r\\n    ns.tprint(output);\\r\\n}\\r\\n\\r\\nexport function cmd(ns, cmd) {\\r\\n    let code = `document.getElementById('terminal-input-text-box').value = '${cmd}';`;\\r\\n    code += \\\"document.body.dispatchEvent(new KeyboardEvent('keydown', {\\\";\\r\\n    code += \\\"bubbles: true, cancelable: true, keyCode: 13 }));\\\";\\r\\n    inject(ns, code);\\r\\n}\\r\\n\\r\\nlet svObj = (name = 'home', depth = 0) => ({name: name, depth: depth});\\r\\nexport function getServers(ns) {\\r\\n    let result = [];\\r\\n    let visited = { 'home': 0 };\\r\\n    let queue = Object.keys(visited);\\r\\n    let name;\\r\\n    while ((name = queue.pop())) {\\r\\n        let depth = visited[name];\\r\\n        result.push(svObj(name, depth));\\r\\n        let scanRes = ns.scan(name);\\r\\n        for (let i = scanRes.length; i >= 0; i--){\\r\\n            if (visited[scanRes[i]] === undefined) {\\r\\n                queue.push(scanRes[i]);\\r\\n                visited[scanRes[i]] = depth + 1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return result;\\r\\n}\",\"filename\":\"helper.ns\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.8,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":52}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\r\\n    cmd,\\r\\n    getServers\\r\\n} from \\\"helper.ns\\\";\\r\\n\\r\\n\\r\\nlet facServers = {\\r\\n    \\\"CSEC\\\" : \\\"yellow\\\",\\r\\n    \\\"avmnite-02h\\\" : \\\"yellow\\\",\\r\\n    \\\"I.I.I.I\\\" : \\\"yellow\\\",\\r\\n    \\\"run4theh111z\\\" : \\\"yellow\\\",\\r\\n    \\\"The-Cave\\\" : \\\"orange\\\",\\r\\n    \\\"w0r1d_d43m0n\\\" : \\\"red\\\"\\r\\n};\\r\\n\\r\\nexport async function main(ns) {\\r\\n    let output = \\\"Network:\\\";\\r\\n    getServers(ns).forEach(server => {\\r\\n        let name = server.name;\\r\\n        let hackColor = ns.hasRootAccess(name) ? \\\"lime\\\" : \\\"red\\\";\\r\\n        let nameColor = facServers[name] ? facServers[name] : \\\"white\\\";\\r\\n\\r\\n        let hoverText = [\\\"Req Level: \\\", ns.getServerRequiredHackingLevel(name),\\r\\n            \\\"&#10;Req Ports: \\\", ns.getServerNumPortsRequired(name),\\r\\n            \\\"&#10;Memory: \\\", ns.getServerRam(name)[0], \\\"GB\\\",\\r\\n            \\\"&#10;Security: \\\", ns.getServerSecurityLevel(name),\\r\\n            \\\"/\\\", ns.getServerMinSecurityLevel(name),\\r\\n            \\\"&#10;Money: \\\", Math.round(ns.getServerMoneyAvailable(name)).toLocaleString(), \\\" (\\\", \\r\\n            Math.round(100 * ns.getServerMoneyAvailable(name)/ns.getServerMaxMoney(name)), \\\"%)\\\"\\r\\n            ].join(\\\"\\\");\\r\\n\\r\\n        let ctText = \\\"\\\";\\r\\n        ns.ls(name, \\\".cct\\\").forEach(ctName => {\\r\\n            ctText += [\\\"<a title='\\\", ctName,\\r\\n                //Comment out the next line to reduce footprint by 5 GB\\r\\n                \\\"&#10;\\\", ns.codingcontract.getContractType(ctName, name),\\r\\n                \\\"'>©</a>\\\"].join(\\\"\\\"); \\r\\n        });\\r\\n\\r\\n        output += [\\\"<br>\\\", \\\" \\\".repeat(server.depth),\\r\\n            `<font color=${hackColor}>■ </font>`,\\r\\n            `<a class='scan-analyze-link' title='${hoverText}' style='color:${nameColor}'>${name}</a> `,\\r\\n            `<font color='fuchisa'>${ctText}</font>`,\\r\\n            ].join(\\\"\\\");\\r\\n    });\\r\\n    ns.tprint(output);\\r\\n    cmd(ns, 'scan-analyze 0');\\r\\n}\",\"filename\":\"scan.ns\",\"module\":{},\"dependencies\":[\"helper.ns\",\"scan.ns\"],\"ramUsage\":7.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":53}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class CCT {\\r\\n    constructor(ns, hostname, contract) {\\r\\n        const cc = ns.codingcontract;\\r\\n\\r\\n        this.contract = contract;\\r\\n        this.data = cc.getData(contract, hostname);\\r\\n        this.hostname = hostname;\\r\\n        this.type = cc.getContractType(contract, hostname);\\r\\n    }\\r\\n\\r\\n    static allContracts(ns) {\\r\\n        const allNodes = this.allNodes(ns);\\r\\n        let res = [];\\r\\n\\r\\n        for (const i in allNodes) {\\r\\n            const files = ns.ls(allNodes[i], \\\".cct\\\");\\r\\n\\r\\n            for (const x in files)\\r\\n                res.push(new CCT(ns, allNodes[i], files[x]));\\r\\n        }\\r\\n\\r\\n        return res;\\r\\n    }\\r\\n\\r\\n    static allNodes(ns) {\\r\\n        let scanArray = [\\\"home\\\"];\\r\\n        let servers = [];\\r\\n        let newScan = [];\\r\\n        let currentHost;\\r\\n\\r\\n        for (let i = 0; i < scanArray.length; ++i) {\\r\\n            currentHost = scanArray[i];\\r\\n            servers.push(currentHost);\\r\\n            newScan = ns.scan(currentHost);\\r\\n\\r\\n            for (let x = 0; x < newScan.length; ++x) {\\r\\n                if (!scanArray.includes(newScan[x]))\\r\\n                    scanArray.push(newScan[x]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return servers;\\r\\n    }\\r\\n\\r\\n    Solve(ns) {\\r\\n        const cc = ns.codingcontract;\\r\\n\\r\\n        const solutions = new Map([\\r\\n            [\\\"Find Largest Prime Factor\\\", this.solution_find_largest_prime_factor],\\r\\n            [\\\"Merge Overlapping Intervals\\\", this.solution_merge_overlapping_intervals],\\r\\n            [\\\"Subarray with Maximum Sum\\\", this.solution_subarray_max_sum], \\r\\n        ]);\\r\\n\\r\\n        if (solutions.has(this.type))\\r\\n            return cc.attempt(JSON.stringify(solutions.get(this.type)(this.data)), this.contract, this.hostname);\\r\\n        else\\r\\n            return false;\\r\\n    }\\r\\n\\r\\n    solution_merge_overlapping_intervals(data) {\\r\\n        let sorted = data.sort((a, b) => a[0] - b[0])\\r\\n        const merge = (l, r) => [Math.min(l[0], r[0]), Math.max(l[1], r[1])]\\r\\n        const overlaps = (l, r) => l[1] >= r[0] || r[1] >= l[0]\\r\\n        const unmergeable = []\\r\\n        // something's unmergeable if it doesn't have a neighbour, or it doesn't overlap\\r\\n        let focus = sorted.shift()\\r\\n        while (focus) {\\r\\n            const el = sorted.shift()\\r\\n            if (el && overlaps(focus, el)) {\\r\\n                focus = merge(focus, el)\\r\\n            } else {\\r\\n                unmergeable.push(focus)\\r\\n                focus = el\\r\\n            }\\r\\n        }\\r\\n        return unmergeable\\r\\n    }\\r\\n\\r\\n    solution_subarray_max_sum( data ) {\\r\\n        return data.reduce(([m, c], n) => [Math.max(m, c), Math.max(0, c + n)], [0, 0])[0]\\r\\n    }\\r\\n\\r\\n    solution_find_largest_prime_factor(data) {\\r\\n        let fac = 2;\\r\\n\\r\\n        while (data > fac) {\\r\\n            if (data % fac === 0) {\\r\\n                data = Math.round(data / fac);\\r\\n                fac = 2;\\r\\n            } else\\r\\n                ++fac;\\r\\n        }\\r\\n\\r\\n        return fac;\\r\\n    }\\r\\n}\",\"filename\":\"lib-cct.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":22,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":54}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { CCT } from \\\"lib-cct.js\\\";\\r\\n\\r\\nexport async function main( ns )\\r\\n{\\r\\n    ns.disableLog( \\\"ALL\\\" );\\r\\n\\r\\n    while ( true )\\r\\n    {\\r\\n        const contracts = CCT.allContracts( ns );\\r\\n\\r\\n        if ( contracts.length > 0 )\\r\\n        {\\r\\n            for ( const i in contracts )\\r\\n            {\\r\\n                if ( contracts[i].Solve( ns ) )\\r\\n                    ns.print( \\\"solved: \\\" + contracts[i].contract + \\\" on \\\" + contracts[i].hostname + \\\" [\\\" + contracts[i].type + \\\"]\\\" );\\r\\n                else\\r\\n                    ns.print( \\\"unsolved: \\\" + contracts[i].contract + \\\" on \\\" + contracts[i].hostname + \\\" [\\\" + contracts[i].type + \\\"]\\\" + \\\" (\\\" + contracts[i].data + \\\")\\\" );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        await ns.sleep( 10000 );\\r\\n    }\\r\\n}\",\"filename\":\"cct.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":22,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":55}},{\"ctor\":\"Script\",\"data\":{\"code\":\"const keep = 0.2;\\r\\n\\r\\nconst buyLimit = 0.58;\\r\\nconst sellLimit = 0.50;\\r\\n\\r\\nconst commission = 100000;\\r\\n\\r\\nfunction updateStockData(ns, stocks, myStocks) {\\r\\n    let corpus = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n    myStocks.length = 0;\\r\\n    for(let i = 0; i < stocks.length; ++i) {\\r\\n        let sym = stocks[i].sym;\\r\\n        stocks[i].price = ns.getStockPrice(sym);\\r\\n        stocks[i].shares  = ns.getStockPosition(sym)[0];\\r\\n        stocks[i].forecast  = ns.getStockForecast(sym);\\r\\n        if(stocks[i].shares > 0) myStocks.push(stocks[i]);\\r\\n        corpus += stocks[i].price * stocks[i].shares;\\r\\n    }\\r\\n    stocks.sort((a, b) => b.forecast - a.forecast);\\r\\n    return corpus;\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    ns.disableLog(\\\"ALL\\\");\\r\\n    \\r\\n    let stocks = [];\\r\\n    let myStocks = [];\\r\\n    let corpus = 0;\\r\\n    for(let i = 0; i < ns.getStockSymbols().length; ++i)\\r\\n        stocks.push({sym:ns.getStockSymbols()[i]});\\r\\n    updateStockData(ns, stocks, myStocks);\\r\\n    \\r\\n    while(true) {\\r\\n        corpus = updateStockData(ns, stocks, myStocks);\\r\\n        // Sell bad shares\\r\\n        for (let i = 0; i < myStocks.length; i++){\\r\\n            if(myStocks[i].forecast < sellLimit) {\\r\\n                ns.print(\\\"Stock \\\" + myStocks[i].sym + \\\" no longer valuable. Selling.\\\");\\r\\n                ns.sellStock(myStocks[i].sym, myStocks[i].shares);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Don't do this. Use getStockPurchaseCost for some proportion of corpus,\\r\\n        // then reduce it by a certain % until it's buyable.\\r\\n        \\r\\n        let stockIndex = -1;\\r\\n        let cashToSpend = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n        while(cashToSpend > 100*commission && cashToSpend > corpus / 10) {\\r\\n            ns.print(\\\"Have \\\" + cashToSpend + \\\" cash to spend.\\\");\\r\\n            ++stockIndex;\\r\\n            updateStockData(ns, stocks, myStocks);\\r\\n            let stockToBuy = stocks[stockIndex];\\r\\n            if(stockToBuy.forecast < buyLimit) {\\r\\n                ns.print(\\\"No more good stocks left.\\\");\\r\\n                break;\\r\\n            }\\r\\n\\r\\n            let availibleShares = ns.getStockMaxShares(stockToBuy.sym) - stockToBuy.shares\\r\\n            if(availibleShares == 0)\\r\\n                continue; // We bought all shares of this stock\\r\\n            \\r\\n            let numberOfSharesToBuy = availibleShares;\\r\\n            while(true) {\\r\\n                if(ns.getStockPurchaseCost(stockToBuy.sym, numberOfSharesToBuy, \\\"L\\\") <= cashToSpend) {\\r\\n                    ns.buyStock(stockToBuy.sym, numberOfSharesToBuy);\\r\\n                    ns.print(\\\"Bought \\\" + numberOfSharesToBuy + \\\" shares in \\\" + stockToBuy.sym + \\\" for \\\" + ns.getStockPurchaseCost(stockToBuy.sym, numberOfSharesToBuy, \\\"L\\\"));\\r\\n                    cashToSpend -= ns.getStockPurchaseCost(stockToBuy.sym, numberOfSharesToBuy, \\\"L\\\");\\r\\n                    break;\\r\\n                }\\r\\n                numberOfSharesToBuy = Math.floor(numberOfSharesToBuy * 0.9);\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(6 * 1000);\\r\\n    }\\r\\n}\",\"filename\":\"trade.js\",\"module\":\"\",\"dependencies\":[\"trade.js\"],\"ramUsage\":19.2,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":56}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    const neuroFlux = \\\"NeuroFlux Governor\\\";\\r\\n    var desiredFactions = getDesiredFactions(ns);\\r\\n    var currentFaction = \\\"\\\";\\r\\n    while (true) {\\r\\n        var info = ns.getCharacterInformation();\\r\\n        var factions = info.factions;\\r\\n        if (factions.length === 0) {\\r\\n            await ns.sleep(5000);\\r\\n            continue;\\r\\n        }\\r\\n            \\r\\n        // loop over all our desirable factions\\r\\n        for(var d in desiredFactions) {\\r\\n            var faction = desiredFactions[d];\\r\\n            if (ns.isBusy()) {\\r\\n                continue;\\r\\n            }\\r\\n            // if we're a member of this faction\\r\\n            if (factions.includes(faction.name)) {\\r\\n                var hasAllFactionAugs = true;\\r\\n                var augsAlreadyInstalled = true;\\r\\n                var factionAugs = ns.getAugmentationsFromFaction(faction.name);\\r\\n                // we're at a place with this faction where we need to just donate.\\r\\n                // we do this if we're missing augs or not. It's much faster to just hit 150 favor and donate.\\r\\n                if (ns.getFactionFavor(faction.name) + ns.getFactionFavorGain(faction.name) >= 150 && ns.getFactionFavor(faction.name) < 150) {\\r\\n                    while (ns.getAugmentationCost(neuroFlux)[1] <= ns.getServerMoneyAvailable(\\\"home\\\") && ns.getAugmentationCost(neuroFlux)[0] <= ns.getFactionRep(faction.name)) {\\r\\n                        ns.purchaseAugmentation(faction.name, neuroFlux);\\r\\n                        ns.tprint(\\\"Purchasing aug from \\\" + faction.name + \\\": \\\" + neuroFlux);\\r\\n                        await ns.sleep(100);\\r\\n                    }\\r\\n                    if (ns.getOwnedAugmentations(true).length > ns.getOwnedAugmentations(false).length) {\\r\\n                        ns.installAugmentations(\\\"daemon.ns\\\");\\r\\n                    }   \\r\\n                }\\r\\n                \\r\\n                // and we don't own all of the augmentations already\\r\\n                for (var a in factionAugs) {\\r\\n                    var aug = factionAugs[a];\\r\\n                    // skip neuroflux, we don't want to work too hard for it.\\r\\n                    if (aug === neuroFlux) {\\r\\n                        continue;\\r\\n                    }\\r\\n                    if (!ns.getOwnedAugmentations(true).includes(aug)) {\\r\\n                        hasAllFactionAugs = false;\\r\\n                        var augCost = ns.getAugmentationCost(aug);\\r\\n                        var repCost = augCost[0];\\r\\n                        var cashCost = augCost[1];\\r\\n                        if (repCost <= ns.getFactionRep(faction.name)) {\\r\\n                            if (cashCost <= ns.getServerMoneyAvailable(\\\"home\\\")) {\\r\\n                                ns.purchaseAugmentation(faction.name, aug);\\r\\n                                ns.tprint(\\\"Purchasing aug from \\\" + faction.name + \\\": \\\" + aug);\\r\\n                            }\\r\\n                        } else {\\r\\n                            // we don't have enough rep for this faction so let's work until we do.\\r\\n                            // we skip this if our favor is high enough to donate.\\r\\n                            while (ns.getFactionRep(faction.name) < repCost && ns.getFactionFavor(faction.name) < 150) {\\r\\n                                ns.workForFaction(faction.name, \\\"hacking\\\");\\r\\n                                await ns.sleep(30000);\\r\\n                            }\\r\\n                            ns.stopAction();\\r\\n                        }\\r\\n                    } else {\\r\\n                        augsAlreadyInstalled = false;\\r\\n                    }\\r\\n                }\\r\\n                \\r\\n                // we have all the augs but they're not installed yet\\r\\n                if (hasAllFactionAugs && !augsAlreadyInstalled) {\\r\\n                    while (ns.getAugmentationCost(neuroFlux)[1] <= ns.getServerMoneyAvailable(\\\"home\\\") && ns.getAugmentationCost(neuroFlux)[0] <= ns.getFactionRep(faction.name)) {\\r\\n                        ns.purchaseAugmentation(faction.name, neuroFlux);\\r\\n                        ns.tprint(\\\"Purchasing aug from \\\" + faction.name + \\\": \\\" + neuroFlux);\\r\\n                        await ns.sleep(100);\\r\\n                    }\\r\\n                    if (ns.getOwnedAugmentations(true).length > ns.getOwnedAugmentations(false).length) {\\r\\n                        ns.installAugmentations(\\\"daemon.ns\\\");\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        await ns.sleep(1000);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getDesiredFactions(ns) {\\r\\n    var factionList = [\\r\\n        {name:\\\"Sector-12\\\"}, \\r\\n        {name:\\\"Netburners\\\"}, \\r\\n        {name:\\\"CyberSec\\\"}, \\r\\n        {name:\\\"NiteSec\\\"}, \\r\\n        {name:\\\"The Black Hand\\\"}, \\r\\n        {name:\\\"BitRunners\\\"}, \\r\\n        {name:\\\"Daedalus\\\"}\\r\\n    ];\\r\\n    return factionList;\\r\\n}\",\"filename\":\"aug-manager.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":34.45,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":57}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of farm-stats is to return a list of our server farm capabilities\\r\\n// it just prints a list of purchased servers, their value in money, and the ram they\\r\\n// are using vs the total ram available.\\r\\n\\r\\nconst ramCostConstant = 55000;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    var serverNameList = ns.getPurchasedServers();\\r\\n    ns.tprint(\\\"--==-- Server Farm Stats --==--\\\");\\r\\n    for (var s = 0; s < serverNameList.length; s++) {\\r\\n        var box = serverNameList[s];\\r\\n        var ram = ns.getServerRam(box);\\r\\n        var maxRam = ram[0];\\r\\n        var currentRam = ram[0] - ram[1];\\r\\n        var cost = maxRam * ramCostConstant;\\r\\n        ns.tprint(box + \\\" Ram: \\\" + currentRam + \\\" / \\\" + maxRam + \\\" --==-- Cost: $\\\" + cost);\\r\\n    }\\r\\n}\",\"filename\":\"farm-stats.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.95,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":58}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":59}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.js\",\"module\":\"\",\"dependencies\":[\"hack-target.js\"],\"ramUsage\":1.7,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":60}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of the host manager is to buy the best servers it can\\r\\n// until it thinks RAM is underutilized enough that you don't need to anymore.\\r\\n\\r\\n// the max server ram you can buy (it's a petabyte)\\r\\nconst maxPurchasedServerRam = 1048576;\\r\\n\\r\\n// the amount of money each gig costs when you buy a server.\\r\\nconst purchasedServerCostPerRam = 55000;\\r\\n\\r\\n// the max amount of server ram as an exponent (power of 2)\\r\\nconst maxPurchasedServerRamExponent = 20;\\r\\n\\r\\n// the max number of servers you can have in your farm\\r\\nconst maxPurchasedServers = 25;\\r\\n\\r\\nexport async function main(ns) {\\r\\n    while(true) {\\r\\n        tryToBuyBestServerPossible(ns);\\r\\n        await ns.sleep(200);\\r\\n    }\\r\\n}\\r\\n\\r\\n// buy a mess of servers\\r\\nasync function buyDaemonHosts(ns) {\\r\\n    while(tryToBuyBestServerPossible(ns) !== \\\"\\\") {\\r\\n        // NOOP\\r\\n        await ns.sleep(200);\\r\\n    } \\r\\n}\\r\\n\\r\\nfunction getMyMoney(ns) {\\r\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\n// attempts to buy a server at or better than your home machine.\\r\\nfunction tryToBuyBestServerPossible(ns) {\\r\\n    var currentMoney = getMyMoney(ns);    \\r\\n    var exponentLevel = 1;\\r\\n    while(Math.pow(2, exponentLevel + 1) * purchasedServerCostPerRam <= currentMoney && exponentLevel < maxPurchasedServerRamExponent) {\\r\\n        exponentLevel += 1;\\r\\n    }\\r\\n    \\r\\n    // if the server is crappier than home don't bother.\\r\\n    var maxRamPossibleToBuy = Math.pow(2, exponentLevel);\\r\\n    if (maxRamPossibleToBuy < ns.getServerRam(\\\"home\\\")[0] && maxRamPossibleToBuy < Math.pow(2, maxPurchasedServerRamExponent) ) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n    \\r\\n    // check to make sure we have room in our server farm.\\r\\n    var existingServers = ns.getPurchasedServers();\\r\\n      \\r\\n    // determine ram utilization rates\\r\\n    var homeUtilization = ns.getServerRam(\\\"home\\\");\\r\\n    var utilizationTotal = homeUtilization[1];\\r\\n    var ramMax = homeUtilization[0];\\r\\n    \\r\\n    // used to track the worst server in our list.\\r\\n    var worstServer = \\\"\\\";\\r\\n    \\r\\n    // arbitrarily the max value\\r\\n    var worstServerRam = Math.pow(2, maxPurchasedServerRamExponent);\\r\\n    \\r\\n    var isWorseThanExistingServer = false;\\r\\n    \\r\\n    // iterate over the server farm to see if there's any opportunity for improvement\\r\\n    for (var i = 0; i < existingServers.length; i++) {\\r\\n        var existingServer = existingServers[i];\\r\\n        \\r\\n        // track the worst server in the farm\\r\\n        var ramStats = ns.getServerRam(existingServer);\\r\\n        var existingServerRam = ramStats[0];\\r\\n        var utilization = ramStats[1];\\r\\n        utilizationTotal += utilization;\\r\\n        ramMax += existingServerRam;\\r\\n        if (existingServerRam < worstServerRam) {\\r\\n            worstServer = existingServer;\\r\\n            worstServerRam = existingServerRam;\\r\\n        }\\r\\n        \\r\\n        // if the server is crappier than an existing server don't bother.\\r\\n        if (maxRamPossibleToBuy < existingServerRam) {\\r\\n            isWorseThanExistingServer = true;\\r\\n        }\\r\\n    }   \\r\\n    \\r\\n    // analyze the utilization rates\\r\\n    var utilizationRate = utilizationTotal / ramMax;\\r\\n    \\r\\n    // hard coded ballpark, if we're over this percentage, consider us \\\"well utilized\\\".\\r\\n    var utilizationTarget = 0.5;\\r\\n    \\r\\n    // abort if utilization is below target. We probably don't need another server.\\r\\n    if (utilizationRate < utilizationTarget)\\r\\n        return \\\"\\\";\\r\\n    \\r\\n    // abort if we're trying to buy a sucky box.\\r\\n    if (isWorseThanExistingServer)\\r\\n        return \\\"\\\";\\r\\n    \\r\\n    // if we're at capacity, check to see if we're better than the worst server, then delete it.\\r\\n    if (existingServers.length >= maxPurchasedServers) {\\r\\n        var listOfScripts = ns.ps(worstServer);\\r\\n        if (listOfScripts.length === 0 && worstServerRam < maxRamPossibleToBuy) {\\r\\n            ns.deleteServer(worstServer);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    var cost = maxRamPossibleToBuy * purchasedServerCostPerRam;\\r\\n    \\r\\n    // you're too poor lol\\r\\n    if (currentMoney < cost)\\r\\n        return \\\"\\\";\\r\\n    \\r\\n    var purchasedServer = ns.purchaseServer(\\\"daemon\\\", maxRamPossibleToBuy);\\r\\n    \\r\\n    return purchasedServer;\\r\\n}\",\"filename\":\"host-manager.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":8.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":61}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of node-manager is to handle hacknet nodes for us\\r\\n// the primary reason for doing it at all is simply for netburner augs.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const hn = ns.hacknet;\\r\\n    var options = [\\\"level\\\", \\\"ram\\\", \\\"core\\\", \\\"node\\\"];\\r\\n    while(true) {\\r\\n        var maxNodes = hn.numNodes();\\r\\n        var needsNode = false;\\r\\n        if (maxNodes === 0) {\\r\\n            needsNode = true;\\r\\n            maxNodes = 1;\\r\\n        }\\r\\n        for (var i = 0; i < maxNodes; i++) {\\r\\n            for (var o = (needsNode ? 3 : 0); o < options.length; o++) {\\r\\n                var allowancePercentage = 0.00001;\\r\\n                var playerMoney = ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n                var costOfThing = 0;\\r\\n                switch(o) {\\r\\n                    case 0:\\r\\n                        costOfThing = hn.getLevelUpgradeCost(i, 1);\\r\\n                        break;\\r\\n                    case 1:\\r\\n                        costOfThing = hn.getRamUpgradeCost(i, 1);\\r\\n                        break;\\r\\n                    case 2:\\r\\n                        costOfThing = hn.getCoreUpgradeCost(i, 1);\\r\\n                        break;\\r\\n                    case 3:\\r\\n                        costOfThing = hn.getPurchaseNodeCost();\\r\\n                        break;\\r\\n                }\\r\\n                \\r\\n                var shouldPurchase = playerMoney * allowancePercentage >= costOfThing;\\r\\n                if (shouldPurchase) {\\r\\n                    switch(o) {\\r\\n                        case 0:\\r\\n                            hn.upgradeLevel(i, 1);\\r\\n                            break;\\r\\n                        case 1:\\r\\n                            hn.upgradeRam(i, 1);\\r\\n                            break;\\r\\n                        case 2:\\r\\n                            hn.upgradeCore(i, 1);\\r\\n                            break;\\r\\n                        case 3:\\r\\n                            hn.purchaseNode()\\r\\n                            break;\\r\\n                    }  \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(10);\\r\\n    }\\r\\n}\",\"filename\":\"node-manager.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":62}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of the program-manager is to buy all the programs\\r\\n// from the darkweb we can afford so we don't have to do it manually\\r\\n// or write them ourselves. Like tor-manager, this script dies a natural death\\r\\n// once all programs are bought.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const programNames = [\\\"BruteSSH.exe\\\", \\\"FTPCrack.exe\\\", \\\"relaySMTP.exe\\\", \\\"HTTPWorm.exe\\\", \\\"SQLInject.exe\\\", \\\"DeepscanV1.exe\\\", \\\"DeepscanV2.exe\\\", \\\"Autolink.exe\\\"];\\r\\n    const programCosts = [500000, 1500000, 5000000, 30000000, 250000000, 500000, 25000000, 1000000];\\r\\n    var hasAllPrograms = false;\\r\\n    while (true) {\\r\\n        if (hasAllPrograms) {\\r\\n            break;\\r\\n        }\\r\\n        if (!hasTor(ns)) {\\r\\n            await ns.sleep(2000);\\r\\n            continue;\\r\\n        }\\r\\n        var foundMissingProgram = false;\\r\\n        for (var i = 0; i < programNames.length; ++i) {\\r\\n            var prog = programNames[i];\\r\\n            if (hasProgram(ns, prog)) {\\r\\n                continue;\\r\\n            } else {\\r\\n                foundMissingProgram = true;\\r\\n            }\\r\\n            var cost = programCosts[i];\\r\\n            if (cost <= getPlayerMoney(ns)) {\\r\\n                ns.purchaseProgram(prog);\\r\\n            }\\r\\n        }\\r\\n        if (!foundMissingProgram) {\\r\\n            hasAllPrograms = true;\\r\\n        }\\r\\n        await ns.sleep(2000);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getPlayerMoney(ns) {\\r\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\nfunction hasProgram(ns, program) {\\r\\n    return ns.fileExists(program, \\\"home\\\");\\r\\n}\\r\\n\\r\\nfunction hasTor(ns) {\\r\\n    var homeNodes = ns.scan(\\\"home\\\");\\r\\n    return homeNodes.includes(\\\"darkweb\\\");\\r\\n}\",\"filename\":\"program-manager.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":63}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of ram-manager is simply to upgrade RAM on\\r\\n// the \\\"home\\\" machine ASAP whenever enough money is available.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    // this runs forever, it always runs. as long as utilization is high enough, we want more ram.\\r\\n    while (true) {\\r\\n        // if our utilization rates are below half, we don't necessarily need more RAM\\r\\n        if (ns.getUpgradeHomeRamCost() <= ns.getServerMoneyAvailable(\\\"home\\\")) {\\r\\n            ns.upgradeHomeRam();\\r\\n        }\\r\\n        await ns.sleep(2000);\\r\\n    }\\r\\n}\",\"filename\":\"ram-manager.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.2,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":64}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of tor-manager is to buy the TOR router ASAP\\r\\n// so that another script can buy the port breakers. This script\\r\\n// dies a natural death once tor is bought.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    const torCost = 200000;\\r\\n    var hasTorRouter = false;\\r\\n    while (true) {\\r\\n        if (hasTorRouter) {\\r\\n            break;\\r\\n        }\\r\\n        if (hasTor(ns)) {\\r\\n            hasTorRouter = true;\\r\\n        } else {\\r\\n            if (torCost <= getPlayerMoney(ns)) {\\r\\n                ns.purchaseTor();\\r\\n            }\\r\\n        }\\r\\n        await ns.sleep(200);\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction getPlayerMoney(ns) {\\r\\n    return ns.getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\nfunction hasTor(ns) {\\r\\n    var homeNodes = ns.scan(\\\"home\\\");\\r\\n    return homeNodes.includes(\\\"darkweb\\\");\\r\\n}\",\"filename\":\"tor-manager.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3.9,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":65}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.js\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":66}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// autocontract.ns v20190515 by /u/hyperpandiculation\\r\\n\\r\\nasync function solverArrayJumpingGame(ns, arrayData) {\\r\\n    await ns.sleep(1000);\\r\\n    ns.tprint(\\\"solverArrayJumpingGame()\\\");\\r\\n    let arrayJump = [1];\\r\\n\\r\\n    for (let n = 0; n < arrayData.length; n++) {\\r\\n        if (arrayJump[n]) {\\r\\n            for (let p = n; p <= Math.min(n + arrayData[n], arrayData.length-1); p++) { // fixed off-by-one error\\r\\n                arrayJump[p] = 1;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return 0 + Boolean(arrayJump[arrayData.length - 1]); // thanks /u/Kalumniatoris\\r\\n}\\r\\n\\r\\nasync function solverGenerateIPs(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverGenerateIPs()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let i, j, k, l;\\r\\n\\r\\n    let arrayDigits = [];\\r\\n    let arrayDelim = [];\\r\\n    for (i = 0; i < arrayData.length; i++) {\\r\\n        arrayDigits[i] = arrayData.substring(i, i + 1);\\r\\n        arrayDelim[i] = \\\"\\\";\\r\\n    }\\r\\n\\r\\n    let validCandidates = [];\\r\\n\\r\\n    for (i = 0; i < arrayData.length - 3; i++) {\\r\\n        for (j = i + 1; j < arrayData.length - 2; j++) {\\r\\n            for (k = j + 1; k < arrayData.length - 1; k++) {\\r\\n                let arrayDelimScratch = JSON.parse(JSON.stringify(arrayDelim));\\r\\n                arrayDelimScratch[i] = \\\".\\\";\\r\\n                arrayDelimScratch[j] = \\\".\\\";\\r\\n                arrayDelimScratch[k] = \\\".\\\";\\r\\n\\r\\n                let candidateAddress = \\\"\\\";\\r\\n                for (l = 0; l < arrayData.length; l++) {\\r\\n                    candidateAddress = candidateAddress + arrayDigits[l] + arrayDelimScratch[l];\\r\\n                }\\r\\n\\r\\n                let isValid = 1;\\r\\n                for (l = 0; l < 4; l++) {\\r\\n                    let tempOctet = candidateAddress.split(\\\".\\\")[l];\\r\\n                    if (tempOctet.slice(0, 1) === \\\"0\\\") { isValid = 0; }\\r\\n                    if (parseInt(tempOctet) > 255) { isValid = 0; }\\r\\n                }\\r\\n                if (isValid) {\\r\\n                    validCandidates[validCandidates.length] = candidateAddress;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let tempStr = JSON.stringify(validCandidates);\\r\\n    return tempStr.replace(/\\\\\\\"/g, '');\\r\\n}\\r\\n\\r\\nasync function solverLargestPrime(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverLargestPrime()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let primeFound = 0;\\r\\n\\r\\n    while (!primeFound) {\\r\\n        primeFound = 1;\\r\\n        for (let i = 2; i < Math.sqrt(arrayData); i++) {\\r\\n            if (!Boolean((arrayData / i) - Math.floor(arrayData / i))) {\\r\\n                arrayData = arrayData / i;\\r\\n                primeFound = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return arrayData;\\r\\n}\\r\\n\\r\\nasync function solverLargestSubset(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverLargestSubset()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let highestSubset = arrayData[0];\\r\\n\\r\\n    for (let i = 0; i < arrayData.length; i++) {\\r\\n\\r\\n        for (let j = i; j < arrayData.length; j++) {\\r\\n            let tempSubset = 0;\\r\\n            for (let k = i; k <= j; k++) {\\r\\n                tempSubset += arrayData[k];\\r\\n            }\\r\\n\\r\\n            if (highestSubset < tempSubset) {\\r\\n                highestSubset = tempSubset;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return highestSubset;\\r\\n}\\r\\n\\r\\nasync function solverMergeRanges(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverMergeRanges()\\\");\\r\\n    await ns.sleep(1000);\\r\\n\\r\\n    let i, j, k;\\r\\n    let rangeMax = 0;\\r\\n    let rangeMin = 999;\\r\\n    let outputRanges = [];\\r\\n\\r\\n    for (i = 0; i < arrayData.length; i++) {\\r\\n        rangeMin = Math.min(rangeMin, arrayData[i][0]);\\r\\n        rangeMax = Math.max(rangeMax, arrayData[i][1]);\\r\\n    }\\r\\n\\r\\n    let activeRange = 0;\\r\\n    let startRange, inRange;\\r\\n\\r\\n    for (i = rangeMin; i <= rangeMax + 1; i++) {\\r\\n        inRange = 0;\\r\\n\\r\\n        for (j = 0; j < arrayData.length; j++) {\\r\\n            if (i >= arrayData[j][0] && i < arrayData[j][1]) {\\r\\n                inRange = 1;\\r\\n\\r\\n                if (activeRange === 0) {\\r\\n                    activeRange = 1;\\r\\n                    startRange = i;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (activeRange === 1 && inRange === 0) {\\r\\n            activeRange = 0;\\r\\n            outputRanges[outputRanges.length] = [startRange, i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return JSON.stringify(outputRanges);\\r\\n}\\r\\n\\r\\nasync function solverSpiralizeMatrix(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverSpiralizeMatrix()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let i, j;\\r\\n\\r\\n    let arrayY = arrayData.length;\\r\\n    let arrayX = arrayData[0].length;\\r\\n\\r\\n    let loopCount = Math.ceil(arrayX / 2) + 1;\\r\\n    let marginData = [0, 1, 1, 0];\\r\\n\\r\\n    let resultData = [];\\r\\n\\r\\n    let lastWaypoint = [0, 0];\\r\\n\\r\\n    resultData[0] = arrayData[0][0];\\r\\n\\r\\n    for (i = 0; i < loopCount; i++) {\\r\\n        if (marginData[0] + marginData[2] <= arrayY && marginData[1] + marginData[3] <= arrayX) {\\r\\n            for (j = lastWaypoint[1] + 1; j <= arrayX - marginData[1]; j++) {\\r\\n                resultData[resultData.length] = arrayData[lastWaypoint[0]][j];\\r\\n            }\\r\\n\\r\\n            lastWaypoint = [0 + marginData[0], arrayX - marginData[1]];\\r\\n            marginData[0] += 1;\\r\\n        }\\r\\n        if (marginData[0] + marginData[2] <= arrayY && marginData[1] + marginData[3] <= arrayX) {\\r\\n            for (j = lastWaypoint[0] + 1; j <= arrayY - marginData[2]; j++) {\\r\\n                resultData[resultData.length] = arrayData[j][lastWaypoint[1]];\\r\\n            }\\r\\n\\r\\n            lastWaypoint = [arrayY - marginData[2], arrayX - marginData[1]];\\r\\n            marginData[1] += 1;\\r\\n        }\\r\\n        if (marginData[0] + marginData[2] <= arrayY && marginData[1] + marginData[3] <= arrayX) {\\r\\n            for (j = lastWaypoint[1] - 1; j >= 0 + marginData[3]; j--) {\\r\\n                resultData[resultData.length] = arrayData[lastWaypoint[0]][j];\\r\\n            }\\r\\n\\r\\n            lastWaypoint = [arrayY - marginData[2], 0 + marginData[3]];\\r\\n            marginData[2] += 1;\\r\\n        }\\r\\n        if (marginData[0] + marginData[2] <= arrayY && marginData[1] + marginData[3] <= arrayX) {\\r\\n            for (j = lastWaypoint[0] - 1; j >= 0 + marginData[0]; j--) {\\r\\n                resultData[resultData.length] = arrayData[j][lastWaypoint[1]];\\r\\n            }\\r\\n\\r\\n            lastWaypoint = [0 + marginData[0], 0 + marginData[3]];\\r\\n            marginData[3] += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return JSON.stringify(resultData);\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\nasync function solverStockTrader(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverStockTrader()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    \\r\\n    let i, j, k;\\r\\n\\r\\n    let tempStr = \\\"[0\\\";\\r\\n    for (i = 0; i < arrayData[1].length; i++) {\\r\\n        tempStr += \\\",0\\\";\\r\\n    }\\r\\n    tempStr += \\\"]\\\";\\r\\n    let tempArr = \\\"[\\\" + tempStr;\\r\\n    for (i = 0; i < arrayData[0] - 1; i++) {\\r\\n        tempArr += \\\",\\\" + tempStr;\\r\\n    }\\r\\n    tempArr += \\\"]\\\";\\r\\n\\r\\n    let highestProfit = JSON.parse(tempArr);\\r\\n\\r\\n    for (i = 0; i < arrayData[0]; i++) {\\r\\n        for (j = 0; j < arrayData[1].length; j++) { // Buy / Start\\r\\n            for (k = j; k < arrayData[1].length; k++) { // Sell / End\\r\\n                if (i > 0 && j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], highestProfit[i - 1][j - 1] + arrayData[1][k] - arrayData[1][j]);\\r\\n                } else if (i > 0 && j > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i - 1][j - 1] + arrayData[1][k] - arrayData[1][j]);\\r\\n                } else if (i > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i - 1][k], highestProfit[i][k - 1], arrayData[1][k] - arrayData[1][j]);\\r\\n                } else if (j > 0 && k > 0) {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], highestProfit[i][k - 1], arrayData[1][k] - arrayData[1][j]);\\r\\n                } else {\\r\\n                    highestProfit[i][k] = Math.max(highestProfit[i][k], arrayData[1][k] - arrayData[1][j]);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    return highestProfit[arrayData[0] - 1][arrayData[1].length - 1];\\r\\n}\\r\\n\\r\\nasync function solverTrianglePath(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverTrianglePath()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let i, j;\\r\\n\\r\\n    for (i = 1; i < arrayData.length; i++) {\\r\\n        for (j = 0; j < arrayData[i].length; j++) {\\r\\n            arrayData[i][j] += Math.min(arrayData[i - 1][Math.max(0, j - 1)], arrayData[i - 1][Math.min(j, arrayData[i - 1].length - 1)]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    let finalRow = arrayData[arrayData.length - 1];\\r\\n    let finalMinimum = 999;\\r\\n    for (i = 0; i < finalRow.length; i++) {\\r\\n        finalMinimum = Math.min(finalMinimum, finalRow[i]);\\r\\n    }\\r\\n\\r\\n    return finalMinimum;\\r\\n}\\r\\n\\r\\nasync function solverUniquePaths(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverUniquePaths()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    //let precalcFactorial = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000];\\r\\n\\r\\n    //if (arrayData === undefined || arrayData === null) {\\r\\n    //    return 1;\\r\\n    //}\\r\\n\\r\\n    //let factN = precalcFactorial[arrayData[0] + arrayData[1] - 2];\\r\\n    //let factK = precalcFactorial[arrayData[0] - 1];\\r\\n    //let factNK = precalcFactorial[arrayData[1] - 1];\\r\\n    //\\r\\n\\r\\n    let k = arrayData[0] - 1; // k\\r\\n    let ak = arrayData[1] - 1; // n-k\\r\\n    let n = k + ak; // n = k + (n-k);\\r\\n\\r\\n    // n choose k = n!/[(k)!(n-k)!] = n! / k! / (n-k)!\\r\\n\\r\\n    let i;\\r\\n    let factN = 1,\\r\\n        factAK = 1;\\r\\n\\r\\n    for (i = n; i > k; i--) { // n!/k! = n * n-1 * n-2 ... k+1\\r\\n        factN = factN * i;\\r\\n    }\\r\\n    for (i = ak; i > 1; i--) {\\r\\n        factAK = factAK * i;\\r\\n    }\\r\\n\\r\\n    return (factN / factAK);\\r\\n}\\r\\n\\r\\nasync function solverUniquePathsII(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverUniquePathsII()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let i, j, k;\\r\\n    let pathsTo = [];\\r\\n    for (i = 0; i < arrayData.length; i++) {\\r\\n        pathsTo[i] = [];\\r\\n        for (j = 0; j < arrayData[0].length; j++) {\\r\\n            pathsTo[i][j] = 0;\\r\\n        }\\r\\n    }\\r\\n    pathsTo[0][0] = 1;\\r\\n\\r\\n    for (i = 0; i < arrayData.length; i++) {\\r\\n        for (j = 0; j < arrayData[0].length; j++) {\\r\\n            if (i > 0 && j > 0 && !arrayData[i][j]) {\\r\\n                pathsTo[i][j] = pathsTo[i][j - 1] + pathsTo[i - 1][j];\\r\\n            } else if (i > 0 && !arrayData[i][j]) {\\r\\n                pathsTo[i][j] = pathsTo[i - 1][j];\\r\\n            } else if (j > 0 && !arrayData[i][j]) {\\r\\n                pathsTo[i][j] = pathsTo[i][j - 1];\\r\\n            } else if (i === 0 && j === 0 && !arrayData[i][j]) {\\r\\n                pathsTo[0][0] = 1;\\r\\n            } else {\\r\\n                pathsTo[i][j] = 0;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return pathsTo[pathsTo.length - 1][pathsTo[0].length - 1];\\r\\n}\\r\\n\\r\\nasync function solverWaysToExpress(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverWaysToExpress()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let i, j, k;\\r\\n\\r\\n    let operatorList = [\\\"\\\", \\\"+\\\", \\\"-\\\", \\\"*\\\"];\\r\\n    let validExpressions = [];\\r\\n\\r\\n    let tempPermutations = Math.pow(4, (arrayData[0].length - 1));\\r\\n\\r\\n    for (i = 0; i < tempPermutations; i++) {\\r\\n\\r\\n        if (!Boolean(i % 100000)) {\\r\\n            ns.tprint(i + \\\"/\\\" + tempPermutations + \\\", \\\" + validExpressions.length + \\\" found.\\\");\\r\\n            await ns.sleep(100);\\r\\n        }\\r\\n\\r\\n        let arraySummands = [];\\r\\n        let candidateExpression = arrayData[0].substr(0, 1);\\r\\n        arraySummands[0] = parseInt(arrayData[0].substr(0, 1));\\r\\n\\r\\n        for (j = 1; j < arrayData[0].length; j++) {\\r\\n            candidateExpression += operatorList[(i >> ((j - 1) * 2)) % 4] + arrayData[0].substr(j, 1);\\r\\n\\r\\n            let rollingOperator = operatorList[(i >> ((j - 1) * 2)) % 4];\\r\\n            let rollingOperand = parseInt(arrayData[0].substr(j, 1));\\r\\n\\r\\n            switch (rollingOperator) {\\r\\n                case \\\"\\\":\\r\\n                    rollingOperand = rollingOperand * (arraySummands[arraySummands.length - 1] / Math.abs(arraySummands[arraySummands.length - 1]));\\r\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * 10 + rollingOperand;\\r\\n                    break;\\r\\n                case \\\"+\\\":\\r\\n                    arraySummands[arraySummands.length] = rollingOperand;\\r\\n                    break;\\r\\n                case \\\"-\\\":\\r\\n                    arraySummands[arraySummands.length] = 0 - rollingOperand;\\r\\n                    break;\\r\\n                case \\\"*\\\":\\r\\n                    while (j < arrayData[0].length - 1 && ((i >> (j * 2)) % 4) === 0) {\\r\\n                        j += 1;\\r\\n                        candidateExpression += arrayData[0].substr(j, 1);\\r\\n                        rollingOperand = rollingOperand * 10 + parseInt(arrayData[0].substr(j, 1));\\r\\n                    }\\r\\n                    arraySummands[arraySummands.length - 1] = arraySummands[arraySummands.length - 1] * rollingOperand;\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        let rollingTotal = arraySummands.reduce(function(a, b) { return a + b; });\\r\\n\\r\\n        //if(arrayData[1] == eval(candidateExpression)){\\r\\n        if (arrayData[1] === rollingTotal) {\\r\\n            validExpressions[validExpressions.length] = candidateExpression;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    return JSON.stringify(validExpressions);\\r\\n}\\r\\n\\r\\nasync function solverWaysToSum(ns, arrayData) {\\r\\n    ns.tprint(\\\"solverWaysToSum()\\\");\\r\\n    await ns.sleep(1000);\\r\\n    let precalcPartitions = [0, 0, 1, 2, 4, 6, 10, 14, 21, 29, 41, 55, 76, 100, 134, 175, 230, 296, 384, 489, 626, 791, 1001, 1254, 1574, 1957, 2435, 3009, 3717, 4564, 5603, 6841, 8348, 10142, 12309, 14882, 17976, 21636, 26014, 31184, 37337, 44582, 53173, 63260, 75174, 89133, 105557, 124753, 147272, 173524, 204225, 239942, 281588, 329930, 386154, 451275, 526822, 614153, 715219, 831819, 966466, 1121504, 1300155, 1505498, 1741629, 2012557, 2323519, 2679688, 3087734, 3554344, 4087967, 4697204, 5392782, 6185688, 7089499, 8118263, 9289090, 10619862, 12132163, 13848649, 15796475, 18004326, 20506254, 23338468, 26543659, 30167356, 34262961, 38887672, 44108108, 49995924, 56634172, 64112358, 72533806, 82010176, 92669719, 104651418, 118114303, 133230929, 150198135, 169229874, 190569291, 214481125, 241265378, 271248949, 304801364, 342325708, 384276335, 431149388, 483502843, 541946239, 607163745, 679903202, 761002155, 851376627, 952050664, 1064144450, 1188908247, 1327710075, 1482074142, 1653668664, 1844349559, 2056148050, 2291320911, 2552338240, 2841940499, 3163127351, 3519222691, 3913864294, 4351078599, 4835271869, 5371315399, 5964539503, 6620830888, 7346629511, 8149040694, 9035836075, 10015581679, 11097645015, 12292341830, 13610949894, 15065878134, 16670689207, 18440293319, 20390982756, 22540654444, 24908858008, 27517052598, 30388671977, 33549419496, 37027355199];\\r\\n\\r\\n    return precalcPartitions[arrayData];\\r\\n}\\r\\n\\r\\nexport async function main(ns) {\\r\\n    let listServers = [\\\"home\\\"];\\r\\n    let listIndex = 0;\\r\\n\\r\\n    while (listIndex < listServers.length) {\\r\\n        await ns.sleep(250);\\r\\n        let listScan = ns.scan(listServers[listIndex], true);\\r\\n        for (let i = 0; i < listScan.length; i++) {\\r\\n            if (listServers.indexOf(listScan[i]) === -1) {\\r\\n                listServers[listServers.length] = listScan[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        listIndex += 1;\\r\\n    }\\r\\n    ns.tprint(\\\"Completed server probe; now solving contracts\\\");\\r\\n\\r\\n    while (true) {\\r\\n        await ns.sleep(1000);\\r\\n\\r\\n        listIndex = (listIndex + 1) % listServers.length;\\r\\n\\r\\n        let listFiles = ns.ls(listServers[listIndex], \\\".cct\\\");\\r\\n\\r\\n        for (let z = 0; z < listFiles.length; z++) {\\r\\n            let inputData = ns.codingcontract.getData(listFiles[z], listServers[listIndex]);\\r\\n            let inputType = ns.codingcontract.getContractType(listFiles[z], listServers[listIndex]);\\r\\n            let outputData;\\r\\n            let outputResult = null;\\r\\n\\r\\n            switch (inputType) {\\r\\n                case \\\"Algorithmic Stock Trader I\\\":\\r\\n                    if(inputData.length > 1){\\r\\n                        outputData = await solverStockTrader(ns, [1, inputData]);    \\r\\n                    } else {\\r\\n                        outputData = 0;\\r\\n                    }\\r\\n                    \\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Algorithmic Stock Trader II\\\":\\r\\n                    if(inputData.length > 1){\\r\\n                        outputData = await solverStockTrader(ns, [Math.floor(inputData.length / 2), inputData]);\\r\\n                    } else {\\r\\n                        outputData = 0;\\r\\n                    }\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Algorithmic Stock Trader III\\\":\\r\\n                    if(inputData.length > 1){\\r\\n                        outputData = await solverStockTrader(ns, [2, inputData]);\\r\\n                    } else {\\r\\n                        outputData = 0;\\r\\n                    }\\r\\n                    \\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Algorithmic Stock Trader IV\\\":\\r\\n                    outputData = await solverStockTrader(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Array Jumping Game\\\":\\r\\n                    outputData = await solverArrayJumpingGame(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Find All Valid Math Expressions\\\":\\r\\n                    outputData = await solverWaysToExpress(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Find Largest Prime Factor\\\":\\r\\n                    outputData = await solverLargestPrime(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Generate IP Addresses\\\":\\r\\n                    outputData = await solverGenerateIPs(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Merge Overlapping Intervals\\\":\\r\\n                    outputData = await solverMergeRanges(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Minimum Path Sum in a Triangle\\\":\\r\\n                    outputData = await solverTrianglePath(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Spiralize Matrix\\\":\\r\\n                    outputData = await solverSpiralizeMatrix(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Subarray with Maximum Sum\\\":\\r\\n                    outputData = await solverLargestSubset(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Total Ways to Sum\\\":\\r\\n                    outputData = await solverWaysToSum(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Unique Paths in a Grid I\\\":\\r\\n                    outputData = await solverUniquePaths(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                case \\\"Unique Paths in a Grid II\\\":\\r\\n                    outputData = await solverUniquePathsII(ns, inputData);\\r\\n                    outputResult = ns.codingcontract.attempt(outputData, listFiles[z], listServers[listIndex]);\\r\\n\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        outputData,\\r\\n                        outputResult\\r\\n                    ]);\\r\\n                    if (!outputResult) {\\r\\n                        ns.tprint(\\\"Failed data for debug: \\\" + JSON.stringify(inputData));\\r\\n                    }\\r\\n                    break;\\r\\n                default:\\r\\n                    ns.tprint([listServers[listIndex],\\r\\n                        listFiles[z],\\r\\n                        inputType,\\r\\n                        \\\"NO SOLVER YET\\\"\\r\\n                    ]);\\r\\n                    break;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"filename\":\"autocontract.ns\",\"module\":\"\",\"dependencies\":[\"autocontract.ns\"],\"ramUsage\":22,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":67}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function monkeyPatchJsPlumb(container) {\\n    if (!globalThis.originalGetInstance) {\\n        globalThis.originalGetInstance = jsPlumb.getInstance;\\n    }\\n    jsPlumb.getInstance = (arg) => {\\n        if (!container.capturedInstance) {\\n            container.capturedInstance = globalThis.originalGetInstance(arg);\\n        }\\n        return container.capturedInstance;\\n    };\\n}\\nexport async function main(ns) {\\n    ns.disableLog(\\\"ALL\\\");\\n    try {\\n        let consecutiveLosses = 0;\\n        while (consecutiveLosses < 3) {\\n            const victory = await mainNoTry(ns, ns.args[0]);\\n            if (victory) {\\n                consecutiveLosses = 0;\\n            }\\n            else {\\n                ++consecutiveLosses;\\n            }\\n        }\\n    }\\n    catch (e) {\\n        // While we're in hacking missions, sometimes our exceptions don't get reported?\\n        console.error(e);\\n        throw e;\\n    }\\n    finally {\\n        // Restore JSPlumb to its original state, so we can play the game manually if we want.\\n        jsPlumb.getInstance = globalThis.originalGetInstance;\\n    }\\n}\\nasync function mainNoTry(ns, faction) {\\n    // Before starting the mission, we need to monkey-patch jsplumb so that we can get a handle\\n    // to the instance. This instance is used to make connections between nodes.\\n    let container = { capturedInstance: null };\\n    monkeyPatchJsPlumb(container);\\n    let board;\\n    do {\\n        container.capturedInstance = null;\\n        startMission(faction);\\n        if (!container.capturedInstance) {\\n            throw new Error(\\\"Unable to grab jsplumb instance.\\\");\\n        }\\n        board = readBoard();\\n    } while (!goodBoard(board));\\n    let buttons = getButtons();\\n    const hackingMissionState = {\\n        ns: ns,\\n        board: board,\\n        overallStats: getOverallStats(),\\n        currentPath: null,\\n        buttons: buttons,\\n        jsp: container.capturedInstance,\\n    };\\n    if (true) {\\n        await solveGame(ns, hackingMissionState);\\n        const dbox = document.querySelector(\\\"div.dialog-box-content\\\");\\n        return dbox && dbox.innerText.includes(\\\"Mission won!\\\");\\n    }\\n    else {\\n        await debugGame(ns, hackingMissionState);\\n        return false;\\n    }\\n}\\nfunction goodBoard(board) {\\n    const seen = new Set();\\n    // Starting from one of our CPU nodes (which are always adjacent and always start\\n    // in the top left?) how many transfer nodes can we find without going through any\\n    // other type of node.\\n    const queue = [board.get(0, 0)];\\n    let count = 0;\\n    while (queue.length > 0) {\\n        const ge = queue.pop();\\n        if (ge.type == NodeType.Transfer)\\n            ++count;\\n        if (ge.type == NodeType.Transfer || ge.owner == NodeOwner.Me) {\\n            for (const neighbor of board.neighbors(ge)) {\\n                if (seen.has(neighbor))\\n                    continue;\\n                seen.add(neighbor);\\n                queue.push(neighbor);\\n            }\\n        }\\n    }\\n    let numOwnCpus = board.data.reduce((a, n) => a + ((n.type == NodeType.Core && n.owner == NodeOwner.Me) ? 1 : 0), 0);\\n    return count >= numOwnCpus + 1;\\n}\\nfunction isGameRunning() {\\n    return document.querySelector(\\\"#hacking-mission-player-stats\\\") != null;\\n}\\nfunction startMission(faction) {\\n    // Try to cancel any currently running mission.\\n    const forfeitButton = Array.from(document.querySelectorAll(\\\"#mission-container > a\\\")).find(el => el.innerText == \\\"Forfeit Mission (Exit)\\\");\\n    if (forfeitButton) {\\n        forfeitButton.click();\\n    }\\n    // Go to the faction menu.\\n    document.querySelectorAll(\\\"#factions-menu-link\\\")[0].click();\\n    const thisFactionButton = Array.from(document.querySelectorAll(\\\"#factions-container > ul > a\\\")).\\n        find(n => n.innerText == faction);\\n    if (!thisFactionButton)\\n        throw new Error(\\\"not member of faction: \\\" + faction);\\n    thisFactionButton.click();\\n    const hackingMissionButton = Array.from(document.querySelectorAll(\\\".faction-work-div > div > button\\\")).\\n        find(el => el.innerText == \\\"Hacking Mission\\\");\\n    ;\\n    if (!hackingMissionButton)\\n        throw new Error(\\\"hacking missions not available for faction \\\" + faction);\\n    hackingMissionButton.click();\\n    document.getElementById(\\\"hack-mission-start-btn\\\").click();\\n}\\nasync function solveGame(ns, h) {\\n    while (isGameRunning()) {\\n        doGameStep(h);\\n        await ns.sleep(250);\\n    }\\n}\\nasync function debugGame(ns, h) {\\n    await ns.sleep(10000);\\n    while (isGameRunning()) {\\n        h.board.update(h.jsp);\\n        console.info(h.board.clone());\\n        await ns.sleep(30000);\\n    }\\n}\\nfunction fortifyEffect(h) {\\n    return 0.9 * h.ns.getHackingLevel() / 130;\\n}\\nfunction overflowEffect(h) {\\n    return 0.95 * h.ns.getHackingLevel() / 130;\\n}\\nclass Path {\\n    constructor(route) {\\n        this.route = route;\\n    }\\n    get destination() {\\n        return this.route[this.route.length - 1];\\n    }\\n    get next() {\\n        return this.route.find(ge => ge.owner != NodeOwner.Me) || null;\\n    }\\n}\\nfunction doGameStep(h) {\\n    h.board.update(h.jsp);\\n    h.overallStats = getOverallStats();\\n    handleTransferAndShield(h);\\n    const hackingPredicates = getHackingPredicates(h);\\n    const highestPriorityOnBoard = h.board.data.map(ge => getHackingPriority(ge, hackingPredicates)).reduce((a, n) => n < a ? n : a, Infinity);\\n    const currentPathPriority = (h.currentPath && h.currentPath.next) ?\\n        getHackingPriority(h.currentPath.destination, hackingPredicates) :\\n        Infinity;\\n    if (highestPriorityOnBoard < currentPathPriority) {\\n        h.currentPath = pickTarget(h, hackingPredicates);\\n    }\\n    if (!h.currentPath.next) {\\n        throw new Error(\\\"no unowned elements in selected path\\\");\\n    }\\n    // Decide what we're gonna do with our CPUs. If our attack is less than twice the enemy defense,\\n    // we'll get more transfer nodes. Otherwise, we'll hack toward the enemy. Note that we don't\\n    // change targets once we have them.\\n    for (const core of h.board.data.filter(n => n.type == NodeType.Core && n.owner == NodeOwner.Me)) {\\n        // Check if the current target is the best thing we could be doing on the board. If not, disconnect\\n        // from it.\\n        if (core.connectionTarget && core.connectionTarget != h.currentPath.next) {\\n            core.node.click();\\n            h.buttons.drop.click();\\n            core.connectionTarget.myTarget--;\\n            core.connectionTarget = null;\\n        }\\n        // Connect to the best hacking target on the board.\\n        if (!core.connectionTarget) {\\n            core.connectionTarget = h.currentPath.next;\\n            h.jsp.connect({ source: core.node, target: core.connectionTarget.node });\\n            core.connectionTarget = core.connectionTarget;\\n            core.connectionTarget.myTarget++;\\n        }\\n        if (core.def > 2 * overflowEffect(h)) {\\n            // Treat the core like a transfer node until we have enough to hack something nearby.\\n            handleTransferNode(h, core);\\n            continue;\\n        }\\n        const target = core.connectionTarget;\\n        const effectiveDef = target.owner == NodeOwner.Enemy ? h.overallStats.enemy.def : target.def;\\n        // We scan longer before attacking the node if it's owned by the enemy.\\n        const shouldAttack = target.def < 10 || effectiveDef < 0.75 * h.overallStats.me.atk;\\n        if (shouldAttack && core.action != NodeAction.Attacking) {\\n            core.node.click();\\n            h.buttons.attack.click();\\n        }\\n        else if (!shouldAttack && core.action != NodeAction.Scanning) {\\n            core.node.click();\\n            h.buttons.scan.click();\\n        }\\n    }\\n}\\nfunction getHackingPredicates(h) {\\n    const predicates = [];\\n    // First priority is hacking databases if we have the strength.\\n    if (h.overallStats.enemy.def < .8 * h.overallStats.me.atk) {\\n        predicates.push(ge => ge.owner == NodeOwner.Enemy && ge.type == NodeType.Database);\\n    }\\n    // Gobble up neutral transfers.\\n    predicates.push(ge => ge.owner == NodeOwner.Neutral && ge.type == NodeType.Transfer);\\n    // Seal in the enemy to prevent expansion.\\n    predicates.push(ge => {\\n        if (ge.owner != NodeOwner.Neutral)\\n            return false;\\n        for (const neighbor of h.board.neighbors(ge)) {\\n            // We'll count the node as being owned by the enemy if it is actually owned or if it is targetted.\\n            if (neighbor.owner == NodeOwner.Enemy || neighbor.enemyTarget > 0)\\n                return true;\\n        }\\n        return false;\\n    });\\n    // Destroy the enemy's defense.\\n    predicates.push(ge => ge.owner == NodeOwner.Enemy && ge.type == NodeType.Shield);\\n    // Destroy enemy transfers or CPUs.\\n    predicates.push(ge => ge.owner == NodeOwner.Enemy && (ge.type == NodeType.Transfer || ge.type == NodeType.Core));\\n    // Destroy any enemy node.\\n    predicates.push(ge => ge.owner == NodeOwner.Enemy);\\n    return predicates;\\n}\\n// Return the priority level of this grid element within the list of hacking predicates.\\n// If it matches none of the predicates return Infinity. Lower priorities are better.\\nfunction getHackingPriority(ge, predicates) {\\n    const matchingPredicateIndex = predicates.findIndex(p => p(ge));\\n    if (matchingPredicateIndex == -1)\\n        return Infinity;\\n    return matchingPredicateIndex;\\n}\\nfunction pickTarget(h, predicates) {\\n    for (const p of predicates) {\\n        const target = h.board.findStepOnClosestRoute(h.overallStats.enemy.def, p);\\n        if (target)\\n            return target;\\n    }\\n    throw new Error(\\\"There are no possible targets!\\\");\\n}\\nfunction handleTransferAndShield(h) {\\n    for (const node of h.board.data) {\\n        if (node.owner != NodeOwner.Me)\\n            continue;\\n        if (node.type == NodeType.Shield && node.action != NodeAction.Fortifying) {\\n            node.node.click();\\n            h.buttons.fortify.click();\\n        }\\n        if (node.type == NodeType.Transfer) {\\n            handleTransferNode(h, node);\\n        }\\n    }\\n}\\nfunction handleTransferNode(h, node) {\\n    if ((node.action != NodeAction.Overflowing && node.action != NodeAction.Fortifying) ||\\n        (node.def > 4 * fortifyEffect(h) && node.action != NodeAction.Overflowing)) {\\n        node.node.click();\\n        h.buttons.overflow.click();\\n    }\\n    else if (node.def < 2 * overflowEffect(h) && node.action != NodeAction.Fortifying) {\\n        node.node.click();\\n        h.buttons.fortify.click();\\n    }\\n}\\nconst statsRe = /(?:Player|Enemy) Attack: ((?:[.,]|\\\\d)+)\\\\s*(?:Player|Enemy) Defense: ((?:[.,]|\\\\d)+)/m;\\nfunction parseStats(statsNode) {\\n    let match = statsRe.exec(statsNode.innerText);\\n    if (!match)\\n        throw new Error(\\\"Expected match on node text: \\\" + statsNode.innerText);\\n    return { atk: parseCommaNumber(match[1]), def: parseCommaNumber(match[2]) };\\n}\\nfunction getOverallStats() {\\n    return {\\n        me: parseStats(document.querySelector(\\\"#hacking-mission-player-stats\\\")),\\n        enemy: parseStats(document.querySelector(\\\"#hacking-mission-enemy-stats\\\"))\\n    };\\n}\\nfunction getButtons() {\\n    let overflow;\\n    let fortify;\\n    let attack;\\n    let scan;\\n    let drop;\\n    for (const node of document.querySelectorAll(\\\"span.hack-mission-action-buttons-container > a\\\")) {\\n        if (node.innerText.startsWith(\\\"Overflow(r)\\\")) {\\n            overflow = node;\\n        }\\n        else if (node.innerText.startsWith(\\\"Scan(s)\\\")) {\\n            scan = node;\\n        }\\n        else if (node.innerText.startsWith(\\\"Attack(a)\\\")) {\\n            attack = node;\\n        }\\n        else if (node.innerText.startsWith(\\\"Fortify(f)\\\")) {\\n            fortify = node;\\n        }\\n        else if (node.innerText.startsWith(\\\"Drop Connection(d)\\\")) {\\n            drop = node;\\n        }\\n    }\\n    return { overflow: overflow, scan: scan, attack: attack, fortify: fortify, drop: drop };\\n}\\nvar NodeType;\\n(function (NodeType) {\\n    NodeType[NodeType[\\\"Core\\\"] = 1] = \\\"Core\\\";\\n    NodeType[NodeType[\\\"Spam\\\"] = 2] = \\\"Spam\\\";\\n    NodeType[NodeType[\\\"Shield\\\"] = 3] = \\\"Shield\\\";\\n    NodeType[NodeType[\\\"Transfer\\\"] = 4] = \\\"Transfer\\\";\\n    NodeType[NodeType[\\\"Database\\\"] = 5] = \\\"Database\\\";\\n    NodeType[NodeType[\\\"Firewall\\\"] = 6] = \\\"Firewall\\\";\\n})(NodeType || (NodeType = {}));\\nfunction nodeTypeFromName(name) {\\n    switch (name) {\\n        case \\\"CPU Core\\\":\\n            return NodeType.Core;\\n        case \\\"Spam\\\":\\n            return NodeType.Spam;\\n        case \\\"Shield\\\":\\n            return NodeType.Shield;\\n        case \\\"Transfer\\\":\\n            return NodeType.Transfer;\\n        case \\\"Database\\\":\\n            return NodeType.Database;\\n        case \\\"Firewall\\\":\\n            return NodeType.Firewall;\\n        default:\\n            throw new Error(\\\"Unsupported type: \\\" + name);\\n    }\\n}\\nvar NodeOwner;\\n(function (NodeOwner) {\\n    NodeOwner[NodeOwner[\\\"Me\\\"] = 1] = \\\"Me\\\";\\n    NodeOwner[NodeOwner[\\\"Enemy\\\"] = 2] = \\\"Enemy\\\";\\n    NodeOwner[NodeOwner[\\\"Neutral\\\"] = 3] = \\\"Neutral\\\";\\n})(NodeOwner || (NodeOwner = {}));\\nfunction nodeOwnerFromClass(nodeClass) {\\n    if (nodeClass.indexOf(\\\"player\\\") != -1)\\n        return NodeOwner.Me;\\n    if (nodeClass.indexOf(\\\"enemy\\\") != -1)\\n        return NodeOwner.Enemy;\\n    return NodeOwner.Neutral;\\n}\\nvar NodeAction;\\n(function (NodeAction) {\\n    NodeAction[NodeAction[\\\"Inactive\\\"] = 0] = \\\"Inactive\\\";\\n    NodeAction[NodeAction[\\\"Overflowing\\\"] = 1] = \\\"Overflowing\\\";\\n    NodeAction[NodeAction[\\\"Scanning\\\"] = 2] = \\\"Scanning\\\";\\n    NodeAction[NodeAction[\\\"Attacking\\\"] = 3] = \\\"Attacking\\\";\\n    NodeAction[NodeAction[\\\"Fortifying\\\"] = 4] = \\\"Fortifying\\\";\\n    NodeAction[NodeAction[\\\"Weakening\\\"] = 5] = \\\"Weakening\\\";\\n})(NodeAction || (NodeAction = {}));\\nfunction parseNodeAction(s) {\\n    switch (s) {\\n        case \\\"Overflowing\\\": return NodeAction.Overflowing;\\n        case \\\"Scanning\\\": return NodeAction.Scanning;\\n        case \\\"Attacking\\\": return NodeAction.Attacking;\\n        case \\\"Fortifying\\\": return NodeAction.Fortifying;\\n        case \\\"Weakening\\\": return NodeAction.Weakening;\\n        default: return NodeAction.Inactive;\\n    }\\n}\\nfunction parseCommaNumber(s) {\\n    return parseFloat(s.replace(\\\",\\\", \\\"\\\"));\\n}\\nconst nodeIdRe = /^.*-(\\\\d+)-(\\\\d+)$/;\\nconst nodeTextRe = /^((?:CPU Core)|\\\\w+)\\\\s*HP: ((?:[.,]|\\\\d)+)\\\\s*Atk: ((?:[.,]|\\\\d)+)\\\\s*Def: ((?:[.,]|\\\\d)+)\\\\s*(\\\\w*)$/m;\\nclass GridElement {\\n    constructor(node) {\\n        this.node = node;\\n        this.myTarget = 0;\\n        this.enemyTarget = 0;\\n        this.connectionTarget = null;\\n        this.update();\\n    }\\n    update() {\\n        const idMatch = nodeIdRe.exec(this.node.id);\\n        if (!idMatch) {\\n            throw new Error(`Expected match from ${this.node.id} with ${nodeIdRe}`);\\n        }\\n        this.y = parseInt(idMatch[1]);\\n        this.x = parseInt(idMatch[2]);\\n        this.owner = nodeOwnerFromClass(this.node.className);\\n        const textMatch = nodeTextRe.exec(this.node.innerText);\\n        if (!textMatch) {\\n            throw new Error(`Expected match from ${this.node.innerText} with ${nodeTextRe}`);\\n        }\\n        this.type = nodeTypeFromName(textMatch[1]);\\n        this.hp = parseCommaNumber(textMatch[2].replace(\\\",\\\", \\\"\\\"));\\n        this.atk = parseCommaNumber(textMatch[3]);\\n        this.def = parseCommaNumber(textMatch[4]);\\n        this.action = parseNodeAction(textMatch[5]);\\n    }\\n    clone() {\\n        const c = new GridElement(this.node);\\n        Object.assign(c, this);\\n        c.connectionTarget = this.connectionTarget ? this.connectionTarget.clone() : null;\\n        return c;\\n    }\\n}\\nclass Board {\\n    constructor() {\\n        this.data = [];\\n        this.data = [];\\n        this.data.length = 64;\\n    }\\n    get(y, x) {\\n        return this.data[y * 8 + x];\\n    }\\n    set(y, x, u) {\\n        this.data[y * 8 + x] = u;\\n    }\\n    update(jsplumb) {\\n        for (const cell of this.data) {\\n            cell.update();\\n            cell.myTarget = 0;\\n            cell.enemyTarget = 0;\\n            cell.connectionTarget = null;\\n        }\\n        const connections = jsplumb.getAllConnections();\\n        for (const connection of connections) {\\n            this.updateConnection(connection);\\n        }\\n    }\\n    // Returns the first node on the route to the closest node to our borders matching predicate.\\n    findStepOnClosestRoute(enemyDef, predicate) {\\n        var queue = [];\\n        var minDef = new Map();\\n        for (const node of this.data.filter(n => n.owner == NodeOwner.Me)) {\\n            queue.push({ routeDef: 0, route: [node] });\\n            minDef.set(node, 0);\\n        }\\n        while (queue.length > 0) {\\n            // Scan the list to find the lowest cost element.\\n            // Worst case queue length is 64. It would be faster to use a real priority queue.\\n            // But it's not faster enough to worry about.\\n            const index = queue.reduce((a, ge, index) => ge.routeDef < queue[a].routeDef ? index : a, 0);\\n            // Pop this element out of the queue.\\n            const entry = queue[index];\\n            queue[index] = queue[queue.length - 1];\\n            queue.pop();\\n            const lastGridElement = entry.route[entry.route.length - 1];\\n            if (predicate(lastGridElement)) {\\n                // We've found the route to the closest item that matches the predicate. Return it.\\n                if (entry.route.length < 2 || entry.route[0].owner != NodeOwner.Me || entry.route[1].owner == NodeOwner.Me) {\\n                    throw new Error(\\\"unexpected route: expected at least two elements. the first should be owned by us and the second shouldn't\\\");\\n                }\\n                return new Path(entry.route);\\n            }\\n            // Otherwise, we'll enqueue any neighbors s.t. the path to the neighbor is cheaper than\\n            // any known path.\\n            for (const neighbor of this.neighbors(lastGridElement)) {\\n                const minCost = minDef.has(neighbor) ? minDef.get(neighbor) : Infinity;\\n                let neighborCost = neighbor.owner == NodeOwner.Enemy ? enemyDef : neighbor.def;\\n                if (neighbor.type == NodeType.Transfer) {\\n                    // We prefer to go through transfer nodes, since that can allow us to build up some additional\\n                    // attack as we go.\\n                    neighborCost *= .5;\\n                }\\n                const newRouteCost = entry.routeDef + neighborCost;\\n                if (minCost <= newRouteCost) {\\n                    // Not a better route to this neighbor.\\n                    continue;\\n                }\\n                minDef.set(neighbor, newRouteCost);\\n                queue.push({ routeDef: newRouteCost, route: [...entry.route, neighbor] });\\n            }\\n        }\\n        return null;\\n    }\\n    *neighbors(g) {\\n        if (g.y - 1 >= 0)\\n            yield this.get(g.y - 1, g.x);\\n        if (g.y + 1 < 8)\\n            yield this.get(g.y + 1, g.x);\\n        if (g.x - 1 >= 0)\\n            yield this.get(g.y, g.x - 1);\\n        if (g.x + 1 < 8)\\n            yield this.get(g.y, g.x + 1);\\n    }\\n    updateConnection(c) {\\n        const node1 = this.data.find(cell => c.endpoints[0].getElement().id == cell.node.id);\\n        const node2 = this.data.find(cell => c.endpoints[1].getElement().id == cell.node.id);\\n        if (!node1 || !node2)\\n            throw new Error(\\\"one of the endpoints was not a member of the grid\\\");\\n        const coreNode = node1.type == NodeType.Core ? node1 : node2;\\n        const targetNode = coreNode == node1 ? node2 : node1;\\n        coreNode.connectionTarget = targetNode;\\n        if (coreNode.owner == NodeOwner.Me)\\n            targetNode.myTarget++;\\n        else\\n            targetNode.enemyTarget++;\\n    }\\n    clone() {\\n        const b = new Board();\\n        b.data = [];\\n        for (const g of this.data) {\\n            b.data.push(g.clone());\\n        }\\n        return b;\\n    }\\n}\\nfunction readBoard() {\\n    const gridRoot = document.querySelectorAll(\\\"div .hack-mission-grid\\\")[0];\\n    if (!gridRoot)\\n        return null;\\n    const board = new Board();\\n    for (const child of gridRoot.children) {\\n        if (!child.id.startsWith(\\\"hacking-mission-node\\\") ||\\n            child.constructor != HTMLAnchorElement) {\\n            continue;\\n        }\\n        const gridElement = new GridElement(child);\\n        board.set(gridElement.y, gridElement.x, gridElement);\\n    }\\n    return board;\\n}\",\"filename\":\"hacking-mission.js\",\"module\":\"\",\"dependencies\":[\"hacking-mission.js\"],\"ramUsage\":28.15,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":68}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    var i = 0;\\n    const max = parseInt(ns.args[1]);   \\n    while (i < max) {\\n        await ns.sleep(100);\\n        if (!ns.isBusy()) {\\n            await ns.commitCrime(ns.args[0]);\\n            i = i + 1;\\n        }\\n    }\\n}\",\"filename\":\"crime.js\",\"module\":{},\"dependencies\":[\"crime.js\"],\"ramUsage\":7.1,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":69}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    let karma = ns.heart.break();\\n    ns.tprint(`karma=${karma}`);\\n}\",\"filename\":\"show-karma.js\",\"module\":{},\"dependencies\":[\"show-karma.js\"],\"ramUsage\":1.6,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":70}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export function GetFlag(ns, flag)\\n{\\n\\treturn ns.args.includes(flag);\\n}\\n\\nexport function GetArg(ns, arg, def = null)\\n{\\n\\tfor(var i = 0; i < ns.args.length - 1; i++)\\n\\t{\\n\\t\\tif(ns.args[i] == arg)\\n\\t\\t{\\n\\t\\t\\treturn ns.args[i+1];\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn def;\\n}\\n\\nexport function GetIndex(ns, arg)\\n{\\n\\tfor(var i = 0; i < ns.args.length; i++)\\n\\t{\\n\\t\\tif(ns.args[i] == arg)\\n\\t\\t{\\n\\t\\t\\treturn i;\\n\\t\\t}\\n\\t}\\n\\t\\n\\treturn -1;\\n}\",\"filename\":\"argFunctions.ns\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":71}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { GetFlag, GetArg } from \\\"argFunctions.ns\\\";\\n\\nfunction getRandomInt(max) {\\n    return Math.floor(Math.random() * Math.floor(max));\\n}\\n\\n// 30 possible gang members\\n// create list of names\\nlet memberNamePool = [\\n    \\\"Thor\\\", // 1\\n    \\\"Iron Man\\\", // 2\\n    \\\"Starlord\\\", // 3\\n    \\\"Thanos\\\", // 4\\n    \\\"Groot\\\", // 5\\n    \\\"Ant-Man\\\", // 6\\n    \\\"Wasp\\\", // 7\\n    \\\"Spiderman\\\", // 8\\n    \\\"Loki\\\", // 9\\n    \\\"Gamora\\\", // 10\\n    \\\"Rocket Raccoon\\\", // 11\\n    \\\"T'Challa\\\", // 12\\n    \\\"Vision\\\", // 13\\n    \\\"Scarlet Witch\\\", // 14\\n    \\\"Winter Soldier\\\", // 15\\n    \\\"Black Widow\\\", // 16\\n    \\\"Hulk\\\", // 17\\n    \\\"Bruce Banner\\\", // 18\\n    \\\"Hawkeye\\\", // 19\\n    \\\"Captain Marvel\\\", // 20\\n    \\\"War Machine\\\", // 21\\n    \\\"Nick Fury\\\", // 22\\n    \\\"Nebula\\\", // 23\\n    \\\"Drax\\\", // 24\\n    \\\"Deadpool\\\", // 25\\n    \\\"Cable\\\", // 26\\n    \\\"Quicksilver\\\", // 27\\n    \\\"Wolverine\\\", // 28\\n    \\\"Adam Warlock\\\", // 29\\n    \\\"Yondu\\\", // 30\\n];\\n\\nexport async function main(ns) {\\n    var buyAll = GetFlag(ns, \\\"--buyAll\\\");\\n\\n    var buyEquip = buyAll || GetFlag(ns, \\\"--buyEquip\\\");\\n\\n    var buyWeapon = buyAll || buyEquip || GetFlag(ns, \\\"--buyWeapon\\\");\\n    var buyArmor = buyAll || buyEquip || GetFlag(ns, \\\"--buyArmor\\\");\\n    var buyVehicle = buyAll || buyEquip || GetFlag(ns, \\\"--buyVehicle\\\");\\n    var buyRoot = buyAll || buyEquip || GetFlag(ns, \\\"--buyRoot\\\");\\n\\n    var buyAug = buyAll || GetFlag(ns, \\\"--buyAug\\\");\\n\\n    var myGang = ns.gang.getGangInformation();\\n    var possibleTasks = ns.gang.getTaskNames();\\n    var unassignedTask = possibleTasks.shift();\\n\\n    var territoryTask = possibleTasks.pop();\\n    var trainingTasks = possibleTasks.splice(possibleTasks.length - 3, 3);\\n    var wantedLevelLowerTask = possibleTasks.pop();\\n\\n    var desirableAugs = [];\\n\\n    if (myGang.isHacking) {\\n        wantedLevelLowerTask = possibleTasks.pop();\\n\\n        // replace combat with hacking\\n        trainingTasks.splice(0, 1, trainingTasks[1]);\\n\\n        desirableAugs.push(\\\"BitWire\\\");\\n        desirableAugs.push(\\\"Neuralstimulator\\\");\\n        desirableAugs.push(\\\"DataJack\\\");\\n    } else {\\n        // replace hacking with combat\\n        trainingTasks.splice(1, 1, trainingTasks[0]);\\n\\n        desirableAugs.push(\\\"Bionic Arms\\\");\\n        desirableAugs.push(\\\"Bionic Legs\\\");\\n        desirableAugs.push(\\\"Bionic Spine\\\");\\n        desirableAugs.push(\\\"BrachiBlades\\\");\\n        desirableAugs.push(\\\"Nanofiber Weave\\\");\\n        desirableAugs.push(\\\"Synthetic Heart\\\");\\n        desirableAugs.push(\\\"Synfibril Muscle\\\");\\n        desirableAugs.push(\\\"Graphene Bone Lacings\\\");\\n    }\\n\\n    var ascensionCycles = GetArg(ns, \\\"--asc\\\", 600000);\\n    var nextAscensionAttempt = 0;\\n    var cycleMs = 1100;\\n    var ascensionMultLimit = GetArg(ns, \\\"--alim\\\", 2);\\n\\n    while (true) {\\n        myGang = ns.gang.getGangInformation();\\n        var otherGangs = ns.gang.getOtherGangInformation();\\n        var buyableEquipment = ns.gang.getEquipmentNames().filter(e => {\\n            return ns.gang.getEquipmentType(e) != \\\"Augmentation\\\" || desirableAugs.includes(e);\\n        });\\n\\n        var members = ns.gang.getMemberNames();\\n\\n        while (ns.gang.canRecruitMember()) {\\n            var possibleNames = memberNamePool.filter(name => !members.includes(name));\\n            var toRecruit = possibleNames[getRandomInt(possibleNames.length)];\\n\\n            ns.gang.recruitMember(toRecruit);\\n            await ns.sleep(1);\\n        }\\n\\n        members = ns.gang.getMemberNames();\\n        var memInfo = null;\\n\\n        members.sort((a, b) => { return Math.random() * 2 - 1; });\\n        members.forEach((m) => {\\n            var didBuy = false;\\n            var hadAll = true;\\n\\n            memInfo = ns.gang.getMemberInformation(m);\\n\\n            ns.gang.setMemberTask(m, unassignedTask);\\n\\n            buyableEquipment.forEach((e) => {\\n                if (memInfo.equipment.includes(e)) return;\\n                if (memInfo.augmentations.includes(e)) return;\\n\\n                hadAll = false;\\n\\n                var type = ns.gang.getEquipmentType(e);\\n                switch (type) {\\n                    case \\\"Weapon\\\":\\n                        if (buyWeapon) {\\n                            didBuy |= ns.gang.purchaseEquipment(m, e);\\n                        }\\n                        break;\\n                    case \\\"Armor\\\":\\n                        if (buyArmor) {\\n                            didBuy |= ns.gang.purchaseEquipment(m, e);\\n                        }\\n                        break;\\n                    case \\\"Vehicle\\\":\\n                        if (buyVehicle) {\\n                            didBuy |= ns.gang.purchaseEquipment(m, e);\\n                        }\\n                        break;\\n                    case \\\"Rootkit\\\":\\n                        if (buyRoot) {\\n                            didBuy |= ns.gang.purchaseEquipment(m, e);\\n                        }\\n                        break;\\n                    case \\\"Augmentation\\\":\\n                        if (buyAug) {\\n                            didBuy |= ns.gang.purchaseEquipment(m, e);\\n                        }\\n                        break;\\n                    default:\\n                        break;\\n                }\\n            });\\n            var wantsToAscend = hadAll;\\n\\n            if (myGang.isHacking) {\\n                wantsToAscend &= memInfo.hackingAscensionMult < ascensionMultLimit;\\n            } else {\\n                wantsToAscend &= memInfo.hackingAscensionMult < ascensionMultLimit;\\n                wantsToAscend &= memInfo.strengthAscensionMult < ascensionMultLimit;\\n                wantsToAscend &= memInfo.agilityAscensionMult < ascensionMultLimit;\\n                wantsToAscend &= memInfo.dexterityAscensionMult < ascensionMultLimit;\\n            }\\n\\n            if (wantsToAscend && nextAscensionAttempt <= 0) {\\n                ns.gang.ascendMember(m);\\n            }\\n        });\\n\\n        if (nextAscensionAttempt <= 0) {\\n            nextAscensionAttempt = ascensionCycles;\\n        }\\n\\n        var member = \\\"\\\";\\n        if (!myGang.isHacking) {\\n            var memCount = members.length;\\n\\n            while (members.length > (memCount / 2)) {\\n                member = members.pop();\\n                ns.gang.setMemberTask(member, territoryTask);\\n            }\\n        }\\n\\n        while (members.length > 0) {\\n            var task = \\\"\\\";\\n            member = members.pop();\\n            memInfo = ns.gang.getMemberInformation(member);\\n\\n            var statsTarget = 50;\\n\\n            if ((myGang.isHacking && memInfo.hacking < statsTarget) ||\\n                (!myGang.isHacking && memInfo.strength < statsTarget && memInfo.agility < statsTarget && memInfo.charisma < statsTarget && memInfo.defense < statsTarget)) {\\n                task = trainingTasks[getRandomInt(trainingTasks.length)];\\n            } else if (myGang.wantedLevel > 1) {\\n                task = wantedLevelLowerTask;\\n            } else {\\n                if (Math.random() > 0.25) {\\n                    task = possibleTasks[possibleTasks.length - getRandomInt(2) - 1];\\n                } else {\\n                    task = trainingTasks[getRandomInt(trainingTasks.length)];\\n                }\\n            }\\n\\n            ns.gang.setMemberTask(member, task);\\n        }\\n\\n        await ns.sleep(cycleMs);\\n        nextAscensionAttempt -= cycleMs;\\n    }\\n}\",\"filename\":\"gangManager.js\",\"module\":{},\"dependencies\":[\"argFunctions.ns\",\"gangManager.js\"],\"ramUsage\":25.6,\"server\":\"10.6.1.0\",\"moduleSequenceNumber\":72}}],\"serversOnNetwork\":[\"20.3.1.9\",\"1.3.7.7\",\"21.9.7.6\",\"78.2.8.3\",\"82.9.8.6\",\"72.7.9.4\",\"13.2.8.1\",\"9.8.9.6\",\"20.8.0.9\",\"60.4.9.2\",\"28.5.7.1\",\"86.6.9.3\",\"71.8.3.2\",\"91.9.8.8\",\"31.7.5.6\",\"33.3.0.7\",\"33.0.6.8\",\"77.6.8.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"dir\":0}},\"53.6.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"53.6.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"64.0.4.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"manuallyHacked\":false,\"minDifficulty\":50,\"moneyAvailable\":66940531449.44253,\"moneyMax\":1608528725717.0928,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1104,\"serverGrowth\":99}},\"72.3.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"72.3.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"12.5.6.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"manuallyHacked\":false,\"minDifficulty\":50,\"moneyAvailable\":41194011967.5125,\"moneyMax\":989859956927.9243,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1101,\"serverGrowth\":99}},\"90.3.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-549226.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,1,0,0,0]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"90.3.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"33.5.9.0\",\"76.0.3.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":115.5,\"hackDifficulty\":115.5,\"manuallyHacked\":false,\"minDifficulty\":39,\"moneyAvailable\":17497341255.28643,\"moneyMax\":420447454231.21954,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":900,\"serverGrowth\":67}},\"29.2.3.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"29.2.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.6.7.8\",\"40.2.4.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":144,\"hackDifficulty\":144,\"manuallyHacked\":false,\"minDifficulty\":48,\"moneyAvailable\":22791819471.35717,\"moneyMax\":547669633587.01385,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":940,\"serverGrowth\":56}},\"12.5.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"12.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"33.5.9.0\",\"72.3.8.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"manuallyHacked\":false,\"minDifficulty\":50,\"moneyAvailable\":27777029268.55056,\"moneyMax\":667460334211.6149,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1247,\"serverGrowth\":66}},\"64.0.4.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"64.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"33.5.9.0\",\"53.6.8.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":70.5,\"hackDifficulty\":70.5,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":21652730090.349865,\"moneyMax\":520298204785.4159,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1136,\"serverGrowth\":71}},\"33.5.9.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"33.5.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.4.1.7\",\"90.3.5.7\",\"12.5.6.8\",\"64.0.4.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":136.5,\"hackDifficulty\":136.5,\"manuallyHacked\":false,\"minDifficulty\":46,\"moneyAvailable\":15296719559.784698,\"moneyMax\":367568232405.43774,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1054,\"serverGrowth\":97}},\"0.9.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"0.9.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.4.1.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":100.5,\"hackDifficulty\":100.5,\"manuallyHacked\":false,\"minDifficulty\":34,\"moneyAvailable\":21822837636.48597,\"moneyMax\":524385756355.3914,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1204,\"serverGrowth\":90}},\"79.6.7.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"79.6.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"60.4.1.7\",\"29.2.3.7\",\"67.8.5.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":142.5,\"hackDifficulty\":142.5,\"manuallyHacked\":false,\"minDifficulty\":48,\"moneyAvailable\":25361568949.442524,\"moneyMax\":609418707935.4701,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1242,\"serverGrowth\":91}},\"60.4.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"60.4.1.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"11.0.1.7\",\"33.5.9.0\",\"0.9.4.5\",\"79.6.7.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":138,\"hackDifficulty\":138,\"manuallyHacked\":false,\"minDifficulty\":46,\"moneyAvailable\":1558791309.11188,\"moneyMax\":37456538569.58574,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1006,\"serverGrowth\":80}},\"40.2.4.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"40.2.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"29.2.3.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":148.5,\"hackDifficulty\":148.5,\"manuallyHacked\":false,\"minDifficulty\":50,\"moneyAvailable\":961168.7812379855,\"moneyMax\":23096135.650662858,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1156,\"serverGrowth\":1}},\"68.0.9.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"68.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.3.9.4\",\"30.2.8.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":129,\"hackDifficulty\":129,\"manuallyHacked\":false,\"minDifficulty\":43,\"moneyAvailable\":993851897.3471742,\"moneyMax\":23881485422.60607,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":890,\"serverGrowth\":84}},\"57.4.1.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"57.4.1.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"43.6.3.9\",\"16.2.4.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":144,\"hackDifficulty\":144,\"manuallyHacked\":false,\"minDifficulty\":48,\"moneyAvailable\":895656264.8981161,\"moneyMax\":21521921013.507214,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1019,\"serverGrowth\":64}},\"16.2.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-328203.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,31],[25,28],[3,10],[20,23],[25,34],[12,19],[20,30],[21,22],[14,18],[18,19],[5,12],[18,23]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"16.2.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"57.4.1.8\",\"71.5.7.7\",\"10.6.7.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":124.5,\"hackDifficulty\":124.5,\"manuallyHacked\":false,\"minDifficulty\":42,\"moneyAvailable\":662354644.367551,\"moneyMax\":15915865156.851955,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":890,\"serverGrowth\":38}},\"18.4.4.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"18.4.4.9\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.3.9.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":130.5,\"hackDifficulty\":130.5,\"manuallyHacked\":false,\"minDifficulty\":44,\"moneyAvailable\":547039433.8715879,\"moneyMax\":13144930648.586792,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":833,\"serverGrowth\":78}},\"3.2.5.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"3.2.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.3.9.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"manuallyHacked\":false,\"minDifficulty\":45,\"moneyAvailable\":703294778.9311804,\"moneyMax\":16899624637.908028,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":786,\"serverGrowth\":64}},\"84.8.9.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"84.8.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.2.4.1\",\"84.8.9.9\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":132,\"hackDifficulty\":132,\"manuallyHacked\":false,\"minDifficulty\":44,\"moneyAvailable\":870128707.2279893,\"moneyMax\":20908513726.162758,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":910,\"serverGrowth\":87}},\"89.6.0.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-644364.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,3,1,8,6,4,6,6,1,0,3,0,10,0],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"89.6.0.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"30.9.2.7\",\"77.3.7.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":129,\"hackDifficulty\":129,\"manuallyHacked\":false,\"minDifficulty\":43,\"moneyAvailable\":1122047096.3091118,\"moneyMax\":26961916001.276237,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":871,\"serverGrowth\":85}},\"71.5.7.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"71.5.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"16.2.4.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":114,\"hackDifficulty\":114,\"manuallyHacked\":false,\"minDifficulty\":38,\"moneyAvailable\":741785912.1491734,\"moneyMax\":17824536527.99821,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":805,\"serverGrowth\":68}},\"79.3.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"79.3.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.9.7.6\",\"68.0.9.8\",\"18.4.4.9\",\"3.2.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":111,\"hackDifficulty\":111,\"manuallyHacked\":false,\"minDifficulty\":37,\"moneyAvailable\":642457881.5840062,\"moneyMax\":15437761475.97093,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":869,\"serverGrowth\":76}},\"84.8.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"84.8.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"84.8.9.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":114,\"hackDifficulty\":114,\"manuallyHacked\":false,\"minDifficulty\":38,\"moneyAvailable\":773853689.9269512,\"moneyMax\":18595100200.090137,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":864,\"serverGrowth\":70}},\"4.5.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"4.5.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"82.2.6.3\",\"30.9.2.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":782023836.9857748,\"moneyMax\":18791422457.366753,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":833,\"serverGrowth\":82}},\"88.9.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"88.9.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"64.3.1.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":133.5,\"hackDifficulty\":133.5,\"manuallyHacked\":false,\"minDifficulty\":45,\"moneyAvailable\":1043839012.8796617,\"moneyMax\":25082636795.455154,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":913,\"serverGrowth\":64}},\"10.2.4.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"10.2.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.0.1.6\",\"84.8.9.6\",\"74.6.4.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":135,\"hackDifficulty\":135,\"manuallyHacked\":false,\"minDifficulty\":45,\"moneyAvailable\":950656600.3460208,\"moneyMax\":22843536148.260784,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":944,\"serverGrowth\":65}},\"77.3.7.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"77.3.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"89.6.0.5\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":85.5,\"hackDifficulty\":85.5,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":967699968.2814302,\"moneyMax\":23253074977.927486,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":795,\"serverGrowth\":74}},\"11.0.1.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"11.0.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.9.7.6\",\"60.4.1.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":96,\"hackDifficulty\":96,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":918266398.5005767,\"moneyMax\":22065224877.46484,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":808,\"serverGrowth\":70}},\"74.6.4.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"74.6.4.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.2.4.1\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":105,\"hackDifficulty\":105,\"manuallyHacked\":false,\"minDifficulty\":35,\"moneyAvailable\":813525835.2556709,\"moneyMax\":19548390889.457684,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":805,\"serverGrowth\":75}},\"30.9.2.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"30.9.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4.5.6.6\",\"89.6.0.5\",\"41.7.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":121.5,\"hackDifficulty\":121.5,\"manuallyHacked\":false,\"minDifficulty\":41,\"moneyAvailable\":1306290594.002307,\"moneyMax\":31389143454.496037,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":881,\"serverGrowth\":70}},\"48.5.9.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"48.5.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"82.2.6.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":118.5,\"hackDifficulty\":118.5,\"manuallyHacked\":false,\"minDifficulty\":40,\"moneyAvailable\":1521193534.2176087,\"moneyMax\":36553093382.77606,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":837,\"serverGrowth\":80}},\"68.9.7.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"68.9.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"41.7.6.6\",\"79.3.9.4\",\"11.0.1.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":108,\"hackDifficulty\":108,\"manuallyHacked\":false,\"minDifficulty\":36,\"moneyAvailable\":1117011152.4413688,\"moneyMax\":26840906200.532703,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":799,\"serverGrowth\":71}},\"41.7.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-618285.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[6,8],[25,33],[3,10],[9,14],[9,16],[20,29],[11,18],[17,23],[4,8],[19,28]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"41.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"30.9.2.7\",\"68.9.7.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":108,\"hackDifficulty\":108,\"manuallyHacked\":false,\"minDifficulty\":36,\"moneyAvailable\":1433820083.621684,\"moneyMax\":34453577557.23001,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":839,\"serverGrowth\":73}},\"43.6.3.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"43.6.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.0.1.6\",\"57.4.1.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":112.5,\"hackDifficulty\":112.5,\"manuallyHacked\":false,\"minDifficulty\":38,\"moneyAvailable\":1023275775.6632065,\"moneyMax\":24588518254.11396,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":823,\"serverGrowth\":76}},\"64.3.1.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"64.3.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.7.6.6\",\"88.9.1.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":109.5,\"hackDifficulty\":109.5,\"manuallyHacked\":false,\"minDifficulty\":37,\"moneyAvailable\":687626743.5601692,\"moneyMax\":16523133976.359316,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":688,\"serverGrowth\":62}},\"14.9.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"14.9.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"14.9.8.3\",\"moduleSequenceNumber\":27473}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"14.9.8.3\",\"moduleSequenceNumber\":28776}}],\"serversOnNetwork\":[\"92.8.8.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":69,\"hackDifficulty\":69,\"manuallyHacked\":false,\"minDifficulty\":23,\"moneyAvailable\":542642381.77624,\"moneyMax\":13039272918.498655,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":503,\"serverGrowth\":44}},\"82.2.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"82.2.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"82.2.6.3\",\"moduleSequenceNumber\":30397}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"82.2.6.3\",\"moduleSequenceNumber\":30398}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"82.2.6.3\",\"moduleSequenceNumber\":30602}}],\"serversOnNetwork\":[\"4.8.5.5\",\"4.5.6.6\",\"48.5.9.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":76.5,\"hackDifficulty\":76.5,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":666667107.8431373,\"moneyMax\":16019490288.426022,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":554,\"serverGrowth\":58}},\"76.4.2.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"76.4.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"98.7.6.6\",\"98.0.1.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":105,\"hackDifficulty\":105,\"manuallyHacked\":false,\"minDifficulty\":35,\"moneyAvailable\":291141523.4525183,\"moneyMax\":6995903581.615684,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":433,\"serverGrowth\":42}},\"9.3.8.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"9.3.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"9.3.8.2\",\"moduleSequenceNumber\":27579}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"9.3.8.2\",\"moduleSequenceNumber\":28411}}],\"serversOnNetwork\":[\"43.8.7.0\",\"65.1.4.7\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":72,\"hackDifficulty\":72,\"manuallyHacked\":false,\"minDifficulty\":24,\"moneyAvailable\":228343782.19915417,\"moneyMax\":5486922870.990825,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":375,\"serverGrowth\":45}},\"92.8.8.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"92.8.8.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"70.1.9.4\",\"14.9.8.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":120,\"hackDifficulty\":120,\"manuallyHacked\":false,\"minDifficulty\":40,\"moneyAvailable\":863642200.1153404,\"moneyMax\":20752648022.76385,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":744,\"serverGrowth\":75}},\"76.9.3.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"76.9.3.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"76.9.3.5\",\"moduleSequenceNumber\":27578}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"76.9.3.5\",\"moduleSequenceNumber\":28141}}],\"serversOnNetwork\":[\"43.8.7.0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":75,\"hackDifficulty\":75,\"manuallyHacked\":false,\"minDifficulty\":25,\"moneyAvailable\":324464958.6697424,\"moneyMax\":7796639721.97574,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":458,\"serverGrowth\":56}},\"98.7.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"98.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"96.3.9.5\",\"64.3.1.2\",\"76.4.2.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":103.5,\"hackDifficulty\":103.5,\"manuallyHacked\":false,\"minDifficulty\":35,\"moneyAvailable\":389291810.84198385,\"moneyMax\":9354378384.32295,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":650,\"serverGrowth\":65}},\"4.8.5.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"4.8.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"4.8.5.5\",\"moduleSequenceNumber\":27256}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"4.8.5.5\",\"moduleSequenceNumber\":27699}}],\"serversOnNetwork\":[\"79.0.9.2\",\"82.2.6.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":94.5,\"hackDifficulty\":94.5,\"manuallyHacked\":false,\"minDifficulty\":32,\"moneyAvailable\":431819421.37639374,\"moneyMax\":10376283673.98101,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":415,\"serverGrowth\":49}},\"14.3.0.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-917766.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[150,12,68,100,45,91,19,65,102,9,151,116,179,86,105,44,130,126,186]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"14.3.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"14.3.0.6\",\"moduleSequenceNumber\":27524}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"14.3.0.6\",\"moduleSequenceNumber\":28010}}],\"serversOnNetwork\":[\"83.0.6.6\",\"71.5.6.3\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":63,\"hackDifficulty\":63,\"manuallyHacked\":false,\"minDifficulty\":21,\"moneyAvailable\":185371744.52133796,\"moneyMax\":4454338343.93834,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":311,\"serverGrowth\":45}},\"96.3.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"96.3.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.7.7.0\",\"98.7.6.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":84,\"hackDifficulty\":84,\"manuallyHacked\":false,\"minDifficulty\":28,\"moneyAvailable\":214487837.37024224,\"moneyMax\":5153975330.888174,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":326,\"serverGrowth\":56}},\"70.1.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"70.1.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"70.1.9.4\",\"moduleSequenceNumber\":27472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"70.1.9.4\",\"moduleSequenceNumber\":28555}}],\"serversOnNetwork\":[\"32.1.2.0\",\"92.8.8.1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":106.5,\"hackDifficulty\":106.5,\"manuallyHacked\":false,\"minDifficulty\":36,\"moneyAvailable\":264321414.840446,\"moneyMax\":6351437303.932286,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":409,\"serverGrowth\":62}},\"18.1.8.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"18.1.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"76.7.8.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":87,\"hackDifficulty\":87,\"manuallyHacked\":false,\"minDifficulty\":29,\"moneyAvailable\":78350307.57401,\"moneyMax\":1882696741.0133123,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":284,\"serverGrowth\":47}},\"20.3.1.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"20.3.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\",\"17.8.6.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":5,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":15339782.867141003,\"moneyMax\":46192271.301325716,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"1.3.7.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-386377.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"84115175242\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"1.3.7.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\",\"62.5.3.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":15,\"hackDifficulty\":5,\"manuallyHacked\":false,\"minDifficulty\":5,\"moneyAvailable\":53121111.99652458,\"moneyMax\":53121111.99652458,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"21.9.7.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-714618-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[181,71,191,99,190,111,99,55,80,41,143,140,155,172,9,139,157],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"21.9.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joes Guns\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\",\"12.3.5.9\",\"69.6.9.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":57740339.12665714,\"moneyMax\":57740339.12665714,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"17.8.6.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"17.8.6.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"17.8.6.2\",\"moduleSequenceNumber\":27576}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"17.8.6.2\",\"moduleSequenceNumber\":28700}}],\"serversOnNetwork\":[\"20.3.1.9\",\"68.7.7.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"manuallyHacked\":false,\"minDifficulty\":13,\"moneyAvailable\":16984841.256201815,\"moneyMax\":173221017.37997144,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"12.3.5.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"12.3.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"21.9.7.6\",\"76.7.8.8\",\"32.1.2.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":10,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":63514373.03932286,\"moneyMax\":63514373.03932286,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"68.7.7.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"68.7.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"68.7.7.0\",\"moduleSequenceNumber\":27577}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"68.7.7.0\",\"moduleSequenceNumber\":28341}}],\"serversOnNetwork\":[\"17.8.6.2\",\"96.3.9.5\",\"43.8.7.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"manuallyHacked\":false,\"minDifficulty\":13,\"moneyAvailable\":9600508.464492632,\"moneyMax\":115480678.25331429,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"83.0.6.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"83.0.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"83.0.6.6\",\"moduleSequenceNumber\":27337}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"83.0.6.6\",\"moduleSequenceNumber\":27760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"83.0.6.6\",\"moduleSequenceNumber\":29085}}],\"serversOnNetwork\":[\"62.5.3.0\",\"14.3.0.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":45,\"hackDifficulty\":15,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":47672239.5316978,\"moneyMax\":1039326104.2798285,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"78.2.8.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"78.2.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":38575177.427136295,\"moneyMax\":69288406.95198858,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"82.9.8.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"82.9.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":92384542.60265143,\"moneyMax\":92384542.60265143,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"76.7.8.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-247629-Sector-12.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[89,188,51,80,34,158,60,123,140,139,154,70,138,57],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"76.7.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"76.7.8.8\",\"moduleSequenceNumber\":27523}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"76.7.8.8\",\"moduleSequenceNumber\":28011}}],\"serversOnNetwork\":[\"12.3.5.9\",\"18.1.8.4\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":30,\"hackDifficulty\":10.956,\"manuallyHacked\":false,\"minDifficulty\":10,\"moneyAvailable\":43639189.125392124,\"moneyMax\":554307255.6159086,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"69.6.9.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-831262.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[6,2],[2,3,5],[8,9,2,6]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"69.6.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"69.6.9.5\",\"moduleSequenceNumber\":27470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"69.6.9.5\",\"moduleSequenceNumber\":28701}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"69.6.9.5\",\"moduleSequenceNumber\":29087}}],\"serversOnNetwork\":[\"21.9.7.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":22.5,\"hackDifficulty\":8,\"manuallyHacked\":false,\"minDifficulty\":8,\"moneyAvailable\":95074833.76965523,\"moneyMax\":230961356.50662857,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"32.1.2.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"32.1.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"32.1.2.0\",\"moduleSequenceNumber\":27471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"32.1.2.0\",\"moduleSequenceNumber\":28412}}],\"serversOnNetwork\":[\"12.3.5.9\",\"70.1.9.4\",\"79.0.9.2\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":37.5,\"hackDifficulty\":13,\"manuallyHacked\":false,\"minDifficulty\":13,\"moneyAvailable\":85492731.14765045,\"moneyMax\":1565350986.984718,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":202,\"serverGrowth\":30}},\"43.8.7.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"43.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.7.7.0\",\"9.3.8.2\",\"76.9.3.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":57,\"hackDifficulty\":57,\"manuallyHacked\":false,\"minDifficulty\":19,\"moneyAvailable\":46555655.517108805,\"moneyMax\":1118696066.827874,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":235,\"serverGrowth\":28}},\"72.7.9.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"72.7.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"72.7.9.4\",\"moduleSequenceNumber\":27424}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"72.7.9.4\",\"moduleSequenceNumber\":28410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"72.7.9.4\",\"moduleSequenceNumber\":29086}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":45,\"hackDifficulty\":33.32179930795848,\"manuallyHacked\":false,\"minDifficulty\":15,\"moneyAvailable\":19223375.624759708,\"moneyMax\":461922713.01325715,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"65.1.4.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-989543.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[137,69,110,4,134,1,51],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"65.1.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"65.1.4.7\",\"moduleSequenceNumber\":27338}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"65.1.4.7\",\"moduleSequenceNumber\":27469}}],\"serversOnNetwork\":[\"9.3.8.2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":78,\"hackDifficulty\":78,\"manuallyHacked\":false,\"minDifficulty\":26,\"moneyAvailable\":240292195.30949637,\"moneyMax\":5774033912.665715,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":506,\"serverGrowth\":33}},\"67.8.5.4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"67.8.5.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"79.6.7.8\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":90,\"hackDifficulty\":90,\"manuallyHacked\":false,\"minDifficulty\":30,\"moneyAvailable\":865051903.1141869,\"moneyMax\":20786522085.596573,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":981,\"serverGrowth\":59}},\"98.0.1.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"98.0.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"76.4.2.6\",\"10.2.4.1\",\"43.6.3.9\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":60,\"hackDifficulty\":60,\"manuallyHacked\":false,\"minDifficulty\":20,\"moneyAvailable\":432525951.55709344,\"moneyMax\":10393261042.798286,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":718,\"serverGrowth\":59}},\"10.6.7.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"10.6.7.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"10.6.7.8\",\"moduleSequenceNumber\":30299}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"10.6.7.8\",\"moduleSequenceNumber\":30396}}],\"serversOnNetwork\":[\"16.2.4.3\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":534,\"serverGrowth\":0}},\"71.5.6.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"71.5.6.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"71.5.6.3\",\"moduleSequenceNumber\":27254}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"71.5.6.3\",\"moduleSequenceNumber\":28140}}],\"serversOnNetwork\":[\"14.3.0.6\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"purchasedByPlayer\":false,\"requiredHackingSkill\":355,\"serverGrowth\":0}},\"79.0.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-599786.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":718594121,\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"79.0.9.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"79.0.9.2\",\"moduleSequenceNumber\":27255}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"79.0.9.2\",\"moduleSequenceNumber\":29170}}],\"serversOnNetwork\":[\"32.1.2.0\",\"4.8.5.5\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"purchasedByPlayer\":false,\"requiredHackingSkill\":212,\"serverGrowth\":0}},\"30.2.8.5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"30.2.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"68.0.9.8\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":4,\"purchasedByPlayer\":false,\"requiredHackingSkill\":533,\"serverGrowth\":0}},\"62.5.3.0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"62.5.3.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"1.3.7.7\",\"83.0.6.6\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":1,\"manuallyHacked\":true,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"purchasedByPlayer\":false,\"requiredHackingSkill\":53,\"serverGrowth\":0}},\"76.0.3.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"76.0.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"90.3.5.7\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"60.7.9.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"60.7.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":0,\"hackDifficulty\":0,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"13.2.8.1\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-0\",\"httpPortOpen\":false,\"ip\":\"13.2.8.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"13.2.8.1\",\"moduleSequenceNumber\":27423}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"13.2.8.1\",\"moduleSequenceNumber\":28340}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"13.2.8.1\",\"moduleSequenceNumber\":29929}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"cache\":5,\"cores\":10,\"hashCapacity\":1024,\"hashRate\":0.5273671467133271,\"level\":100,\"onlineTimeSeconds\":0,\"totalHashesGenerated\":0}},\"9.8.9.6\":{\"ctor\":\"HacknetServer\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hacknet-node-1\",\"httpPortOpen\":false,\"ip\":\"9.8.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"cache\":2,\"cores\":5,\"hashCapacity\":128,\"hashRate\":0.06336854900427161,\"level\":20,\"onlineTimeSeconds\":0,\"totalHashesGenerated\":0}},\"20.8.0.9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon\",\"httpPortOpen\":false,\"ip\":\"20.8.0.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"20.8.0.9\",\"moduleSequenceNumber\":27253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"20.8.0.9\",\"moduleSequenceNumber\":27580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"20.8.0.9\",\"moduleSequenceNumber\":30018}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"60.4.9.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"60.4.9.2\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":false,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"28.5.7.1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-0\",\"httpPortOpen\":false,\"ip\":\"28.5.7.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"28.5.7.1\",\"moduleSequenceNumber\":27637}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"28.5.7.1\",\"moduleSequenceNumber\":27639}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"86.6.9.3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-1\",\"httpPortOpen\":false,\"ip\":\"86.6.9.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"86.6.9.3\",\"moduleSequenceNumber\":27638}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"86.6.9.3\",\"moduleSequenceNumber\":27761}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"86.6.9.3\",\"moduleSequenceNumber\":30601}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"71.8.3.2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-2\",\"httpPortOpen\":false,\"ip\":\"71.8.3.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"71.8.3.2\",\"moduleSequenceNumber\":29002}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"71.8.3.2\",\"moduleSequenceNumber\":29005}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"91.9.8.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-3\",\"httpPortOpen\":false,\"ip\":\"91.9.8.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"91.9.8.8\",\"moduleSequenceNumber\":29003}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"91.9.8.8\",\"moduleSequenceNumber\":29004}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"91.9.8.8\",\"moduleSequenceNumber\":29669}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"31.7.5.6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-4\",\"httpPortOpen\":false,\"ip\":\"31.7.5.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"31.7.5.6\",\"moduleSequenceNumber\":29754}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"31.7.5.6\",\"moduleSequenceNumber\":29755}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"31.7.5.6\",\"moduleSequenceNumber\":29928}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"33.3.0.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-5\",\"httpPortOpen\":false,\"ip\":\"33.3.0.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"33.3.0.7\",\"moduleSequenceNumber\":30108}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"33.3.0.7\",\"moduleSequenceNumber\":30109}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"33.3.0.7\",\"moduleSequenceNumber\":30110}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"33.0.6.8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-6\",\"httpPortOpen\":false,\"ip\":\"33.0.6.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"33.0.6.8\",\"moduleSequenceNumber\":30203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"33.0.6.8\",\"moduleSequenceNumber\":30204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"33.0.6.8\",\"moduleSequenceNumber\":30395}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"77.6.8.7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"daemon-7\",\"httpPortOpen\":false,\"ip\":\"77.6.8.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of grow-target is to wait until an appointed time and then execute a grow.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.grow(ns.args[0]);\\r\\n}\",\"filename\":\"grow-target.ns\",\"module\":{},\"dependencies\":[\"grow-target.ns\"],\"ramUsage\":1.75,\"server\":\"77.6.8.7\",\"moduleSequenceNumber\":30498}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of weak-target is to wait until an appointed time and then execute a weaken.\\n\\nexport async function main(ns) {\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\n    await ns.weaken(ns.args[0]);\\n}\",\"filename\":\"weak-target.ns\",\"module\":{},\"dependencies\":[\"weak-target.ns\"],\"ramUsage\":1.75,\"server\":\"77.6.8.7\",\"moduleSequenceNumber\":30499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// the purpose of hack-target is to wait until an appointed time and then execute a hack.\\r\\n\\r\\nexport async function main(ns) {\\r\\n    await ns.sleep(parseInt(ns.args[1]) - Date.now());\\r\\n    await ns.hack(ns.args[0]);\\r\\n}\",\"filename\":\"hack-target.ns\",\"module\":{},\"dependencies\":[\"hack-target.ns\"],\"ramUsage\":1.7,\"server\":\"77.6.8.7\",\"moduleSequenceNumber\":30603}}],\"serversOnNetwork\":[\"10.6.1.0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"baseDifficulty\":1,\"hackDifficulty\":1,\"manuallyHacked\":false,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"purchasedByPlayer\":true,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":420.4417386133561,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tetrads\",\"playerReputation\":22.598816660258866,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Slum Snakes\",\"playerReputation\":32.639016583365354,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":22.598816660258866,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":5.020099961553249,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":2.5100499807766243,\"rolloverRep\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"40.2.4.5\",\"BitRunners Server\":\"10.6.7.8\",\"The Black Hand Server\":\"71.5.6.3\",\"NiteSec Server\":\"79.0.9.2\",\"The Dark Army Server\":\"30.2.8.5\",\"CyberSec Server\":\"62.5.3.0\",\"Daedalus Server\":\"76.0.3.6\",\"w0r1d_d43m0n\":\"60.7.9.9\",\"Darkweb Server\":\"60.4.9.2\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableHotkeys\":false,\"Editor\":\"CodeMirror\",\"EditorKeybinding\":\"default\",\"EditorTheme\":\"monokai\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"OwnedAugmentationsOrder\":0,\"PurchaseAugmentationsOrder\":0,\"SuppressBuyAugmentationConfirmation\":true,\"SuppressFactionInvites\":true,\"SuppressHospitalizationPopup\":true,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":true,\"ThemeBackgroundColor\":\"#002b36\",\"ThemeFontColor\":\"#839496\",\"ThemeHighlightColor\":\"#6c71c4\"}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false,\"ENABLE_TIMESTAMPS\":false,\"MAIN_MENU_STYLE\":\"default\",\"THEME_BACKGROUND_COLOR\":\"#000000\",\"THEME_FONT_COLOR\":\"#66ff33\",\"THEME_HIGHLIGHT_COLOR\":\"#ffffff\",\"THEME_PROMPT_COLOR\":\"#f92672\",\"WRAP_INPUT\":false}","VersionSave":"\"0.47.2\"","AllGangsSave":"{\"Slum Snakes\":{\"power\":3.1354812030075214,\"territory\":0.14285714285714285},\"Tetrads\":{\"power\":5.264144427551349,\"territory\":0.1459571428571425},\"The Syndicate\":{\"power\":3.848426096023632,\"territory\":0.14435714285714268},\"The Dark Army\":{\"power\":5.311685435160135,\"territory\":0.14675714285714242},\"Speakers for the Dead\":{\"power\":4.116093713061772,\"territory\":0.13825714285714336},\"NiteSec\":{\"power\":4.22974927636536,\"territory\":0.13985714285714318},\"The Black Hand\":{\"power\":4.436693348241597,\"territory\":0.14195714285714295}}"}}